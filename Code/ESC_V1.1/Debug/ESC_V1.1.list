
ESC_V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c10  080000b8  080000b8  000100b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08007cc8  08007cc8  00017cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ed0  08007ed0  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08007ed0  08007ed0  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ed0  08007ed0  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ed0  08007ed0  00017ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ed4  08007ed4  00017ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08007ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000003e0  200000b8  08007f8c  000200b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08007f8c  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb8d  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c1  00000000  00000000  0002fc69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00032630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  00033580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017665  00000000  00000000  000343a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110d3  00000000  00000000  0004ba0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f940  00000000  00000000  0005cae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec420  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003870  00000000  00000000  000ec470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200000b8 	.word	0x200000b8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08007ca0 	.word	0x08007ca0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200000bc 	.word	0x200000bc
 80000fc:	08007ca0 	.word	0x08007ca0

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_cdrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	0010      	movs	r0, r2
 80003f0:	4662      	mov	r2, ip
 80003f2:	468c      	mov	ip, r1
 80003f4:	0019      	movs	r1, r3
 80003f6:	4663      	mov	r3, ip
 80003f8:	e000      	b.n	80003fc <__aeabi_cdcmpeq>
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__aeabi_cdcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fbd1 	bl	8000ba4 <__ledf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cdcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_dcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 fb21 	bl	8000a54 <__eqdf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_dcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fbc3 	bl	8000ba4 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_dcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_dcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fbb9 	bl	8000ba4 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_dcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_dcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fb49 	bl	8000ad8 <__gedf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_dcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fb3f 	bl	8000ad8 <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_dcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_ddiv>:
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	4657      	mov	r7, sl
 800046c:	464e      	mov	r6, r9
 800046e:	4645      	mov	r5, r8
 8000470:	46de      	mov	lr, fp
 8000472:	b5e0      	push	{r5, r6, r7, lr}
 8000474:	4681      	mov	r9, r0
 8000476:	0005      	movs	r5, r0
 8000478:	030c      	lsls	r4, r1, #12
 800047a:	0048      	lsls	r0, r1, #1
 800047c:	4692      	mov	sl, r2
 800047e:	001f      	movs	r7, r3
 8000480:	b085      	sub	sp, #20
 8000482:	0b24      	lsrs	r4, r4, #12
 8000484:	0d40      	lsrs	r0, r0, #21
 8000486:	0fce      	lsrs	r6, r1, #31
 8000488:	2800      	cmp	r0, #0
 800048a:	d100      	bne.n	800048e <__aeabi_ddiv+0x26>
 800048c:	e156      	b.n	800073c <__aeabi_ddiv+0x2d4>
 800048e:	4bd4      	ldr	r3, [pc, #848]	; (80007e0 <__aeabi_ddiv+0x378>)
 8000490:	4298      	cmp	r0, r3
 8000492:	d100      	bne.n	8000496 <__aeabi_ddiv+0x2e>
 8000494:	e172      	b.n	800077c <__aeabi_ddiv+0x314>
 8000496:	0f6b      	lsrs	r3, r5, #29
 8000498:	00e4      	lsls	r4, r4, #3
 800049a:	431c      	orrs	r4, r3
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	041b      	lsls	r3, r3, #16
 80004a0:	4323      	orrs	r3, r4
 80004a2:	4698      	mov	r8, r3
 80004a4:	4bcf      	ldr	r3, [pc, #828]	; (80007e4 <__aeabi_ddiv+0x37c>)
 80004a6:	00ed      	lsls	r5, r5, #3
 80004a8:	469b      	mov	fp, r3
 80004aa:	2300      	movs	r3, #0
 80004ac:	4699      	mov	r9, r3
 80004ae:	4483      	add	fp, r0
 80004b0:	9300      	str	r3, [sp, #0]
 80004b2:	033c      	lsls	r4, r7, #12
 80004b4:	007b      	lsls	r3, r7, #1
 80004b6:	4650      	mov	r0, sl
 80004b8:	0b24      	lsrs	r4, r4, #12
 80004ba:	0d5b      	lsrs	r3, r3, #21
 80004bc:	0fff      	lsrs	r7, r7, #31
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d100      	bne.n	80004c4 <__aeabi_ddiv+0x5c>
 80004c2:	e11f      	b.n	8000704 <__aeabi_ddiv+0x29c>
 80004c4:	4ac6      	ldr	r2, [pc, #792]	; (80007e0 <__aeabi_ddiv+0x378>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d100      	bne.n	80004cc <__aeabi_ddiv+0x64>
 80004ca:	e162      	b.n	8000792 <__aeabi_ddiv+0x32a>
 80004cc:	49c5      	ldr	r1, [pc, #788]	; (80007e4 <__aeabi_ddiv+0x37c>)
 80004ce:	0f42      	lsrs	r2, r0, #29
 80004d0:	468c      	mov	ip, r1
 80004d2:	00e4      	lsls	r4, r4, #3
 80004d4:	4659      	mov	r1, fp
 80004d6:	4314      	orrs	r4, r2
 80004d8:	2280      	movs	r2, #128	; 0x80
 80004da:	4463      	add	r3, ip
 80004dc:	0412      	lsls	r2, r2, #16
 80004de:	1acb      	subs	r3, r1, r3
 80004e0:	4314      	orrs	r4, r2
 80004e2:	469b      	mov	fp, r3
 80004e4:	00c2      	lsls	r2, r0, #3
 80004e6:	2000      	movs	r0, #0
 80004e8:	0033      	movs	r3, r6
 80004ea:	407b      	eors	r3, r7
 80004ec:	469a      	mov	sl, r3
 80004ee:	464b      	mov	r3, r9
 80004f0:	2b0f      	cmp	r3, #15
 80004f2:	d827      	bhi.n	8000544 <__aeabi_ddiv+0xdc>
 80004f4:	49bc      	ldr	r1, [pc, #752]	; (80007e8 <__aeabi_ddiv+0x380>)
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	58cb      	ldr	r3, [r1, r3]
 80004fa:	469f      	mov	pc, r3
 80004fc:	46b2      	mov	sl, r6
 80004fe:	9b00      	ldr	r3, [sp, #0]
 8000500:	2b02      	cmp	r3, #2
 8000502:	d016      	beq.n	8000532 <__aeabi_ddiv+0xca>
 8000504:	2b03      	cmp	r3, #3
 8000506:	d100      	bne.n	800050a <__aeabi_ddiv+0xa2>
 8000508:	e28e      	b.n	8000a28 <__aeabi_ddiv+0x5c0>
 800050a:	2b01      	cmp	r3, #1
 800050c:	d000      	beq.n	8000510 <__aeabi_ddiv+0xa8>
 800050e:	e0d9      	b.n	80006c4 <__aeabi_ddiv+0x25c>
 8000510:	2300      	movs	r3, #0
 8000512:	2400      	movs	r4, #0
 8000514:	2500      	movs	r5, #0
 8000516:	4652      	mov	r2, sl
 8000518:	051b      	lsls	r3, r3, #20
 800051a:	4323      	orrs	r3, r4
 800051c:	07d2      	lsls	r2, r2, #31
 800051e:	4313      	orrs	r3, r2
 8000520:	0028      	movs	r0, r5
 8000522:	0019      	movs	r1, r3
 8000524:	b005      	add	sp, #20
 8000526:	bcf0      	pop	{r4, r5, r6, r7}
 8000528:	46bb      	mov	fp, r7
 800052a:	46b2      	mov	sl, r6
 800052c:	46a9      	mov	r9, r5
 800052e:	46a0      	mov	r8, r4
 8000530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000532:	2400      	movs	r4, #0
 8000534:	2500      	movs	r5, #0
 8000536:	4baa      	ldr	r3, [pc, #680]	; (80007e0 <__aeabi_ddiv+0x378>)
 8000538:	e7ed      	b.n	8000516 <__aeabi_ddiv+0xae>
 800053a:	46ba      	mov	sl, r7
 800053c:	46a0      	mov	r8, r4
 800053e:	0015      	movs	r5, r2
 8000540:	9000      	str	r0, [sp, #0]
 8000542:	e7dc      	b.n	80004fe <__aeabi_ddiv+0x96>
 8000544:	4544      	cmp	r4, r8
 8000546:	d200      	bcs.n	800054a <__aeabi_ddiv+0xe2>
 8000548:	e1c7      	b.n	80008da <__aeabi_ddiv+0x472>
 800054a:	d100      	bne.n	800054e <__aeabi_ddiv+0xe6>
 800054c:	e1c2      	b.n	80008d4 <__aeabi_ddiv+0x46c>
 800054e:	2301      	movs	r3, #1
 8000550:	425b      	negs	r3, r3
 8000552:	469c      	mov	ip, r3
 8000554:	002e      	movs	r6, r5
 8000556:	4640      	mov	r0, r8
 8000558:	2500      	movs	r5, #0
 800055a:	44e3      	add	fp, ip
 800055c:	0223      	lsls	r3, r4, #8
 800055e:	0e14      	lsrs	r4, r2, #24
 8000560:	431c      	orrs	r4, r3
 8000562:	0c1b      	lsrs	r3, r3, #16
 8000564:	4699      	mov	r9, r3
 8000566:	0423      	lsls	r3, r4, #16
 8000568:	0c1f      	lsrs	r7, r3, #16
 800056a:	0212      	lsls	r2, r2, #8
 800056c:	4649      	mov	r1, r9
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9701      	str	r7, [sp, #4]
 8000572:	f7ff fe4b 	bl	800020c <__aeabi_uidivmod>
 8000576:	0002      	movs	r2, r0
 8000578:	437a      	muls	r2, r7
 800057a:	040b      	lsls	r3, r1, #16
 800057c:	0c31      	lsrs	r1, r6, #16
 800057e:	4680      	mov	r8, r0
 8000580:	4319      	orrs	r1, r3
 8000582:	428a      	cmp	r2, r1
 8000584:	d907      	bls.n	8000596 <__aeabi_ddiv+0x12e>
 8000586:	2301      	movs	r3, #1
 8000588:	425b      	negs	r3, r3
 800058a:	469c      	mov	ip, r3
 800058c:	1909      	adds	r1, r1, r4
 800058e:	44e0      	add	r8, ip
 8000590:	428c      	cmp	r4, r1
 8000592:	d800      	bhi.n	8000596 <__aeabi_ddiv+0x12e>
 8000594:	e207      	b.n	80009a6 <__aeabi_ddiv+0x53e>
 8000596:	1a88      	subs	r0, r1, r2
 8000598:	4649      	mov	r1, r9
 800059a:	f7ff fe37 	bl	800020c <__aeabi_uidivmod>
 800059e:	0409      	lsls	r1, r1, #16
 80005a0:	468c      	mov	ip, r1
 80005a2:	0431      	lsls	r1, r6, #16
 80005a4:	4666      	mov	r6, ip
 80005a6:	9a01      	ldr	r2, [sp, #4]
 80005a8:	0c09      	lsrs	r1, r1, #16
 80005aa:	4342      	muls	r2, r0
 80005ac:	0003      	movs	r3, r0
 80005ae:	4331      	orrs	r1, r6
 80005b0:	428a      	cmp	r2, r1
 80005b2:	d904      	bls.n	80005be <__aeabi_ddiv+0x156>
 80005b4:	1909      	adds	r1, r1, r4
 80005b6:	3b01      	subs	r3, #1
 80005b8:	428c      	cmp	r4, r1
 80005ba:	d800      	bhi.n	80005be <__aeabi_ddiv+0x156>
 80005bc:	e1ed      	b.n	800099a <__aeabi_ddiv+0x532>
 80005be:	1a88      	subs	r0, r1, r2
 80005c0:	4642      	mov	r2, r8
 80005c2:	0412      	lsls	r2, r2, #16
 80005c4:	431a      	orrs	r2, r3
 80005c6:	4690      	mov	r8, r2
 80005c8:	4641      	mov	r1, r8
 80005ca:	9b00      	ldr	r3, [sp, #0]
 80005cc:	040e      	lsls	r6, r1, #16
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001f      	movs	r7, r3
 80005d2:	9302      	str	r3, [sp, #8]
 80005d4:	9b00      	ldr	r3, [sp, #0]
 80005d6:	0c36      	lsrs	r6, r6, #16
 80005d8:	041b      	lsls	r3, r3, #16
 80005da:	0c19      	lsrs	r1, r3, #16
 80005dc:	000b      	movs	r3, r1
 80005de:	4373      	muls	r3, r6
 80005e0:	0c12      	lsrs	r2, r2, #16
 80005e2:	437e      	muls	r6, r7
 80005e4:	9103      	str	r1, [sp, #12]
 80005e6:	4351      	muls	r1, r2
 80005e8:	437a      	muls	r2, r7
 80005ea:	0c1f      	lsrs	r7, r3, #16
 80005ec:	46bc      	mov	ip, r7
 80005ee:	1876      	adds	r6, r6, r1
 80005f0:	4466      	add	r6, ip
 80005f2:	42b1      	cmp	r1, r6
 80005f4:	d903      	bls.n	80005fe <__aeabi_ddiv+0x196>
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	0249      	lsls	r1, r1, #9
 80005fa:	468c      	mov	ip, r1
 80005fc:	4462      	add	r2, ip
 80005fe:	0c31      	lsrs	r1, r6, #16
 8000600:	188a      	adds	r2, r1, r2
 8000602:	0431      	lsls	r1, r6, #16
 8000604:	041e      	lsls	r6, r3, #16
 8000606:	0c36      	lsrs	r6, r6, #16
 8000608:	198e      	adds	r6, r1, r6
 800060a:	4290      	cmp	r0, r2
 800060c:	d302      	bcc.n	8000614 <__aeabi_ddiv+0x1ac>
 800060e:	d112      	bne.n	8000636 <__aeabi_ddiv+0x1ce>
 8000610:	42b5      	cmp	r5, r6
 8000612:	d210      	bcs.n	8000636 <__aeabi_ddiv+0x1ce>
 8000614:	4643      	mov	r3, r8
 8000616:	1e59      	subs	r1, r3, #1
 8000618:	9b00      	ldr	r3, [sp, #0]
 800061a:	469c      	mov	ip, r3
 800061c:	4465      	add	r5, ip
 800061e:	001f      	movs	r7, r3
 8000620:	429d      	cmp	r5, r3
 8000622:	419b      	sbcs	r3, r3
 8000624:	425b      	negs	r3, r3
 8000626:	191b      	adds	r3, r3, r4
 8000628:	18c0      	adds	r0, r0, r3
 800062a:	4284      	cmp	r4, r0
 800062c:	d200      	bcs.n	8000630 <__aeabi_ddiv+0x1c8>
 800062e:	e1a0      	b.n	8000972 <__aeabi_ddiv+0x50a>
 8000630:	d100      	bne.n	8000634 <__aeabi_ddiv+0x1cc>
 8000632:	e19b      	b.n	800096c <__aeabi_ddiv+0x504>
 8000634:	4688      	mov	r8, r1
 8000636:	1bae      	subs	r6, r5, r6
 8000638:	42b5      	cmp	r5, r6
 800063a:	41ad      	sbcs	r5, r5
 800063c:	1a80      	subs	r0, r0, r2
 800063e:	426d      	negs	r5, r5
 8000640:	1b40      	subs	r0, r0, r5
 8000642:	4284      	cmp	r4, r0
 8000644:	d100      	bne.n	8000648 <__aeabi_ddiv+0x1e0>
 8000646:	e1d5      	b.n	80009f4 <__aeabi_ddiv+0x58c>
 8000648:	4649      	mov	r1, r9
 800064a:	f7ff fddf 	bl	800020c <__aeabi_uidivmod>
 800064e:	9a01      	ldr	r2, [sp, #4]
 8000650:	040b      	lsls	r3, r1, #16
 8000652:	4342      	muls	r2, r0
 8000654:	0c31      	lsrs	r1, r6, #16
 8000656:	0005      	movs	r5, r0
 8000658:	4319      	orrs	r1, r3
 800065a:	428a      	cmp	r2, r1
 800065c:	d900      	bls.n	8000660 <__aeabi_ddiv+0x1f8>
 800065e:	e16c      	b.n	800093a <__aeabi_ddiv+0x4d2>
 8000660:	1a88      	subs	r0, r1, r2
 8000662:	4649      	mov	r1, r9
 8000664:	f7ff fdd2 	bl	800020c <__aeabi_uidivmod>
 8000668:	9a01      	ldr	r2, [sp, #4]
 800066a:	0436      	lsls	r6, r6, #16
 800066c:	4342      	muls	r2, r0
 800066e:	0409      	lsls	r1, r1, #16
 8000670:	0c36      	lsrs	r6, r6, #16
 8000672:	0003      	movs	r3, r0
 8000674:	430e      	orrs	r6, r1
 8000676:	42b2      	cmp	r2, r6
 8000678:	d900      	bls.n	800067c <__aeabi_ddiv+0x214>
 800067a:	e153      	b.n	8000924 <__aeabi_ddiv+0x4bc>
 800067c:	9803      	ldr	r0, [sp, #12]
 800067e:	1ab6      	subs	r6, r6, r2
 8000680:	0002      	movs	r2, r0
 8000682:	042d      	lsls	r5, r5, #16
 8000684:	431d      	orrs	r5, r3
 8000686:	9f02      	ldr	r7, [sp, #8]
 8000688:	042b      	lsls	r3, r5, #16
 800068a:	0c1b      	lsrs	r3, r3, #16
 800068c:	435a      	muls	r2, r3
 800068e:	437b      	muls	r3, r7
 8000690:	469c      	mov	ip, r3
 8000692:	0c29      	lsrs	r1, r5, #16
 8000694:	4348      	muls	r0, r1
 8000696:	0c13      	lsrs	r3, r2, #16
 8000698:	4484      	add	ip, r0
 800069a:	4463      	add	r3, ip
 800069c:	4379      	muls	r1, r7
 800069e:	4298      	cmp	r0, r3
 80006a0:	d903      	bls.n	80006aa <__aeabi_ddiv+0x242>
 80006a2:	2080      	movs	r0, #128	; 0x80
 80006a4:	0240      	lsls	r0, r0, #9
 80006a6:	4684      	mov	ip, r0
 80006a8:	4461      	add	r1, ip
 80006aa:	0c18      	lsrs	r0, r3, #16
 80006ac:	0412      	lsls	r2, r2, #16
 80006ae:	041b      	lsls	r3, r3, #16
 80006b0:	0c12      	lsrs	r2, r2, #16
 80006b2:	1841      	adds	r1, r0, r1
 80006b4:	189b      	adds	r3, r3, r2
 80006b6:	428e      	cmp	r6, r1
 80006b8:	d200      	bcs.n	80006bc <__aeabi_ddiv+0x254>
 80006ba:	e0ff      	b.n	80008bc <__aeabi_ddiv+0x454>
 80006bc:	d100      	bne.n	80006c0 <__aeabi_ddiv+0x258>
 80006be:	e0fa      	b.n	80008b6 <__aeabi_ddiv+0x44e>
 80006c0:	2301      	movs	r3, #1
 80006c2:	431d      	orrs	r5, r3
 80006c4:	4a49      	ldr	r2, [pc, #292]	; (80007ec <__aeabi_ddiv+0x384>)
 80006c6:	445a      	add	r2, fp
 80006c8:	2a00      	cmp	r2, #0
 80006ca:	dc00      	bgt.n	80006ce <__aeabi_ddiv+0x266>
 80006cc:	e0aa      	b.n	8000824 <__aeabi_ddiv+0x3bc>
 80006ce:	076b      	lsls	r3, r5, #29
 80006d0:	d000      	beq.n	80006d4 <__aeabi_ddiv+0x26c>
 80006d2:	e13d      	b.n	8000950 <__aeabi_ddiv+0x4e8>
 80006d4:	08ed      	lsrs	r5, r5, #3
 80006d6:	4643      	mov	r3, r8
 80006d8:	01db      	lsls	r3, r3, #7
 80006da:	d506      	bpl.n	80006ea <__aeabi_ddiv+0x282>
 80006dc:	4642      	mov	r2, r8
 80006de:	4b44      	ldr	r3, [pc, #272]	; (80007f0 <__aeabi_ddiv+0x388>)
 80006e0:	401a      	ands	r2, r3
 80006e2:	4690      	mov	r8, r2
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	00d2      	lsls	r2, r2, #3
 80006e8:	445a      	add	r2, fp
 80006ea:	4b42      	ldr	r3, [pc, #264]	; (80007f4 <__aeabi_ddiv+0x38c>)
 80006ec:	429a      	cmp	r2, r3
 80006ee:	dd00      	ble.n	80006f2 <__aeabi_ddiv+0x28a>
 80006f0:	e71f      	b.n	8000532 <__aeabi_ddiv+0xca>
 80006f2:	4643      	mov	r3, r8
 80006f4:	075b      	lsls	r3, r3, #29
 80006f6:	431d      	orrs	r5, r3
 80006f8:	4643      	mov	r3, r8
 80006fa:	0552      	lsls	r2, r2, #21
 80006fc:	025c      	lsls	r4, r3, #9
 80006fe:	0b24      	lsrs	r4, r4, #12
 8000700:	0d53      	lsrs	r3, r2, #21
 8000702:	e708      	b.n	8000516 <__aeabi_ddiv+0xae>
 8000704:	4652      	mov	r2, sl
 8000706:	4322      	orrs	r2, r4
 8000708:	d100      	bne.n	800070c <__aeabi_ddiv+0x2a4>
 800070a:	e07b      	b.n	8000804 <__aeabi_ddiv+0x39c>
 800070c:	2c00      	cmp	r4, #0
 800070e:	d100      	bne.n	8000712 <__aeabi_ddiv+0x2aa>
 8000710:	e0fa      	b.n	8000908 <__aeabi_ddiv+0x4a0>
 8000712:	0020      	movs	r0, r4
 8000714:	f000 fd72 	bl	80011fc <__clzsi2>
 8000718:	0002      	movs	r2, r0
 800071a:	3a0b      	subs	r2, #11
 800071c:	231d      	movs	r3, #29
 800071e:	0001      	movs	r1, r0
 8000720:	1a9b      	subs	r3, r3, r2
 8000722:	4652      	mov	r2, sl
 8000724:	3908      	subs	r1, #8
 8000726:	40da      	lsrs	r2, r3
 8000728:	408c      	lsls	r4, r1
 800072a:	4314      	orrs	r4, r2
 800072c:	4652      	mov	r2, sl
 800072e:	408a      	lsls	r2, r1
 8000730:	4b31      	ldr	r3, [pc, #196]	; (80007f8 <__aeabi_ddiv+0x390>)
 8000732:	4458      	add	r0, fp
 8000734:	469b      	mov	fp, r3
 8000736:	4483      	add	fp, r0
 8000738:	2000      	movs	r0, #0
 800073a:	e6d5      	b.n	80004e8 <__aeabi_ddiv+0x80>
 800073c:	464b      	mov	r3, r9
 800073e:	4323      	orrs	r3, r4
 8000740:	4698      	mov	r8, r3
 8000742:	d044      	beq.n	80007ce <__aeabi_ddiv+0x366>
 8000744:	2c00      	cmp	r4, #0
 8000746:	d100      	bne.n	800074a <__aeabi_ddiv+0x2e2>
 8000748:	e0ce      	b.n	80008e8 <__aeabi_ddiv+0x480>
 800074a:	0020      	movs	r0, r4
 800074c:	f000 fd56 	bl	80011fc <__clzsi2>
 8000750:	0001      	movs	r1, r0
 8000752:	0002      	movs	r2, r0
 8000754:	390b      	subs	r1, #11
 8000756:	231d      	movs	r3, #29
 8000758:	1a5b      	subs	r3, r3, r1
 800075a:	4649      	mov	r1, r9
 800075c:	0010      	movs	r0, r2
 800075e:	40d9      	lsrs	r1, r3
 8000760:	3808      	subs	r0, #8
 8000762:	4084      	lsls	r4, r0
 8000764:	000b      	movs	r3, r1
 8000766:	464d      	mov	r5, r9
 8000768:	4323      	orrs	r3, r4
 800076a:	4698      	mov	r8, r3
 800076c:	4085      	lsls	r5, r0
 800076e:	4823      	ldr	r0, [pc, #140]	; (80007fc <__aeabi_ddiv+0x394>)
 8000770:	1a83      	subs	r3, r0, r2
 8000772:	469b      	mov	fp, r3
 8000774:	2300      	movs	r3, #0
 8000776:	4699      	mov	r9, r3
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	e69a      	b.n	80004b2 <__aeabi_ddiv+0x4a>
 800077c:	464b      	mov	r3, r9
 800077e:	4323      	orrs	r3, r4
 8000780:	4698      	mov	r8, r3
 8000782:	d11d      	bne.n	80007c0 <__aeabi_ddiv+0x358>
 8000784:	2308      	movs	r3, #8
 8000786:	4699      	mov	r9, r3
 8000788:	3b06      	subs	r3, #6
 800078a:	2500      	movs	r5, #0
 800078c:	4683      	mov	fp, r0
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	e68f      	b.n	80004b2 <__aeabi_ddiv+0x4a>
 8000792:	4652      	mov	r2, sl
 8000794:	4322      	orrs	r2, r4
 8000796:	d109      	bne.n	80007ac <__aeabi_ddiv+0x344>
 8000798:	2302      	movs	r3, #2
 800079a:	4649      	mov	r1, r9
 800079c:	4319      	orrs	r1, r3
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <__aeabi_ddiv+0x398>)
 80007a0:	4689      	mov	r9, r1
 80007a2:	469c      	mov	ip, r3
 80007a4:	2400      	movs	r4, #0
 80007a6:	2002      	movs	r0, #2
 80007a8:	44e3      	add	fp, ip
 80007aa:	e69d      	b.n	80004e8 <__aeabi_ddiv+0x80>
 80007ac:	2303      	movs	r3, #3
 80007ae:	464a      	mov	r2, r9
 80007b0:	431a      	orrs	r2, r3
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <__aeabi_ddiv+0x398>)
 80007b4:	4691      	mov	r9, r2
 80007b6:	469c      	mov	ip, r3
 80007b8:	4652      	mov	r2, sl
 80007ba:	2003      	movs	r0, #3
 80007bc:	44e3      	add	fp, ip
 80007be:	e693      	b.n	80004e8 <__aeabi_ddiv+0x80>
 80007c0:	230c      	movs	r3, #12
 80007c2:	4699      	mov	r9, r3
 80007c4:	3b09      	subs	r3, #9
 80007c6:	46a0      	mov	r8, r4
 80007c8:	4683      	mov	fp, r0
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	e671      	b.n	80004b2 <__aeabi_ddiv+0x4a>
 80007ce:	2304      	movs	r3, #4
 80007d0:	4699      	mov	r9, r3
 80007d2:	2300      	movs	r3, #0
 80007d4:	469b      	mov	fp, r3
 80007d6:	3301      	adds	r3, #1
 80007d8:	2500      	movs	r5, #0
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	e669      	b.n	80004b2 <__aeabi_ddiv+0x4a>
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	000007ff 	.word	0x000007ff
 80007e4:	fffffc01 	.word	0xfffffc01
 80007e8:	08007ccc 	.word	0x08007ccc
 80007ec:	000003ff 	.word	0x000003ff
 80007f0:	feffffff 	.word	0xfeffffff
 80007f4:	000007fe 	.word	0x000007fe
 80007f8:	000003f3 	.word	0x000003f3
 80007fc:	fffffc0d 	.word	0xfffffc0d
 8000800:	fffff801 	.word	0xfffff801
 8000804:	4649      	mov	r1, r9
 8000806:	2301      	movs	r3, #1
 8000808:	4319      	orrs	r1, r3
 800080a:	4689      	mov	r9, r1
 800080c:	2400      	movs	r4, #0
 800080e:	2001      	movs	r0, #1
 8000810:	e66a      	b.n	80004e8 <__aeabi_ddiv+0x80>
 8000812:	2300      	movs	r3, #0
 8000814:	2480      	movs	r4, #128	; 0x80
 8000816:	469a      	mov	sl, r3
 8000818:	2500      	movs	r5, #0
 800081a:	4b8a      	ldr	r3, [pc, #552]	; (8000a44 <__aeabi_ddiv+0x5dc>)
 800081c:	0324      	lsls	r4, r4, #12
 800081e:	e67a      	b.n	8000516 <__aeabi_ddiv+0xae>
 8000820:	2501      	movs	r5, #1
 8000822:	426d      	negs	r5, r5
 8000824:	2301      	movs	r3, #1
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	2b38      	cmp	r3, #56	; 0x38
 800082a:	dd00      	ble.n	800082e <__aeabi_ddiv+0x3c6>
 800082c:	e670      	b.n	8000510 <__aeabi_ddiv+0xa8>
 800082e:	2b1f      	cmp	r3, #31
 8000830:	dc00      	bgt.n	8000834 <__aeabi_ddiv+0x3cc>
 8000832:	e0bf      	b.n	80009b4 <__aeabi_ddiv+0x54c>
 8000834:	211f      	movs	r1, #31
 8000836:	4249      	negs	r1, r1
 8000838:	1a8a      	subs	r2, r1, r2
 800083a:	4641      	mov	r1, r8
 800083c:	40d1      	lsrs	r1, r2
 800083e:	000a      	movs	r2, r1
 8000840:	2b20      	cmp	r3, #32
 8000842:	d004      	beq.n	800084e <__aeabi_ddiv+0x3e6>
 8000844:	4641      	mov	r1, r8
 8000846:	4b80      	ldr	r3, [pc, #512]	; (8000a48 <__aeabi_ddiv+0x5e0>)
 8000848:	445b      	add	r3, fp
 800084a:	4099      	lsls	r1, r3
 800084c:	430d      	orrs	r5, r1
 800084e:	1e6b      	subs	r3, r5, #1
 8000850:	419d      	sbcs	r5, r3
 8000852:	2307      	movs	r3, #7
 8000854:	432a      	orrs	r2, r5
 8000856:	001d      	movs	r5, r3
 8000858:	2400      	movs	r4, #0
 800085a:	4015      	ands	r5, r2
 800085c:	4213      	tst	r3, r2
 800085e:	d100      	bne.n	8000862 <__aeabi_ddiv+0x3fa>
 8000860:	e0d4      	b.n	8000a0c <__aeabi_ddiv+0x5a4>
 8000862:	210f      	movs	r1, #15
 8000864:	2300      	movs	r3, #0
 8000866:	4011      	ands	r1, r2
 8000868:	2904      	cmp	r1, #4
 800086a:	d100      	bne.n	800086e <__aeabi_ddiv+0x406>
 800086c:	e0cb      	b.n	8000a06 <__aeabi_ddiv+0x59e>
 800086e:	1d11      	adds	r1, r2, #4
 8000870:	4291      	cmp	r1, r2
 8000872:	4192      	sbcs	r2, r2
 8000874:	4252      	negs	r2, r2
 8000876:	189b      	adds	r3, r3, r2
 8000878:	000a      	movs	r2, r1
 800087a:	0219      	lsls	r1, r3, #8
 800087c:	d400      	bmi.n	8000880 <__aeabi_ddiv+0x418>
 800087e:	e0c2      	b.n	8000a06 <__aeabi_ddiv+0x59e>
 8000880:	2301      	movs	r3, #1
 8000882:	2400      	movs	r4, #0
 8000884:	2500      	movs	r5, #0
 8000886:	e646      	b.n	8000516 <__aeabi_ddiv+0xae>
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	4641      	mov	r1, r8
 800088c:	031b      	lsls	r3, r3, #12
 800088e:	4219      	tst	r1, r3
 8000890:	d008      	beq.n	80008a4 <__aeabi_ddiv+0x43c>
 8000892:	421c      	tst	r4, r3
 8000894:	d106      	bne.n	80008a4 <__aeabi_ddiv+0x43c>
 8000896:	431c      	orrs	r4, r3
 8000898:	0324      	lsls	r4, r4, #12
 800089a:	46ba      	mov	sl, r7
 800089c:	0015      	movs	r5, r2
 800089e:	4b69      	ldr	r3, [pc, #420]	; (8000a44 <__aeabi_ddiv+0x5dc>)
 80008a0:	0b24      	lsrs	r4, r4, #12
 80008a2:	e638      	b.n	8000516 <__aeabi_ddiv+0xae>
 80008a4:	2480      	movs	r4, #128	; 0x80
 80008a6:	4643      	mov	r3, r8
 80008a8:	0324      	lsls	r4, r4, #12
 80008aa:	431c      	orrs	r4, r3
 80008ac:	0324      	lsls	r4, r4, #12
 80008ae:	46b2      	mov	sl, r6
 80008b0:	4b64      	ldr	r3, [pc, #400]	; (8000a44 <__aeabi_ddiv+0x5dc>)
 80008b2:	0b24      	lsrs	r4, r4, #12
 80008b4:	e62f      	b.n	8000516 <__aeabi_ddiv+0xae>
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d100      	bne.n	80008bc <__aeabi_ddiv+0x454>
 80008ba:	e703      	b.n	80006c4 <__aeabi_ddiv+0x25c>
 80008bc:	19a6      	adds	r6, r4, r6
 80008be:	1e68      	subs	r0, r5, #1
 80008c0:	42a6      	cmp	r6, r4
 80008c2:	d200      	bcs.n	80008c6 <__aeabi_ddiv+0x45e>
 80008c4:	e08d      	b.n	80009e2 <__aeabi_ddiv+0x57a>
 80008c6:	428e      	cmp	r6, r1
 80008c8:	d200      	bcs.n	80008cc <__aeabi_ddiv+0x464>
 80008ca:	e0a3      	b.n	8000a14 <__aeabi_ddiv+0x5ac>
 80008cc:	d100      	bne.n	80008d0 <__aeabi_ddiv+0x468>
 80008ce:	e0b3      	b.n	8000a38 <__aeabi_ddiv+0x5d0>
 80008d0:	0005      	movs	r5, r0
 80008d2:	e6f5      	b.n	80006c0 <__aeabi_ddiv+0x258>
 80008d4:	42aa      	cmp	r2, r5
 80008d6:	d900      	bls.n	80008da <__aeabi_ddiv+0x472>
 80008d8:	e639      	b.n	800054e <__aeabi_ddiv+0xe6>
 80008da:	4643      	mov	r3, r8
 80008dc:	07de      	lsls	r6, r3, #31
 80008de:	0858      	lsrs	r0, r3, #1
 80008e0:	086b      	lsrs	r3, r5, #1
 80008e2:	431e      	orrs	r6, r3
 80008e4:	07ed      	lsls	r5, r5, #31
 80008e6:	e639      	b.n	800055c <__aeabi_ddiv+0xf4>
 80008e8:	4648      	mov	r0, r9
 80008ea:	f000 fc87 	bl	80011fc <__clzsi2>
 80008ee:	0001      	movs	r1, r0
 80008f0:	0002      	movs	r2, r0
 80008f2:	3115      	adds	r1, #21
 80008f4:	3220      	adds	r2, #32
 80008f6:	291c      	cmp	r1, #28
 80008f8:	dc00      	bgt.n	80008fc <__aeabi_ddiv+0x494>
 80008fa:	e72c      	b.n	8000756 <__aeabi_ddiv+0x2ee>
 80008fc:	464b      	mov	r3, r9
 80008fe:	3808      	subs	r0, #8
 8000900:	4083      	lsls	r3, r0
 8000902:	2500      	movs	r5, #0
 8000904:	4698      	mov	r8, r3
 8000906:	e732      	b.n	800076e <__aeabi_ddiv+0x306>
 8000908:	f000 fc78 	bl	80011fc <__clzsi2>
 800090c:	0003      	movs	r3, r0
 800090e:	001a      	movs	r2, r3
 8000910:	3215      	adds	r2, #21
 8000912:	3020      	adds	r0, #32
 8000914:	2a1c      	cmp	r2, #28
 8000916:	dc00      	bgt.n	800091a <__aeabi_ddiv+0x4b2>
 8000918:	e700      	b.n	800071c <__aeabi_ddiv+0x2b4>
 800091a:	4654      	mov	r4, sl
 800091c:	3b08      	subs	r3, #8
 800091e:	2200      	movs	r2, #0
 8000920:	409c      	lsls	r4, r3
 8000922:	e705      	b.n	8000730 <__aeabi_ddiv+0x2c8>
 8000924:	1936      	adds	r6, r6, r4
 8000926:	3b01      	subs	r3, #1
 8000928:	42b4      	cmp	r4, r6
 800092a:	d900      	bls.n	800092e <__aeabi_ddiv+0x4c6>
 800092c:	e6a6      	b.n	800067c <__aeabi_ddiv+0x214>
 800092e:	42b2      	cmp	r2, r6
 8000930:	d800      	bhi.n	8000934 <__aeabi_ddiv+0x4cc>
 8000932:	e6a3      	b.n	800067c <__aeabi_ddiv+0x214>
 8000934:	1e83      	subs	r3, r0, #2
 8000936:	1936      	adds	r6, r6, r4
 8000938:	e6a0      	b.n	800067c <__aeabi_ddiv+0x214>
 800093a:	1909      	adds	r1, r1, r4
 800093c:	3d01      	subs	r5, #1
 800093e:	428c      	cmp	r4, r1
 8000940:	d900      	bls.n	8000944 <__aeabi_ddiv+0x4dc>
 8000942:	e68d      	b.n	8000660 <__aeabi_ddiv+0x1f8>
 8000944:	428a      	cmp	r2, r1
 8000946:	d800      	bhi.n	800094a <__aeabi_ddiv+0x4e2>
 8000948:	e68a      	b.n	8000660 <__aeabi_ddiv+0x1f8>
 800094a:	1e85      	subs	r5, r0, #2
 800094c:	1909      	adds	r1, r1, r4
 800094e:	e687      	b.n	8000660 <__aeabi_ddiv+0x1f8>
 8000950:	230f      	movs	r3, #15
 8000952:	402b      	ands	r3, r5
 8000954:	2b04      	cmp	r3, #4
 8000956:	d100      	bne.n	800095a <__aeabi_ddiv+0x4f2>
 8000958:	e6bc      	b.n	80006d4 <__aeabi_ddiv+0x26c>
 800095a:	2305      	movs	r3, #5
 800095c:	425b      	negs	r3, r3
 800095e:	42ab      	cmp	r3, r5
 8000960:	419b      	sbcs	r3, r3
 8000962:	3504      	adds	r5, #4
 8000964:	425b      	negs	r3, r3
 8000966:	08ed      	lsrs	r5, r5, #3
 8000968:	4498      	add	r8, r3
 800096a:	e6b4      	b.n	80006d6 <__aeabi_ddiv+0x26e>
 800096c:	42af      	cmp	r7, r5
 800096e:	d900      	bls.n	8000972 <__aeabi_ddiv+0x50a>
 8000970:	e660      	b.n	8000634 <__aeabi_ddiv+0x1cc>
 8000972:	4282      	cmp	r2, r0
 8000974:	d804      	bhi.n	8000980 <__aeabi_ddiv+0x518>
 8000976:	d000      	beq.n	800097a <__aeabi_ddiv+0x512>
 8000978:	e65c      	b.n	8000634 <__aeabi_ddiv+0x1cc>
 800097a:	42ae      	cmp	r6, r5
 800097c:	d800      	bhi.n	8000980 <__aeabi_ddiv+0x518>
 800097e:	e659      	b.n	8000634 <__aeabi_ddiv+0x1cc>
 8000980:	2302      	movs	r3, #2
 8000982:	425b      	negs	r3, r3
 8000984:	469c      	mov	ip, r3
 8000986:	9b00      	ldr	r3, [sp, #0]
 8000988:	44e0      	add	r8, ip
 800098a:	469c      	mov	ip, r3
 800098c:	4465      	add	r5, ip
 800098e:	429d      	cmp	r5, r3
 8000990:	419b      	sbcs	r3, r3
 8000992:	425b      	negs	r3, r3
 8000994:	191b      	adds	r3, r3, r4
 8000996:	18c0      	adds	r0, r0, r3
 8000998:	e64d      	b.n	8000636 <__aeabi_ddiv+0x1ce>
 800099a:	428a      	cmp	r2, r1
 800099c:	d800      	bhi.n	80009a0 <__aeabi_ddiv+0x538>
 800099e:	e60e      	b.n	80005be <__aeabi_ddiv+0x156>
 80009a0:	1e83      	subs	r3, r0, #2
 80009a2:	1909      	adds	r1, r1, r4
 80009a4:	e60b      	b.n	80005be <__aeabi_ddiv+0x156>
 80009a6:	428a      	cmp	r2, r1
 80009a8:	d800      	bhi.n	80009ac <__aeabi_ddiv+0x544>
 80009aa:	e5f4      	b.n	8000596 <__aeabi_ddiv+0x12e>
 80009ac:	1e83      	subs	r3, r0, #2
 80009ae:	4698      	mov	r8, r3
 80009b0:	1909      	adds	r1, r1, r4
 80009b2:	e5f0      	b.n	8000596 <__aeabi_ddiv+0x12e>
 80009b4:	4925      	ldr	r1, [pc, #148]	; (8000a4c <__aeabi_ddiv+0x5e4>)
 80009b6:	0028      	movs	r0, r5
 80009b8:	4459      	add	r1, fp
 80009ba:	408d      	lsls	r5, r1
 80009bc:	4642      	mov	r2, r8
 80009be:	408a      	lsls	r2, r1
 80009c0:	1e69      	subs	r1, r5, #1
 80009c2:	418d      	sbcs	r5, r1
 80009c4:	4641      	mov	r1, r8
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	40d9      	lsrs	r1, r3
 80009ca:	4302      	orrs	r2, r0
 80009cc:	432a      	orrs	r2, r5
 80009ce:	000b      	movs	r3, r1
 80009d0:	0751      	lsls	r1, r2, #29
 80009d2:	d100      	bne.n	80009d6 <__aeabi_ddiv+0x56e>
 80009d4:	e751      	b.n	800087a <__aeabi_ddiv+0x412>
 80009d6:	210f      	movs	r1, #15
 80009d8:	4011      	ands	r1, r2
 80009da:	2904      	cmp	r1, #4
 80009dc:	d000      	beq.n	80009e0 <__aeabi_ddiv+0x578>
 80009de:	e746      	b.n	800086e <__aeabi_ddiv+0x406>
 80009e0:	e74b      	b.n	800087a <__aeabi_ddiv+0x412>
 80009e2:	0005      	movs	r5, r0
 80009e4:	428e      	cmp	r6, r1
 80009e6:	d000      	beq.n	80009ea <__aeabi_ddiv+0x582>
 80009e8:	e66a      	b.n	80006c0 <__aeabi_ddiv+0x258>
 80009ea:	9a00      	ldr	r2, [sp, #0]
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d000      	beq.n	80009f2 <__aeabi_ddiv+0x58a>
 80009f0:	e666      	b.n	80006c0 <__aeabi_ddiv+0x258>
 80009f2:	e667      	b.n	80006c4 <__aeabi_ddiv+0x25c>
 80009f4:	4a16      	ldr	r2, [pc, #88]	; (8000a50 <__aeabi_ddiv+0x5e8>)
 80009f6:	445a      	add	r2, fp
 80009f8:	2a00      	cmp	r2, #0
 80009fa:	dc00      	bgt.n	80009fe <__aeabi_ddiv+0x596>
 80009fc:	e710      	b.n	8000820 <__aeabi_ddiv+0x3b8>
 80009fe:	2301      	movs	r3, #1
 8000a00:	2500      	movs	r5, #0
 8000a02:	4498      	add	r8, r3
 8000a04:	e667      	b.n	80006d6 <__aeabi_ddiv+0x26e>
 8000a06:	075d      	lsls	r5, r3, #29
 8000a08:	025b      	lsls	r3, r3, #9
 8000a0a:	0b1c      	lsrs	r4, r3, #12
 8000a0c:	08d2      	lsrs	r2, r2, #3
 8000a0e:	2300      	movs	r3, #0
 8000a10:	4315      	orrs	r5, r2
 8000a12:	e580      	b.n	8000516 <__aeabi_ddiv+0xae>
 8000a14:	9800      	ldr	r0, [sp, #0]
 8000a16:	3d02      	subs	r5, #2
 8000a18:	0042      	lsls	r2, r0, #1
 8000a1a:	4282      	cmp	r2, r0
 8000a1c:	41bf      	sbcs	r7, r7
 8000a1e:	427f      	negs	r7, r7
 8000a20:	193c      	adds	r4, r7, r4
 8000a22:	1936      	adds	r6, r6, r4
 8000a24:	9200      	str	r2, [sp, #0]
 8000a26:	e7dd      	b.n	80009e4 <__aeabi_ddiv+0x57c>
 8000a28:	2480      	movs	r4, #128	; 0x80
 8000a2a:	4643      	mov	r3, r8
 8000a2c:	0324      	lsls	r4, r4, #12
 8000a2e:	431c      	orrs	r4, r3
 8000a30:	0324      	lsls	r4, r4, #12
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <__aeabi_ddiv+0x5dc>)
 8000a34:	0b24      	lsrs	r4, r4, #12
 8000a36:	e56e      	b.n	8000516 <__aeabi_ddiv+0xae>
 8000a38:	9a00      	ldr	r2, [sp, #0]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d3ea      	bcc.n	8000a14 <__aeabi_ddiv+0x5ac>
 8000a3e:	0005      	movs	r5, r0
 8000a40:	e7d3      	b.n	80009ea <__aeabi_ddiv+0x582>
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	000007ff 	.word	0x000007ff
 8000a48:	0000043e 	.word	0x0000043e
 8000a4c:	0000041e 	.word	0x0000041e
 8000a50:	000003ff 	.word	0x000003ff

08000a54 <__eqdf2>:
 8000a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a56:	464e      	mov	r6, r9
 8000a58:	4645      	mov	r5, r8
 8000a5a:	46de      	mov	lr, fp
 8000a5c:	4657      	mov	r7, sl
 8000a5e:	4690      	mov	r8, r2
 8000a60:	b5e0      	push	{r5, r6, r7, lr}
 8000a62:	0017      	movs	r7, r2
 8000a64:	031a      	lsls	r2, r3, #12
 8000a66:	0b12      	lsrs	r2, r2, #12
 8000a68:	0005      	movs	r5, r0
 8000a6a:	4684      	mov	ip, r0
 8000a6c:	4819      	ldr	r0, [pc, #100]	; (8000ad4 <__eqdf2+0x80>)
 8000a6e:	030e      	lsls	r6, r1, #12
 8000a70:	004c      	lsls	r4, r1, #1
 8000a72:	4691      	mov	r9, r2
 8000a74:	005a      	lsls	r2, r3, #1
 8000a76:	0fdb      	lsrs	r3, r3, #31
 8000a78:	469b      	mov	fp, r3
 8000a7a:	0b36      	lsrs	r6, r6, #12
 8000a7c:	0d64      	lsrs	r4, r4, #21
 8000a7e:	0fc9      	lsrs	r1, r1, #31
 8000a80:	0d52      	lsrs	r2, r2, #21
 8000a82:	4284      	cmp	r4, r0
 8000a84:	d019      	beq.n	8000aba <__eqdf2+0x66>
 8000a86:	4282      	cmp	r2, r0
 8000a88:	d010      	beq.n	8000aac <__eqdf2+0x58>
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	4294      	cmp	r4, r2
 8000a8e:	d10e      	bne.n	8000aae <__eqdf2+0x5a>
 8000a90:	454e      	cmp	r6, r9
 8000a92:	d10c      	bne.n	8000aae <__eqdf2+0x5a>
 8000a94:	2001      	movs	r0, #1
 8000a96:	45c4      	cmp	ip, r8
 8000a98:	d109      	bne.n	8000aae <__eqdf2+0x5a>
 8000a9a:	4559      	cmp	r1, fp
 8000a9c:	d017      	beq.n	8000ace <__eqdf2+0x7a>
 8000a9e:	2c00      	cmp	r4, #0
 8000aa0:	d105      	bne.n	8000aae <__eqdf2+0x5a>
 8000aa2:	0030      	movs	r0, r6
 8000aa4:	4328      	orrs	r0, r5
 8000aa6:	1e43      	subs	r3, r0, #1
 8000aa8:	4198      	sbcs	r0, r3
 8000aaa:	e000      	b.n	8000aae <__eqdf2+0x5a>
 8000aac:	2001      	movs	r0, #1
 8000aae:	bcf0      	pop	{r4, r5, r6, r7}
 8000ab0:	46bb      	mov	fp, r7
 8000ab2:	46b2      	mov	sl, r6
 8000ab4:	46a9      	mov	r9, r5
 8000ab6:	46a0      	mov	r8, r4
 8000ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aba:	0033      	movs	r3, r6
 8000abc:	2001      	movs	r0, #1
 8000abe:	432b      	orrs	r3, r5
 8000ac0:	d1f5      	bne.n	8000aae <__eqdf2+0x5a>
 8000ac2:	42a2      	cmp	r2, r4
 8000ac4:	d1f3      	bne.n	8000aae <__eqdf2+0x5a>
 8000ac6:	464b      	mov	r3, r9
 8000ac8:	433b      	orrs	r3, r7
 8000aca:	d1f0      	bne.n	8000aae <__eqdf2+0x5a>
 8000acc:	e7e2      	b.n	8000a94 <__eqdf2+0x40>
 8000ace:	2000      	movs	r0, #0
 8000ad0:	e7ed      	b.n	8000aae <__eqdf2+0x5a>
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	000007ff 	.word	0x000007ff

08000ad8 <__gedf2>:
 8000ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ada:	4647      	mov	r7, r8
 8000adc:	46ce      	mov	lr, r9
 8000ade:	0004      	movs	r4, r0
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	0016      	movs	r6, r2
 8000ae4:	031b      	lsls	r3, r3, #12
 8000ae6:	0b1b      	lsrs	r3, r3, #12
 8000ae8:	4d2d      	ldr	r5, [pc, #180]	; (8000ba0 <__gedf2+0xc8>)
 8000aea:	004a      	lsls	r2, r1, #1
 8000aec:	4699      	mov	r9, r3
 8000aee:	b580      	push	{r7, lr}
 8000af0:	0043      	lsls	r3, r0, #1
 8000af2:	030f      	lsls	r7, r1, #12
 8000af4:	46a4      	mov	ip, r4
 8000af6:	46b0      	mov	r8, r6
 8000af8:	0b3f      	lsrs	r7, r7, #12
 8000afa:	0d52      	lsrs	r2, r2, #21
 8000afc:	0fc9      	lsrs	r1, r1, #31
 8000afe:	0d5b      	lsrs	r3, r3, #21
 8000b00:	0fc0      	lsrs	r0, r0, #31
 8000b02:	42aa      	cmp	r2, r5
 8000b04:	d021      	beq.n	8000b4a <__gedf2+0x72>
 8000b06:	42ab      	cmp	r3, r5
 8000b08:	d013      	beq.n	8000b32 <__gedf2+0x5a>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d122      	bne.n	8000b54 <__gedf2+0x7c>
 8000b0e:	433c      	orrs	r4, r7
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d102      	bne.n	8000b1a <__gedf2+0x42>
 8000b14:	464d      	mov	r5, r9
 8000b16:	432e      	orrs	r6, r5
 8000b18:	d022      	beq.n	8000b60 <__gedf2+0x88>
 8000b1a:	2c00      	cmp	r4, #0
 8000b1c:	d010      	beq.n	8000b40 <__gedf2+0x68>
 8000b1e:	4281      	cmp	r1, r0
 8000b20:	d022      	beq.n	8000b68 <__gedf2+0x90>
 8000b22:	2002      	movs	r0, #2
 8000b24:	3901      	subs	r1, #1
 8000b26:	4008      	ands	r0, r1
 8000b28:	3801      	subs	r0, #1
 8000b2a:	bcc0      	pop	{r6, r7}
 8000b2c:	46b9      	mov	r9, r7
 8000b2e:	46b0      	mov	r8, r6
 8000b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b32:	464d      	mov	r5, r9
 8000b34:	432e      	orrs	r6, r5
 8000b36:	d129      	bne.n	8000b8c <__gedf2+0xb4>
 8000b38:	2a00      	cmp	r2, #0
 8000b3a:	d1f0      	bne.n	8000b1e <__gedf2+0x46>
 8000b3c:	433c      	orrs	r4, r7
 8000b3e:	d1ee      	bne.n	8000b1e <__gedf2+0x46>
 8000b40:	2800      	cmp	r0, #0
 8000b42:	d1f2      	bne.n	8000b2a <__gedf2+0x52>
 8000b44:	2001      	movs	r0, #1
 8000b46:	4240      	negs	r0, r0
 8000b48:	e7ef      	b.n	8000b2a <__gedf2+0x52>
 8000b4a:	003d      	movs	r5, r7
 8000b4c:	4325      	orrs	r5, r4
 8000b4e:	d11d      	bne.n	8000b8c <__gedf2+0xb4>
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d0ee      	beq.n	8000b32 <__gedf2+0x5a>
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1e2      	bne.n	8000b1e <__gedf2+0x46>
 8000b58:	464c      	mov	r4, r9
 8000b5a:	4326      	orrs	r6, r4
 8000b5c:	d1df      	bne.n	8000b1e <__gedf2+0x46>
 8000b5e:	e7e0      	b.n	8000b22 <__gedf2+0x4a>
 8000b60:	2000      	movs	r0, #0
 8000b62:	2c00      	cmp	r4, #0
 8000b64:	d0e1      	beq.n	8000b2a <__gedf2+0x52>
 8000b66:	e7dc      	b.n	8000b22 <__gedf2+0x4a>
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	dc0a      	bgt.n	8000b82 <__gedf2+0xaa>
 8000b6c:	dbe8      	blt.n	8000b40 <__gedf2+0x68>
 8000b6e:	454f      	cmp	r7, r9
 8000b70:	d8d7      	bhi.n	8000b22 <__gedf2+0x4a>
 8000b72:	d00e      	beq.n	8000b92 <__gedf2+0xba>
 8000b74:	2000      	movs	r0, #0
 8000b76:	454f      	cmp	r7, r9
 8000b78:	d2d7      	bcs.n	8000b2a <__gedf2+0x52>
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d0e2      	beq.n	8000b44 <__gedf2+0x6c>
 8000b7e:	0008      	movs	r0, r1
 8000b80:	e7d3      	b.n	8000b2a <__gedf2+0x52>
 8000b82:	4243      	negs	r3, r0
 8000b84:	4158      	adcs	r0, r3
 8000b86:	0040      	lsls	r0, r0, #1
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e7ce      	b.n	8000b2a <__gedf2+0x52>
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	4240      	negs	r0, r0
 8000b90:	e7cb      	b.n	8000b2a <__gedf2+0x52>
 8000b92:	45c4      	cmp	ip, r8
 8000b94:	d8c5      	bhi.n	8000b22 <__gedf2+0x4a>
 8000b96:	2000      	movs	r0, #0
 8000b98:	45c4      	cmp	ip, r8
 8000b9a:	d2c6      	bcs.n	8000b2a <__gedf2+0x52>
 8000b9c:	e7ed      	b.n	8000b7a <__gedf2+0xa2>
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	000007ff 	.word	0x000007ff

08000ba4 <__ledf2>:
 8000ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ba6:	4647      	mov	r7, r8
 8000ba8:	46ce      	mov	lr, r9
 8000baa:	0004      	movs	r4, r0
 8000bac:	0018      	movs	r0, r3
 8000bae:	0016      	movs	r6, r2
 8000bb0:	031b      	lsls	r3, r3, #12
 8000bb2:	0b1b      	lsrs	r3, r3, #12
 8000bb4:	4d2c      	ldr	r5, [pc, #176]	; (8000c68 <__ledf2+0xc4>)
 8000bb6:	004a      	lsls	r2, r1, #1
 8000bb8:	4699      	mov	r9, r3
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	0043      	lsls	r3, r0, #1
 8000bbe:	030f      	lsls	r7, r1, #12
 8000bc0:	46a4      	mov	ip, r4
 8000bc2:	46b0      	mov	r8, r6
 8000bc4:	0b3f      	lsrs	r7, r7, #12
 8000bc6:	0d52      	lsrs	r2, r2, #21
 8000bc8:	0fc9      	lsrs	r1, r1, #31
 8000bca:	0d5b      	lsrs	r3, r3, #21
 8000bcc:	0fc0      	lsrs	r0, r0, #31
 8000bce:	42aa      	cmp	r2, r5
 8000bd0:	d00d      	beq.n	8000bee <__ledf2+0x4a>
 8000bd2:	42ab      	cmp	r3, r5
 8000bd4:	d010      	beq.n	8000bf8 <__ledf2+0x54>
 8000bd6:	2a00      	cmp	r2, #0
 8000bd8:	d127      	bne.n	8000c2a <__ledf2+0x86>
 8000bda:	433c      	orrs	r4, r7
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d111      	bne.n	8000c04 <__ledf2+0x60>
 8000be0:	464d      	mov	r5, r9
 8000be2:	432e      	orrs	r6, r5
 8000be4:	d10e      	bne.n	8000c04 <__ledf2+0x60>
 8000be6:	2000      	movs	r0, #0
 8000be8:	2c00      	cmp	r4, #0
 8000bea:	d015      	beq.n	8000c18 <__ledf2+0x74>
 8000bec:	e00e      	b.n	8000c0c <__ledf2+0x68>
 8000bee:	003d      	movs	r5, r7
 8000bf0:	4325      	orrs	r5, r4
 8000bf2:	d110      	bne.n	8000c16 <__ledf2+0x72>
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d118      	bne.n	8000c2a <__ledf2+0x86>
 8000bf8:	464d      	mov	r5, r9
 8000bfa:	432e      	orrs	r6, r5
 8000bfc:	d10b      	bne.n	8000c16 <__ledf2+0x72>
 8000bfe:	2a00      	cmp	r2, #0
 8000c00:	d102      	bne.n	8000c08 <__ledf2+0x64>
 8000c02:	433c      	orrs	r4, r7
 8000c04:	2c00      	cmp	r4, #0
 8000c06:	d00b      	beq.n	8000c20 <__ledf2+0x7c>
 8000c08:	4281      	cmp	r1, r0
 8000c0a:	d014      	beq.n	8000c36 <__ledf2+0x92>
 8000c0c:	2002      	movs	r0, #2
 8000c0e:	3901      	subs	r1, #1
 8000c10:	4008      	ands	r0, r1
 8000c12:	3801      	subs	r0, #1
 8000c14:	e000      	b.n	8000c18 <__ledf2+0x74>
 8000c16:	2002      	movs	r0, #2
 8000c18:	bcc0      	pop	{r6, r7}
 8000c1a:	46b9      	mov	r9, r7
 8000c1c:	46b0      	mov	r8, r6
 8000c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d1f9      	bne.n	8000c18 <__ledf2+0x74>
 8000c24:	2001      	movs	r0, #1
 8000c26:	4240      	negs	r0, r0
 8000c28:	e7f6      	b.n	8000c18 <__ledf2+0x74>
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1ec      	bne.n	8000c08 <__ledf2+0x64>
 8000c2e:	464c      	mov	r4, r9
 8000c30:	4326      	orrs	r6, r4
 8000c32:	d1e9      	bne.n	8000c08 <__ledf2+0x64>
 8000c34:	e7ea      	b.n	8000c0c <__ledf2+0x68>
 8000c36:	429a      	cmp	r2, r3
 8000c38:	dd04      	ble.n	8000c44 <__ledf2+0xa0>
 8000c3a:	4243      	negs	r3, r0
 8000c3c:	4158      	adcs	r0, r3
 8000c3e:	0040      	lsls	r0, r0, #1
 8000c40:	3801      	subs	r0, #1
 8000c42:	e7e9      	b.n	8000c18 <__ledf2+0x74>
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dbeb      	blt.n	8000c20 <__ledf2+0x7c>
 8000c48:	454f      	cmp	r7, r9
 8000c4a:	d8df      	bhi.n	8000c0c <__ledf2+0x68>
 8000c4c:	d006      	beq.n	8000c5c <__ledf2+0xb8>
 8000c4e:	2000      	movs	r0, #0
 8000c50:	454f      	cmp	r7, r9
 8000c52:	d2e1      	bcs.n	8000c18 <__ledf2+0x74>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	d0e5      	beq.n	8000c24 <__ledf2+0x80>
 8000c58:	0008      	movs	r0, r1
 8000c5a:	e7dd      	b.n	8000c18 <__ledf2+0x74>
 8000c5c:	45c4      	cmp	ip, r8
 8000c5e:	d8d5      	bhi.n	8000c0c <__ledf2+0x68>
 8000c60:	2000      	movs	r0, #0
 8000c62:	45c4      	cmp	ip, r8
 8000c64:	d2d8      	bcs.n	8000c18 <__ledf2+0x74>
 8000c66:	e7f5      	b.n	8000c54 <__ledf2+0xb0>
 8000c68:	000007ff 	.word	0x000007ff

08000c6c <__aeabi_dmul>:
 8000c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c6e:	4657      	mov	r7, sl
 8000c70:	464e      	mov	r6, r9
 8000c72:	4645      	mov	r5, r8
 8000c74:	46de      	mov	lr, fp
 8000c76:	b5e0      	push	{r5, r6, r7, lr}
 8000c78:	4698      	mov	r8, r3
 8000c7a:	030c      	lsls	r4, r1, #12
 8000c7c:	004b      	lsls	r3, r1, #1
 8000c7e:	0006      	movs	r6, r0
 8000c80:	4692      	mov	sl, r2
 8000c82:	b087      	sub	sp, #28
 8000c84:	0b24      	lsrs	r4, r4, #12
 8000c86:	0d5b      	lsrs	r3, r3, #21
 8000c88:	0fcf      	lsrs	r7, r1, #31
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_dmul+0x24>
 8000c8e:	e15c      	b.n	8000f4a <__aeabi_dmul+0x2de>
 8000c90:	4ad9      	ldr	r2, [pc, #868]	; (8000ff8 <__aeabi_dmul+0x38c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dmul+0x2c>
 8000c96:	e175      	b.n	8000f84 <__aeabi_dmul+0x318>
 8000c98:	0f42      	lsrs	r2, r0, #29
 8000c9a:	00e4      	lsls	r4, r4, #3
 8000c9c:	4314      	orrs	r4, r2
 8000c9e:	2280      	movs	r2, #128	; 0x80
 8000ca0:	0412      	lsls	r2, r2, #16
 8000ca2:	4314      	orrs	r4, r2
 8000ca4:	4ad5      	ldr	r2, [pc, #852]	; (8000ffc <__aeabi_dmul+0x390>)
 8000ca6:	00c5      	lsls	r5, r0, #3
 8000ca8:	4694      	mov	ip, r2
 8000caa:	4463      	add	r3, ip
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2300      	movs	r3, #0
 8000cb0:	4699      	mov	r9, r3
 8000cb2:	469b      	mov	fp, r3
 8000cb4:	4643      	mov	r3, r8
 8000cb6:	4642      	mov	r2, r8
 8000cb8:	031e      	lsls	r6, r3, #12
 8000cba:	0fd2      	lsrs	r2, r2, #31
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4650      	mov	r0, sl
 8000cc0:	4690      	mov	r8, r2
 8000cc2:	0b36      	lsrs	r6, r6, #12
 8000cc4:	0d5b      	lsrs	r3, r3, #21
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dmul+0x5e>
 8000cc8:	e120      	b.n	8000f0c <__aeabi_dmul+0x2a0>
 8000cca:	4acb      	ldr	r2, [pc, #812]	; (8000ff8 <__aeabi_dmul+0x38c>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d100      	bne.n	8000cd2 <__aeabi_dmul+0x66>
 8000cd0:	e162      	b.n	8000f98 <__aeabi_dmul+0x32c>
 8000cd2:	49ca      	ldr	r1, [pc, #808]	; (8000ffc <__aeabi_dmul+0x390>)
 8000cd4:	0f42      	lsrs	r2, r0, #29
 8000cd6:	468c      	mov	ip, r1
 8000cd8:	9900      	ldr	r1, [sp, #0]
 8000cda:	4463      	add	r3, ip
 8000cdc:	00f6      	lsls	r6, r6, #3
 8000cde:	468c      	mov	ip, r1
 8000ce0:	4316      	orrs	r6, r2
 8000ce2:	2280      	movs	r2, #128	; 0x80
 8000ce4:	449c      	add	ip, r3
 8000ce6:	0412      	lsls	r2, r2, #16
 8000ce8:	4663      	mov	r3, ip
 8000cea:	4316      	orrs	r6, r2
 8000cec:	00c2      	lsls	r2, r0, #3
 8000cee:	2000      	movs	r0, #0
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	9900      	ldr	r1, [sp, #0]
 8000cf4:	4643      	mov	r3, r8
 8000cf6:	3101      	adds	r1, #1
 8000cf8:	468c      	mov	ip, r1
 8000cfa:	4649      	mov	r1, r9
 8000cfc:	407b      	eors	r3, r7
 8000cfe:	9301      	str	r3, [sp, #4]
 8000d00:	290f      	cmp	r1, #15
 8000d02:	d826      	bhi.n	8000d52 <__aeabi_dmul+0xe6>
 8000d04:	4bbe      	ldr	r3, [pc, #760]	; (8001000 <__aeabi_dmul+0x394>)
 8000d06:	0089      	lsls	r1, r1, #2
 8000d08:	5859      	ldr	r1, [r3, r1]
 8000d0a:	468f      	mov	pc, r1
 8000d0c:	4643      	mov	r3, r8
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	0034      	movs	r4, r6
 8000d12:	0015      	movs	r5, r2
 8000d14:	4683      	mov	fp, r0
 8000d16:	465b      	mov	r3, fp
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d016      	beq.n	8000d4a <__aeabi_dmul+0xde>
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_dmul+0xb6>
 8000d20:	e203      	b.n	800112a <__aeabi_dmul+0x4be>
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d000      	beq.n	8000d28 <__aeabi_dmul+0xbc>
 8000d26:	e0cd      	b.n	8000ec4 <__aeabi_dmul+0x258>
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2400      	movs	r4, #0
 8000d2c:	2500      	movs	r5, #0
 8000d2e:	9b01      	ldr	r3, [sp, #4]
 8000d30:	0512      	lsls	r2, r2, #20
 8000d32:	4322      	orrs	r2, r4
 8000d34:	07db      	lsls	r3, r3, #31
 8000d36:	431a      	orrs	r2, r3
 8000d38:	0028      	movs	r0, r5
 8000d3a:	0011      	movs	r1, r2
 8000d3c:	b007      	add	sp, #28
 8000d3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000d40:	46bb      	mov	fp, r7
 8000d42:	46b2      	mov	sl, r6
 8000d44:	46a9      	mov	r9, r5
 8000d46:	46a0      	mov	r8, r4
 8000d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d4a:	2400      	movs	r4, #0
 8000d4c:	2500      	movs	r5, #0
 8000d4e:	4aaa      	ldr	r2, [pc, #680]	; (8000ff8 <__aeabi_dmul+0x38c>)
 8000d50:	e7ed      	b.n	8000d2e <__aeabi_dmul+0xc2>
 8000d52:	0c28      	lsrs	r0, r5, #16
 8000d54:	042d      	lsls	r5, r5, #16
 8000d56:	0c2d      	lsrs	r5, r5, #16
 8000d58:	002b      	movs	r3, r5
 8000d5a:	0c11      	lsrs	r1, r2, #16
 8000d5c:	0412      	lsls	r2, r2, #16
 8000d5e:	0c12      	lsrs	r2, r2, #16
 8000d60:	4353      	muls	r3, r2
 8000d62:	4698      	mov	r8, r3
 8000d64:	0013      	movs	r3, r2
 8000d66:	002f      	movs	r7, r5
 8000d68:	4343      	muls	r3, r0
 8000d6a:	4699      	mov	r9, r3
 8000d6c:	434f      	muls	r7, r1
 8000d6e:	444f      	add	r7, r9
 8000d70:	46bb      	mov	fp, r7
 8000d72:	4647      	mov	r7, r8
 8000d74:	000b      	movs	r3, r1
 8000d76:	0c3f      	lsrs	r7, r7, #16
 8000d78:	46ba      	mov	sl, r7
 8000d7a:	4343      	muls	r3, r0
 8000d7c:	44da      	add	sl, fp
 8000d7e:	9302      	str	r3, [sp, #8]
 8000d80:	45d1      	cmp	r9, sl
 8000d82:	d904      	bls.n	8000d8e <__aeabi_dmul+0x122>
 8000d84:	2780      	movs	r7, #128	; 0x80
 8000d86:	027f      	lsls	r7, r7, #9
 8000d88:	46b9      	mov	r9, r7
 8000d8a:	444b      	add	r3, r9
 8000d8c:	9302      	str	r3, [sp, #8]
 8000d8e:	4653      	mov	r3, sl
 8000d90:	0c1b      	lsrs	r3, r3, #16
 8000d92:	469b      	mov	fp, r3
 8000d94:	4653      	mov	r3, sl
 8000d96:	041f      	lsls	r7, r3, #16
 8000d98:	4643      	mov	r3, r8
 8000d9a:	041b      	lsls	r3, r3, #16
 8000d9c:	0c1b      	lsrs	r3, r3, #16
 8000d9e:	4698      	mov	r8, r3
 8000da0:	003b      	movs	r3, r7
 8000da2:	4443      	add	r3, r8
 8000da4:	9304      	str	r3, [sp, #16]
 8000da6:	0c33      	lsrs	r3, r6, #16
 8000da8:	0436      	lsls	r6, r6, #16
 8000daa:	0c36      	lsrs	r6, r6, #16
 8000dac:	4698      	mov	r8, r3
 8000dae:	0033      	movs	r3, r6
 8000db0:	4343      	muls	r3, r0
 8000db2:	4699      	mov	r9, r3
 8000db4:	4643      	mov	r3, r8
 8000db6:	4343      	muls	r3, r0
 8000db8:	002f      	movs	r7, r5
 8000dba:	469a      	mov	sl, r3
 8000dbc:	4643      	mov	r3, r8
 8000dbe:	4377      	muls	r7, r6
 8000dc0:	435d      	muls	r5, r3
 8000dc2:	0c38      	lsrs	r0, r7, #16
 8000dc4:	444d      	add	r5, r9
 8000dc6:	1945      	adds	r5, r0, r5
 8000dc8:	45a9      	cmp	r9, r5
 8000dca:	d903      	bls.n	8000dd4 <__aeabi_dmul+0x168>
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	025b      	lsls	r3, r3, #9
 8000dd0:	4699      	mov	r9, r3
 8000dd2:	44ca      	add	sl, r9
 8000dd4:	043f      	lsls	r7, r7, #16
 8000dd6:	0c28      	lsrs	r0, r5, #16
 8000dd8:	0c3f      	lsrs	r7, r7, #16
 8000dda:	042d      	lsls	r5, r5, #16
 8000ddc:	19ed      	adds	r5, r5, r7
 8000dde:	0c27      	lsrs	r7, r4, #16
 8000de0:	0424      	lsls	r4, r4, #16
 8000de2:	0c24      	lsrs	r4, r4, #16
 8000de4:	0003      	movs	r3, r0
 8000de6:	0020      	movs	r0, r4
 8000de8:	4350      	muls	r0, r2
 8000dea:	437a      	muls	r2, r7
 8000dec:	4691      	mov	r9, r2
 8000dee:	003a      	movs	r2, r7
 8000df0:	4453      	add	r3, sl
 8000df2:	9305      	str	r3, [sp, #20]
 8000df4:	0c03      	lsrs	r3, r0, #16
 8000df6:	469a      	mov	sl, r3
 8000df8:	434a      	muls	r2, r1
 8000dfa:	4361      	muls	r1, r4
 8000dfc:	4449      	add	r1, r9
 8000dfe:	4451      	add	r1, sl
 8000e00:	44ab      	add	fp, r5
 8000e02:	4589      	cmp	r9, r1
 8000e04:	d903      	bls.n	8000e0e <__aeabi_dmul+0x1a2>
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	025b      	lsls	r3, r3, #9
 8000e0a:	4699      	mov	r9, r3
 8000e0c:	444a      	add	r2, r9
 8000e0e:	0400      	lsls	r0, r0, #16
 8000e10:	0c0b      	lsrs	r3, r1, #16
 8000e12:	0c00      	lsrs	r0, r0, #16
 8000e14:	0409      	lsls	r1, r1, #16
 8000e16:	1809      	adds	r1, r1, r0
 8000e18:	0020      	movs	r0, r4
 8000e1a:	4699      	mov	r9, r3
 8000e1c:	4643      	mov	r3, r8
 8000e1e:	4370      	muls	r0, r6
 8000e20:	435c      	muls	r4, r3
 8000e22:	437e      	muls	r6, r7
 8000e24:	435f      	muls	r7, r3
 8000e26:	0c03      	lsrs	r3, r0, #16
 8000e28:	4698      	mov	r8, r3
 8000e2a:	19a4      	adds	r4, r4, r6
 8000e2c:	4444      	add	r4, r8
 8000e2e:	444a      	add	r2, r9
 8000e30:	9703      	str	r7, [sp, #12]
 8000e32:	42a6      	cmp	r6, r4
 8000e34:	d904      	bls.n	8000e40 <__aeabi_dmul+0x1d4>
 8000e36:	2380      	movs	r3, #128	; 0x80
 8000e38:	025b      	lsls	r3, r3, #9
 8000e3a:	4698      	mov	r8, r3
 8000e3c:	4447      	add	r7, r8
 8000e3e:	9703      	str	r7, [sp, #12]
 8000e40:	0423      	lsls	r3, r4, #16
 8000e42:	9e02      	ldr	r6, [sp, #8]
 8000e44:	469a      	mov	sl, r3
 8000e46:	9b05      	ldr	r3, [sp, #20]
 8000e48:	445e      	add	r6, fp
 8000e4a:	4698      	mov	r8, r3
 8000e4c:	42ae      	cmp	r6, r5
 8000e4e:	41ad      	sbcs	r5, r5
 8000e50:	1876      	adds	r6, r6, r1
 8000e52:	428e      	cmp	r6, r1
 8000e54:	4189      	sbcs	r1, r1
 8000e56:	0400      	lsls	r0, r0, #16
 8000e58:	0c00      	lsrs	r0, r0, #16
 8000e5a:	4450      	add	r0, sl
 8000e5c:	4440      	add	r0, r8
 8000e5e:	426d      	negs	r5, r5
 8000e60:	1947      	adds	r7, r0, r5
 8000e62:	46b8      	mov	r8, r7
 8000e64:	4693      	mov	fp, r2
 8000e66:	4249      	negs	r1, r1
 8000e68:	4689      	mov	r9, r1
 8000e6a:	44c3      	add	fp, r8
 8000e6c:	44d9      	add	r9, fp
 8000e6e:	4298      	cmp	r0, r3
 8000e70:	4180      	sbcs	r0, r0
 8000e72:	45a8      	cmp	r8, r5
 8000e74:	41ad      	sbcs	r5, r5
 8000e76:	4593      	cmp	fp, r2
 8000e78:	4192      	sbcs	r2, r2
 8000e7a:	4589      	cmp	r9, r1
 8000e7c:	4189      	sbcs	r1, r1
 8000e7e:	426d      	negs	r5, r5
 8000e80:	4240      	negs	r0, r0
 8000e82:	4328      	orrs	r0, r5
 8000e84:	0c24      	lsrs	r4, r4, #16
 8000e86:	4252      	negs	r2, r2
 8000e88:	4249      	negs	r1, r1
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	9b03      	ldr	r3, [sp, #12]
 8000e8e:	1900      	adds	r0, r0, r4
 8000e90:	1880      	adds	r0, r0, r2
 8000e92:	18c7      	adds	r7, r0, r3
 8000e94:	464b      	mov	r3, r9
 8000e96:	0ddc      	lsrs	r4, r3, #23
 8000e98:	9b04      	ldr	r3, [sp, #16]
 8000e9a:	0275      	lsls	r5, r6, #9
 8000e9c:	431d      	orrs	r5, r3
 8000e9e:	1e6a      	subs	r2, r5, #1
 8000ea0:	4195      	sbcs	r5, r2
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	0df6      	lsrs	r6, r6, #23
 8000ea6:	027f      	lsls	r7, r7, #9
 8000ea8:	4335      	orrs	r5, r6
 8000eaa:	025a      	lsls	r2, r3, #9
 8000eac:	433c      	orrs	r4, r7
 8000eae:	4315      	orrs	r5, r2
 8000eb0:	01fb      	lsls	r3, r7, #7
 8000eb2:	d400      	bmi.n	8000eb6 <__aeabi_dmul+0x24a>
 8000eb4:	e11c      	b.n	80010f0 <__aeabi_dmul+0x484>
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	086a      	lsrs	r2, r5, #1
 8000eba:	400d      	ands	r5, r1
 8000ebc:	4315      	orrs	r5, r2
 8000ebe:	07e2      	lsls	r2, r4, #31
 8000ec0:	4315      	orrs	r5, r2
 8000ec2:	0864      	lsrs	r4, r4, #1
 8000ec4:	494f      	ldr	r1, [pc, #316]	; (8001004 <__aeabi_dmul+0x398>)
 8000ec6:	4461      	add	r1, ip
 8000ec8:	2900      	cmp	r1, #0
 8000eca:	dc00      	bgt.n	8000ece <__aeabi_dmul+0x262>
 8000ecc:	e0b0      	b.n	8001030 <__aeabi_dmul+0x3c4>
 8000ece:	076b      	lsls	r3, r5, #29
 8000ed0:	d009      	beq.n	8000ee6 <__aeabi_dmul+0x27a>
 8000ed2:	220f      	movs	r2, #15
 8000ed4:	402a      	ands	r2, r5
 8000ed6:	2a04      	cmp	r2, #4
 8000ed8:	d005      	beq.n	8000ee6 <__aeabi_dmul+0x27a>
 8000eda:	1d2a      	adds	r2, r5, #4
 8000edc:	42aa      	cmp	r2, r5
 8000ede:	41ad      	sbcs	r5, r5
 8000ee0:	426d      	negs	r5, r5
 8000ee2:	1964      	adds	r4, r4, r5
 8000ee4:	0015      	movs	r5, r2
 8000ee6:	01e3      	lsls	r3, r4, #7
 8000ee8:	d504      	bpl.n	8000ef4 <__aeabi_dmul+0x288>
 8000eea:	2180      	movs	r1, #128	; 0x80
 8000eec:	4a46      	ldr	r2, [pc, #280]	; (8001008 <__aeabi_dmul+0x39c>)
 8000eee:	00c9      	lsls	r1, r1, #3
 8000ef0:	4014      	ands	r4, r2
 8000ef2:	4461      	add	r1, ip
 8000ef4:	4a45      	ldr	r2, [pc, #276]	; (800100c <__aeabi_dmul+0x3a0>)
 8000ef6:	4291      	cmp	r1, r2
 8000ef8:	dd00      	ble.n	8000efc <__aeabi_dmul+0x290>
 8000efa:	e726      	b.n	8000d4a <__aeabi_dmul+0xde>
 8000efc:	0762      	lsls	r2, r4, #29
 8000efe:	08ed      	lsrs	r5, r5, #3
 8000f00:	0264      	lsls	r4, r4, #9
 8000f02:	0549      	lsls	r1, r1, #21
 8000f04:	4315      	orrs	r5, r2
 8000f06:	0b24      	lsrs	r4, r4, #12
 8000f08:	0d4a      	lsrs	r2, r1, #21
 8000f0a:	e710      	b.n	8000d2e <__aeabi_dmul+0xc2>
 8000f0c:	4652      	mov	r2, sl
 8000f0e:	4332      	orrs	r2, r6
 8000f10:	d100      	bne.n	8000f14 <__aeabi_dmul+0x2a8>
 8000f12:	e07f      	b.n	8001014 <__aeabi_dmul+0x3a8>
 8000f14:	2e00      	cmp	r6, #0
 8000f16:	d100      	bne.n	8000f1a <__aeabi_dmul+0x2ae>
 8000f18:	e0dc      	b.n	80010d4 <__aeabi_dmul+0x468>
 8000f1a:	0030      	movs	r0, r6
 8000f1c:	f000 f96e 	bl	80011fc <__clzsi2>
 8000f20:	0002      	movs	r2, r0
 8000f22:	3a0b      	subs	r2, #11
 8000f24:	231d      	movs	r3, #29
 8000f26:	0001      	movs	r1, r0
 8000f28:	1a9b      	subs	r3, r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	3908      	subs	r1, #8
 8000f2e:	40da      	lsrs	r2, r3
 8000f30:	408e      	lsls	r6, r1
 8000f32:	4316      	orrs	r6, r2
 8000f34:	4652      	mov	r2, sl
 8000f36:	408a      	lsls	r2, r1
 8000f38:	9b00      	ldr	r3, [sp, #0]
 8000f3a:	4935      	ldr	r1, [pc, #212]	; (8001010 <__aeabi_dmul+0x3a4>)
 8000f3c:	1a18      	subs	r0, r3, r0
 8000f3e:	0003      	movs	r3, r0
 8000f40:	468c      	mov	ip, r1
 8000f42:	4463      	add	r3, ip
 8000f44:	2000      	movs	r0, #0
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	e6d3      	b.n	8000cf2 <__aeabi_dmul+0x86>
 8000f4a:	0025      	movs	r5, r4
 8000f4c:	4305      	orrs	r5, r0
 8000f4e:	d04a      	beq.n	8000fe6 <__aeabi_dmul+0x37a>
 8000f50:	2c00      	cmp	r4, #0
 8000f52:	d100      	bne.n	8000f56 <__aeabi_dmul+0x2ea>
 8000f54:	e0b0      	b.n	80010b8 <__aeabi_dmul+0x44c>
 8000f56:	0020      	movs	r0, r4
 8000f58:	f000 f950 	bl	80011fc <__clzsi2>
 8000f5c:	0001      	movs	r1, r0
 8000f5e:	0002      	movs	r2, r0
 8000f60:	390b      	subs	r1, #11
 8000f62:	231d      	movs	r3, #29
 8000f64:	0010      	movs	r0, r2
 8000f66:	1a5b      	subs	r3, r3, r1
 8000f68:	0031      	movs	r1, r6
 8000f6a:	0035      	movs	r5, r6
 8000f6c:	3808      	subs	r0, #8
 8000f6e:	4084      	lsls	r4, r0
 8000f70:	40d9      	lsrs	r1, r3
 8000f72:	4085      	lsls	r5, r0
 8000f74:	430c      	orrs	r4, r1
 8000f76:	4826      	ldr	r0, [pc, #152]	; (8001010 <__aeabi_dmul+0x3a4>)
 8000f78:	1a83      	subs	r3, r0, r2
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	4699      	mov	r9, r3
 8000f80:	469b      	mov	fp, r3
 8000f82:	e697      	b.n	8000cb4 <__aeabi_dmul+0x48>
 8000f84:	0005      	movs	r5, r0
 8000f86:	4325      	orrs	r5, r4
 8000f88:	d126      	bne.n	8000fd8 <__aeabi_dmul+0x36c>
 8000f8a:	2208      	movs	r2, #8
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2302      	movs	r3, #2
 8000f90:	2400      	movs	r4, #0
 8000f92:	4691      	mov	r9, r2
 8000f94:	469b      	mov	fp, r3
 8000f96:	e68d      	b.n	8000cb4 <__aeabi_dmul+0x48>
 8000f98:	4652      	mov	r2, sl
 8000f9a:	9b00      	ldr	r3, [sp, #0]
 8000f9c:	4332      	orrs	r2, r6
 8000f9e:	d110      	bne.n	8000fc2 <__aeabi_dmul+0x356>
 8000fa0:	4915      	ldr	r1, [pc, #84]	; (8000ff8 <__aeabi_dmul+0x38c>)
 8000fa2:	2600      	movs	r6, #0
 8000fa4:	468c      	mov	ip, r1
 8000fa6:	4463      	add	r3, ip
 8000fa8:	4649      	mov	r1, r9
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2302      	movs	r3, #2
 8000fae:	4319      	orrs	r1, r3
 8000fb0:	4689      	mov	r9, r1
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	e69d      	b.n	8000cf2 <__aeabi_dmul+0x86>
 8000fb6:	465b      	mov	r3, fp
 8000fb8:	9701      	str	r7, [sp, #4]
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d000      	beq.n	8000fc0 <__aeabi_dmul+0x354>
 8000fbe:	e6ad      	b.n	8000d1c <__aeabi_dmul+0xb0>
 8000fc0:	e6c3      	b.n	8000d4a <__aeabi_dmul+0xde>
 8000fc2:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <__aeabi_dmul+0x38c>)
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	4694      	mov	ip, r2
 8000fc8:	4463      	add	r3, ip
 8000fca:	464a      	mov	r2, r9
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2303      	movs	r3, #3
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	4691      	mov	r9, r2
 8000fd4:	4652      	mov	r2, sl
 8000fd6:	e68c      	b.n	8000cf2 <__aeabi_dmul+0x86>
 8000fd8:	220c      	movs	r2, #12
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2303      	movs	r3, #3
 8000fde:	0005      	movs	r5, r0
 8000fe0:	4691      	mov	r9, r2
 8000fe2:	469b      	mov	fp, r3
 8000fe4:	e666      	b.n	8000cb4 <__aeabi_dmul+0x48>
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	4699      	mov	r9, r3
 8000fea:	2300      	movs	r3, #0
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	469b      	mov	fp, r3
 8000ff4:	e65e      	b.n	8000cb4 <__aeabi_dmul+0x48>
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	000007ff 	.word	0x000007ff
 8000ffc:	fffffc01 	.word	0xfffffc01
 8001000:	08007d0c 	.word	0x08007d0c
 8001004:	000003ff 	.word	0x000003ff
 8001008:	feffffff 	.word	0xfeffffff
 800100c:	000007fe 	.word	0x000007fe
 8001010:	fffffc0d 	.word	0xfffffc0d
 8001014:	4649      	mov	r1, r9
 8001016:	2301      	movs	r3, #1
 8001018:	4319      	orrs	r1, r3
 800101a:	4689      	mov	r9, r1
 800101c:	2600      	movs	r6, #0
 800101e:	2001      	movs	r0, #1
 8001020:	e667      	b.n	8000cf2 <__aeabi_dmul+0x86>
 8001022:	2300      	movs	r3, #0
 8001024:	2480      	movs	r4, #128	; 0x80
 8001026:	2500      	movs	r5, #0
 8001028:	4a43      	ldr	r2, [pc, #268]	; (8001138 <__aeabi_dmul+0x4cc>)
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	0324      	lsls	r4, r4, #12
 800102e:	e67e      	b.n	8000d2e <__aeabi_dmul+0xc2>
 8001030:	2001      	movs	r0, #1
 8001032:	1a40      	subs	r0, r0, r1
 8001034:	2838      	cmp	r0, #56	; 0x38
 8001036:	dd00      	ble.n	800103a <__aeabi_dmul+0x3ce>
 8001038:	e676      	b.n	8000d28 <__aeabi_dmul+0xbc>
 800103a:	281f      	cmp	r0, #31
 800103c:	dd5b      	ble.n	80010f6 <__aeabi_dmul+0x48a>
 800103e:	221f      	movs	r2, #31
 8001040:	0023      	movs	r3, r4
 8001042:	4252      	negs	r2, r2
 8001044:	1a51      	subs	r1, r2, r1
 8001046:	40cb      	lsrs	r3, r1
 8001048:	0019      	movs	r1, r3
 800104a:	2820      	cmp	r0, #32
 800104c:	d003      	beq.n	8001056 <__aeabi_dmul+0x3ea>
 800104e:	4a3b      	ldr	r2, [pc, #236]	; (800113c <__aeabi_dmul+0x4d0>)
 8001050:	4462      	add	r2, ip
 8001052:	4094      	lsls	r4, r2
 8001054:	4325      	orrs	r5, r4
 8001056:	1e6a      	subs	r2, r5, #1
 8001058:	4195      	sbcs	r5, r2
 800105a:	002a      	movs	r2, r5
 800105c:	430a      	orrs	r2, r1
 800105e:	2107      	movs	r1, #7
 8001060:	000d      	movs	r5, r1
 8001062:	2400      	movs	r4, #0
 8001064:	4015      	ands	r5, r2
 8001066:	4211      	tst	r1, r2
 8001068:	d05b      	beq.n	8001122 <__aeabi_dmul+0x4b6>
 800106a:	210f      	movs	r1, #15
 800106c:	2400      	movs	r4, #0
 800106e:	4011      	ands	r1, r2
 8001070:	2904      	cmp	r1, #4
 8001072:	d053      	beq.n	800111c <__aeabi_dmul+0x4b0>
 8001074:	1d11      	adds	r1, r2, #4
 8001076:	4291      	cmp	r1, r2
 8001078:	4192      	sbcs	r2, r2
 800107a:	4252      	negs	r2, r2
 800107c:	18a4      	adds	r4, r4, r2
 800107e:	000a      	movs	r2, r1
 8001080:	0223      	lsls	r3, r4, #8
 8001082:	d54b      	bpl.n	800111c <__aeabi_dmul+0x4b0>
 8001084:	2201      	movs	r2, #1
 8001086:	2400      	movs	r4, #0
 8001088:	2500      	movs	r5, #0
 800108a:	e650      	b.n	8000d2e <__aeabi_dmul+0xc2>
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	031b      	lsls	r3, r3, #12
 8001090:	421c      	tst	r4, r3
 8001092:	d009      	beq.n	80010a8 <__aeabi_dmul+0x43c>
 8001094:	421e      	tst	r6, r3
 8001096:	d107      	bne.n	80010a8 <__aeabi_dmul+0x43c>
 8001098:	4333      	orrs	r3, r6
 800109a:	031c      	lsls	r4, r3, #12
 800109c:	4643      	mov	r3, r8
 800109e:	0015      	movs	r5, r2
 80010a0:	0b24      	lsrs	r4, r4, #12
 80010a2:	4a25      	ldr	r2, [pc, #148]	; (8001138 <__aeabi_dmul+0x4cc>)
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	e642      	b.n	8000d2e <__aeabi_dmul+0xc2>
 80010a8:	2280      	movs	r2, #128	; 0x80
 80010aa:	0312      	lsls	r2, r2, #12
 80010ac:	4314      	orrs	r4, r2
 80010ae:	0324      	lsls	r4, r4, #12
 80010b0:	4a21      	ldr	r2, [pc, #132]	; (8001138 <__aeabi_dmul+0x4cc>)
 80010b2:	0b24      	lsrs	r4, r4, #12
 80010b4:	9701      	str	r7, [sp, #4]
 80010b6:	e63a      	b.n	8000d2e <__aeabi_dmul+0xc2>
 80010b8:	f000 f8a0 	bl	80011fc <__clzsi2>
 80010bc:	0001      	movs	r1, r0
 80010be:	0002      	movs	r2, r0
 80010c0:	3115      	adds	r1, #21
 80010c2:	3220      	adds	r2, #32
 80010c4:	291c      	cmp	r1, #28
 80010c6:	dc00      	bgt.n	80010ca <__aeabi_dmul+0x45e>
 80010c8:	e74b      	b.n	8000f62 <__aeabi_dmul+0x2f6>
 80010ca:	0034      	movs	r4, r6
 80010cc:	3808      	subs	r0, #8
 80010ce:	2500      	movs	r5, #0
 80010d0:	4084      	lsls	r4, r0
 80010d2:	e750      	b.n	8000f76 <__aeabi_dmul+0x30a>
 80010d4:	f000 f892 	bl	80011fc <__clzsi2>
 80010d8:	0003      	movs	r3, r0
 80010da:	001a      	movs	r2, r3
 80010dc:	3215      	adds	r2, #21
 80010de:	3020      	adds	r0, #32
 80010e0:	2a1c      	cmp	r2, #28
 80010e2:	dc00      	bgt.n	80010e6 <__aeabi_dmul+0x47a>
 80010e4:	e71e      	b.n	8000f24 <__aeabi_dmul+0x2b8>
 80010e6:	4656      	mov	r6, sl
 80010e8:	3b08      	subs	r3, #8
 80010ea:	2200      	movs	r2, #0
 80010ec:	409e      	lsls	r6, r3
 80010ee:	e723      	b.n	8000f38 <__aeabi_dmul+0x2cc>
 80010f0:	9b00      	ldr	r3, [sp, #0]
 80010f2:	469c      	mov	ip, r3
 80010f4:	e6e6      	b.n	8000ec4 <__aeabi_dmul+0x258>
 80010f6:	4912      	ldr	r1, [pc, #72]	; (8001140 <__aeabi_dmul+0x4d4>)
 80010f8:	0022      	movs	r2, r4
 80010fa:	4461      	add	r1, ip
 80010fc:	002e      	movs	r6, r5
 80010fe:	408d      	lsls	r5, r1
 8001100:	408a      	lsls	r2, r1
 8001102:	40c6      	lsrs	r6, r0
 8001104:	1e69      	subs	r1, r5, #1
 8001106:	418d      	sbcs	r5, r1
 8001108:	4332      	orrs	r2, r6
 800110a:	432a      	orrs	r2, r5
 800110c:	40c4      	lsrs	r4, r0
 800110e:	0753      	lsls	r3, r2, #29
 8001110:	d0b6      	beq.n	8001080 <__aeabi_dmul+0x414>
 8001112:	210f      	movs	r1, #15
 8001114:	4011      	ands	r1, r2
 8001116:	2904      	cmp	r1, #4
 8001118:	d1ac      	bne.n	8001074 <__aeabi_dmul+0x408>
 800111a:	e7b1      	b.n	8001080 <__aeabi_dmul+0x414>
 800111c:	0765      	lsls	r5, r4, #29
 800111e:	0264      	lsls	r4, r4, #9
 8001120:	0b24      	lsrs	r4, r4, #12
 8001122:	08d2      	lsrs	r2, r2, #3
 8001124:	4315      	orrs	r5, r2
 8001126:	2200      	movs	r2, #0
 8001128:	e601      	b.n	8000d2e <__aeabi_dmul+0xc2>
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	0312      	lsls	r2, r2, #12
 800112e:	4314      	orrs	r4, r2
 8001130:	0324      	lsls	r4, r4, #12
 8001132:	4a01      	ldr	r2, [pc, #4]	; (8001138 <__aeabi_dmul+0x4cc>)
 8001134:	0b24      	lsrs	r4, r4, #12
 8001136:	e5fa      	b.n	8000d2e <__aeabi_dmul+0xc2>
 8001138:	000007ff 	.word	0x000007ff
 800113c:	0000043e 	.word	0x0000043e
 8001140:	0000041e 	.word	0x0000041e

08001144 <__aeabi_d2iz>:
 8001144:	000a      	movs	r2, r1
 8001146:	b530      	push	{r4, r5, lr}
 8001148:	4c13      	ldr	r4, [pc, #76]	; (8001198 <__aeabi_d2iz+0x54>)
 800114a:	0053      	lsls	r3, r2, #1
 800114c:	0309      	lsls	r1, r1, #12
 800114e:	0005      	movs	r5, r0
 8001150:	0b09      	lsrs	r1, r1, #12
 8001152:	2000      	movs	r0, #0
 8001154:	0d5b      	lsrs	r3, r3, #21
 8001156:	0fd2      	lsrs	r2, r2, #31
 8001158:	42a3      	cmp	r3, r4
 800115a:	dd04      	ble.n	8001166 <__aeabi_d2iz+0x22>
 800115c:	480f      	ldr	r0, [pc, #60]	; (800119c <__aeabi_d2iz+0x58>)
 800115e:	4283      	cmp	r3, r0
 8001160:	dd02      	ble.n	8001168 <__aeabi_d2iz+0x24>
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <__aeabi_d2iz+0x5c>)
 8001164:	18d0      	adds	r0, r2, r3
 8001166:	bd30      	pop	{r4, r5, pc}
 8001168:	2080      	movs	r0, #128	; 0x80
 800116a:	0340      	lsls	r0, r0, #13
 800116c:	4301      	orrs	r1, r0
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <__aeabi_d2iz+0x60>)
 8001170:	1ac0      	subs	r0, r0, r3
 8001172:	281f      	cmp	r0, #31
 8001174:	dd08      	ble.n	8001188 <__aeabi_d2iz+0x44>
 8001176:	480c      	ldr	r0, [pc, #48]	; (80011a8 <__aeabi_d2iz+0x64>)
 8001178:	1ac3      	subs	r3, r0, r3
 800117a:	40d9      	lsrs	r1, r3
 800117c:	000b      	movs	r3, r1
 800117e:	4258      	negs	r0, r3
 8001180:	2a00      	cmp	r2, #0
 8001182:	d1f0      	bne.n	8001166 <__aeabi_d2iz+0x22>
 8001184:	0018      	movs	r0, r3
 8001186:	e7ee      	b.n	8001166 <__aeabi_d2iz+0x22>
 8001188:	4c08      	ldr	r4, [pc, #32]	; (80011ac <__aeabi_d2iz+0x68>)
 800118a:	40c5      	lsrs	r5, r0
 800118c:	46a4      	mov	ip, r4
 800118e:	4463      	add	r3, ip
 8001190:	4099      	lsls	r1, r3
 8001192:	000b      	movs	r3, r1
 8001194:	432b      	orrs	r3, r5
 8001196:	e7f2      	b.n	800117e <__aeabi_d2iz+0x3a>
 8001198:	000003fe 	.word	0x000003fe
 800119c:	0000041d 	.word	0x0000041d
 80011a0:	7fffffff 	.word	0x7fffffff
 80011a4:	00000433 	.word	0x00000433
 80011a8:	00000413 	.word	0x00000413
 80011ac:	fffffbed 	.word	0xfffffbed

080011b0 <__aeabi_ui2d>:
 80011b0:	b510      	push	{r4, lr}
 80011b2:	1e04      	subs	r4, r0, #0
 80011b4:	d010      	beq.n	80011d8 <__aeabi_ui2d+0x28>
 80011b6:	f000 f821 	bl	80011fc <__clzsi2>
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <__aeabi_ui2d+0x48>)
 80011bc:	1a1b      	subs	r3, r3, r0
 80011be:	280a      	cmp	r0, #10
 80011c0:	dc11      	bgt.n	80011e6 <__aeabi_ui2d+0x36>
 80011c2:	220b      	movs	r2, #11
 80011c4:	0021      	movs	r1, r4
 80011c6:	1a12      	subs	r2, r2, r0
 80011c8:	40d1      	lsrs	r1, r2
 80011ca:	3015      	adds	r0, #21
 80011cc:	030a      	lsls	r2, r1, #12
 80011ce:	055b      	lsls	r3, r3, #21
 80011d0:	4084      	lsls	r4, r0
 80011d2:	0b12      	lsrs	r2, r2, #12
 80011d4:	0d5b      	lsrs	r3, r3, #21
 80011d6:	e001      	b.n	80011dc <__aeabi_ui2d+0x2c>
 80011d8:	2300      	movs	r3, #0
 80011da:	2200      	movs	r2, #0
 80011dc:	051b      	lsls	r3, r3, #20
 80011de:	4313      	orrs	r3, r2
 80011e0:	0020      	movs	r0, r4
 80011e2:	0019      	movs	r1, r3
 80011e4:	bd10      	pop	{r4, pc}
 80011e6:	0022      	movs	r2, r4
 80011e8:	380b      	subs	r0, #11
 80011ea:	4082      	lsls	r2, r0
 80011ec:	055b      	lsls	r3, r3, #21
 80011ee:	0312      	lsls	r2, r2, #12
 80011f0:	2400      	movs	r4, #0
 80011f2:	0b12      	lsrs	r2, r2, #12
 80011f4:	0d5b      	lsrs	r3, r3, #21
 80011f6:	e7f1      	b.n	80011dc <__aeabi_ui2d+0x2c>
 80011f8:	0000041e 	.word	0x0000041e

080011fc <__clzsi2>:
 80011fc:	211c      	movs	r1, #28
 80011fe:	2301      	movs	r3, #1
 8001200:	041b      	lsls	r3, r3, #16
 8001202:	4298      	cmp	r0, r3
 8001204:	d301      	bcc.n	800120a <__clzsi2+0xe>
 8001206:	0c00      	lsrs	r0, r0, #16
 8001208:	3910      	subs	r1, #16
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	4298      	cmp	r0, r3
 800120e:	d301      	bcc.n	8001214 <__clzsi2+0x18>
 8001210:	0a00      	lsrs	r0, r0, #8
 8001212:	3908      	subs	r1, #8
 8001214:	091b      	lsrs	r3, r3, #4
 8001216:	4298      	cmp	r0, r3
 8001218:	d301      	bcc.n	800121e <__clzsi2+0x22>
 800121a:	0900      	lsrs	r0, r0, #4
 800121c:	3904      	subs	r1, #4
 800121e:	a202      	add	r2, pc, #8	; (adr r2, 8001228 <__clzsi2+0x2c>)
 8001220:	5c10      	ldrb	r0, [r2, r0]
 8001222:	1840      	adds	r0, r0, r1
 8001224:	4770      	bx	lr
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	02020304 	.word	0x02020304
 800122c:	01010101 	.word	0x01010101
	...

08001238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800123c:	f000 fe18 	bl	8001e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001240:	f000 f81c 	bl	800127c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001244:	f000 fa94 	bl	8001770 <MX_GPIO_Init>
  MX_DMA_Init();
 8001248:	f000 fa74 	bl	8001734 <MX_DMA_Init>
  MX_TIM1_Init();
 800124c:	f000 f8d8 	bl	8001400 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001250:	f000 f93a 	bl	80014c8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001254:	f000 f86c 	bl	8001330 <MX_ADC1_Init>
  MX_TIM7_Init();
 8001258:	f000 f9ac 	bl	80015b4 <MX_TIM7_Init>
  MX_TIM17_Init();
 800125c:	f000 f9e6 	bl	800162c <MX_TIM17_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  maincpp();
 8001260:	f006 fa70 	bl	8007744 <maincpp>
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <main+0x40>)
 8001266:	2110      	movs	r1, #16
 8001268:	0018      	movs	r0, r3
 800126a:	f002 fcba 	bl	8003be2 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800126e:	2064      	movs	r0, #100	; 0x64
 8001270:	f000 fe84 	bl	8001f7c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001274:	e7f6      	b.n	8001264 <main+0x2c>
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	50000400 	.word	0x50000400

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b093      	sub	sp, #76	; 0x4c
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	2414      	movs	r4, #20
 8001284:	193b      	adds	r3, r7, r4
 8001286:	0018      	movs	r0, r3
 8001288:	2334      	movs	r3, #52	; 0x34
 800128a:	001a      	movs	r2, r3
 800128c:	2100      	movs	r1, #0
 800128e:	f006 fcff 	bl	8007c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	0018      	movs	r0, r3
 8001296:	2310      	movs	r3, #16
 8001298:	001a      	movs	r2, r3
 800129a:	2100      	movs	r1, #0
 800129c:	f006 fcf8 	bl	8007c90 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	0018      	movs	r0, r3
 80012a6:	f002 fce1 	bl	8003c6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012aa:	193b      	adds	r3, r7, r4
 80012ac:	2202      	movs	r2, #2
 80012ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b0:	193b      	adds	r3, r7, r4
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	0052      	lsls	r2, r2, #1
 80012b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80012b8:	0021      	movs	r1, r4
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	2240      	movs	r2, #64	; 0x40
 80012c4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c6:	187b      	adds	r3, r7, r1
 80012c8:	2202      	movs	r2, #2
 80012ca:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012cc:	187b      	adds	r3, r7, r1
 80012ce:	2202      	movs	r2, #2
 80012d0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80012d2:	187b      	adds	r3, r7, r1
 80012d4:	2200      	movs	r2, #0
 80012d6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	2208      	movs	r2, #8
 80012dc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012de:	187b      	adds	r3, r7, r1
 80012e0:	2280      	movs	r2, #128	; 0x80
 80012e2:	0292      	lsls	r2, r2, #10
 80012e4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	2280      	movs	r2, #128	; 0x80
 80012ea:	0592      	lsls	r2, r2, #22
 80012ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	0018      	movs	r0, r3
 80012f2:	f002 fcfb 	bl	8003cec <HAL_RCC_OscConfig>
 80012f6:	1e03      	subs	r3, r0, #0
 80012f8:	d001      	beq.n	80012fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012fa:	f000 fae1 	bl	80018c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2207      	movs	r2, #7
 8001302:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2202      	movs	r2, #2
 8001308:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2102      	movs	r1, #2
 800131a:	0018      	movs	r0, r3
 800131c:	f002 fff6 	bl	800430c <HAL_RCC_ClockConfig>
 8001320:	1e03      	subs	r3, r0, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001324:	f000 facc 	bl	80018c0 <Error_Handler>
  }
}
 8001328:	46c0      	nop			; (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	b013      	add	sp, #76	; 0x4c
 800132e:	bd90      	pop	{r4, r7, pc}

08001330 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	0018      	movs	r0, r3
 800133a:	230c      	movs	r3, #12
 800133c:	001a      	movs	r2, r3
 800133e:	2100      	movs	r1, #0
 8001340:	f006 fca6 	bl	8007c90 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001344:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <MX_ADC1_Init+0xc4>)
 8001346:	4a2c      	ldr	r2, [pc, #176]	; (80013f8 <MX_ADC1_Init+0xc8>)
 8001348:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <MX_ADC1_Init+0xc4>)
 800134c:	2280      	movs	r2, #128	; 0x80
 800134e:	05d2      	lsls	r2, r2, #23
 8001350:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001352:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <MX_ADC1_Init+0xc4>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001358:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <MX_ADC1_Init+0xc4>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <MX_ADC1_Init+0xc4>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001364:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <MX_ADC1_Init+0xc4>)
 8001366:	2204      	movs	r2, #4
 8001368:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800136a:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <MX_ADC1_Init+0xc4>)
 800136c:	2200      	movs	r2, #0
 800136e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001370:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <MX_ADC1_Init+0xc4>)
 8001372:	2200      	movs	r2, #0
 8001374:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001376:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <MX_ADC1_Init+0xc4>)
 8001378:	2201      	movs	r2, #1
 800137a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <MX_ADC1_Init+0xc4>)
 800137e:	2201      	movs	r2, #1
 8001380:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <MX_ADC1_Init+0xc4>)
 8001384:	2200      	movs	r2, #0
 8001386:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <MX_ADC1_Init+0xc4>)
 800138a:	2200      	movs	r2, #0
 800138c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800138e:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <MX_ADC1_Init+0xc4>)
 8001390:	222c      	movs	r2, #44	; 0x2c
 8001392:	2100      	movs	r1, #0
 8001394:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <MX_ADC1_Init+0xc4>)
 8001398:	2200      	movs	r2, #0
 800139a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <MX_ADC1_Init+0xc4>)
 800139e:	2205      	movs	r2, #5
 80013a0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <MX_ADC1_Init+0xc4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <MX_ADC1_Init+0xc4>)
 80013aa:	223c      	movs	r2, #60	; 0x3c
 80013ac:	2100      	movs	r1, #0
 80013ae:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80013b0:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <MX_ADC1_Init+0xc4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <MX_ADC1_Init+0xc4>)
 80013b8:	0018      	movs	r0, r3
 80013ba:	f000 ff5f 	bl	800227c <HAL_ADC_Init>
 80013be:	1e03      	subs	r3, r0, #0
 80013c0:	d001      	beq.n	80013c6 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80013c2:	f000 fa7d 	bl	80018c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	4a0c      	ldr	r2, [pc, #48]	; (80013fc <MX_ADC1_Init+0xcc>)
 80013ca:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d8:	1d3a      	adds	r2, r7, #4
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_ADC1_Init+0xc4>)
 80013dc:	0011      	movs	r1, r2
 80013de:	0018      	movs	r0, r3
 80013e0:	f001 f94e 	bl	8002680 <HAL_ADC_ConfigChannel>
 80013e4:	1e03      	subs	r3, r0, #0
 80013e6:	d001      	beq.n	80013ec <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80013e8:	f000 fa6a 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ec:	46c0      	nop			; (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b004      	add	sp, #16
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	200000d4 	.word	0x200000d4
 80013f8:	40012400 	.word	0x40012400
 80013fc:	08000004 	.word	0x08000004

08001400 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001406:	2314      	movs	r3, #20
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	0018      	movs	r0, r3
 800140c:	230c      	movs	r3, #12
 800140e:	001a      	movs	r2, r3
 8001410:	2100      	movs	r1, #0
 8001412:	f006 fc3d 	bl	8007c90 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	0018      	movs	r0, r3
 800141a:	2310      	movs	r3, #16
 800141c:	001a      	movs	r2, r3
 800141e:	2100      	movs	r1, #0
 8001420:	f006 fc36 	bl	8007c90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001424:	4b25      	ldr	r3, [pc, #148]	; (80014bc <MX_TIM1_Init+0xbc>)
 8001426:	4a26      	ldr	r2, [pc, #152]	; (80014c0 <MX_TIM1_Init+0xc0>)
 8001428:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800142a:	4b24      	ldr	r3, [pc, #144]	; (80014bc <MX_TIM1_Init+0xbc>)
 800142c:	2200      	movs	r2, #0
 800142e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <MX_TIM1_Init+0xbc>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001436:	4b21      	ldr	r3, [pc, #132]	; (80014bc <MX_TIM1_Init+0xbc>)
 8001438:	4a22      	ldr	r2, [pc, #136]	; (80014c4 <MX_TIM1_Init+0xc4>)
 800143a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <MX_TIM1_Init+0xbc>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <MX_TIM1_Init+0xbc>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001448:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <MX_TIM1_Init+0xbc>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800144e:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <MX_TIM1_Init+0xbc>)
 8001450:	0018      	movs	r0, r3
 8001452:	f004 f86f 	bl	8005534 <HAL_TIM_IC_Init>
 8001456:	1e03      	subs	r3, r0, #0
 8001458:	d001      	beq.n	800145e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800145a:	f000 fa31 	bl	80018c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145e:	2114      	movs	r1, #20
 8001460:	187b      	adds	r3, r7, r1
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001466:	187b      	adds	r3, r7, r1
 8001468:	2200      	movs	r2, #0
 800146a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146c:	187b      	adds	r3, r7, r1
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001472:	187a      	adds	r2, r7, r1
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_TIM1_Init+0xbc>)
 8001476:	0011      	movs	r1, r2
 8001478:	0018      	movs	r0, r3
 800147a:	f005 fbc5 	bl	8006c08 <HAL_TIMEx_MasterConfigSynchronization>
 800147e:	1e03      	subs	r3, r0, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 8001482:	f000 fa1d 	bl	80018c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	220a      	movs	r2, #10
 800148a:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2201      	movs	r2, #1
 8001490:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800149e:	1d39      	adds	r1, r7, #4
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_TIM1_Init+0xbc>)
 80014a2:	2208      	movs	r2, #8
 80014a4:	0018      	movs	r0, r3
 80014a6:	f004 fbef 	bl	8005c88 <HAL_TIM_IC_ConfigChannel>
 80014aa:	1e03      	subs	r3, r0, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 80014ae:	f000 fa07 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b008      	add	sp, #32
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	20000138 	.word	0x20000138
 80014c0:	40012c00 	.word	0x40012c00
 80014c4:	0000ffff 	.word	0x0000ffff

080014c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ce:	231c      	movs	r3, #28
 80014d0:	18fb      	adds	r3, r7, r3
 80014d2:	0018      	movs	r0, r3
 80014d4:	230c      	movs	r3, #12
 80014d6:	001a      	movs	r2, r3
 80014d8:	2100      	movs	r1, #0
 80014da:	f006 fbd9 	bl	8007c90 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014de:	003b      	movs	r3, r7
 80014e0:	0018      	movs	r0, r3
 80014e2:	231c      	movs	r3, #28
 80014e4:	001a      	movs	r2, r3
 80014e6:	2100      	movs	r1, #0
 80014e8:	f006 fbd2 	bl	8007c90 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014ec:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <MX_TIM3_Init+0xe0>)
 80014ee:	4a2f      	ldr	r2, [pc, #188]	; (80015ac <MX_TIM3_Init+0xe4>)
 80014f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014f2:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <MX_TIM3_Init+0xe0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80014f8:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <MX_TIM3_Init+0xe0>)
 80014fa:	2240      	movs	r2, #64	; 0x40
 80014fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1024-1;
 80014fe:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <MX_TIM3_Init+0xe0>)
 8001500:	4a2b      	ldr	r2, [pc, #172]	; (80015b0 <MX_TIM3_Init+0xe8>)
 8001502:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001504:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <MX_TIM3_Init+0xe0>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150a:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <MX_TIM3_Init+0xe0>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001510:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <MX_TIM3_Init+0xe0>)
 8001512:	0018      	movs	r0, r3
 8001514:	f003 fbe8 	bl	8004ce8 <HAL_TIM_PWM_Init>
 8001518:	1e03      	subs	r3, r0, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800151c:	f000 f9d0 	bl	80018c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001520:	211c      	movs	r1, #28
 8001522:	187b      	adds	r3, r7, r1
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001528:	187b      	adds	r3, r7, r1
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800152e:	187a      	adds	r2, r7, r1
 8001530:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <MX_TIM3_Init+0xe0>)
 8001532:	0011      	movs	r1, r2
 8001534:	0018      	movs	r0, r3
 8001536:	f005 fb67 	bl	8006c08 <HAL_TIMEx_MasterConfigSynchronization>
 800153a:	1e03      	subs	r3, r0, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800153e:	f000 f9bf 	bl	80018c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001542:	003b      	movs	r3, r7
 8001544:	2260      	movs	r2, #96	; 0x60
 8001546:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001548:	003b      	movs	r3, r7
 800154a:	2200      	movs	r2, #0
 800154c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800154e:	003b      	movs	r3, r7
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001554:	003b      	movs	r3, r7
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800155a:	0039      	movs	r1, r7
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <MX_TIM3_Init+0xe0>)
 800155e:	2204      	movs	r2, #4
 8001560:	0018      	movs	r0, r3
 8001562:	f004 fc35 	bl	8005dd0 <HAL_TIM_PWM_ConfigChannel>
 8001566:	1e03      	subs	r3, r0, #0
 8001568:	d001      	beq.n	800156e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800156a:	f000 f9a9 	bl	80018c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800156e:	0039      	movs	r1, r7
 8001570:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <MX_TIM3_Init+0xe0>)
 8001572:	2208      	movs	r2, #8
 8001574:	0018      	movs	r0, r3
 8001576:	f004 fc2b 	bl	8005dd0 <HAL_TIM_PWM_ConfigChannel>
 800157a:	1e03      	subs	r3, r0, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800157e:	f000 f99f 	bl	80018c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001582:	0039      	movs	r1, r7
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <MX_TIM3_Init+0xe0>)
 8001586:	220c      	movs	r2, #12
 8001588:	0018      	movs	r0, r3
 800158a:	f004 fc21 	bl	8005dd0 <HAL_TIM_PWM_ConfigChannel>
 800158e:	1e03      	subs	r3, r0, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8001592:	f000 f995 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <MX_TIM3_Init+0xe0>)
 8001598:	0018      	movs	r0, r3
 800159a:	f000 fb95 	bl	8001cc8 <HAL_TIM_MspPostInit>

}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b00a      	add	sp, #40	; 0x28
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	20000184 	.word	0x20000184
 80015ac:	40000400 	.word	0x40000400
 80015b0:	000003ff 	.word	0x000003ff

080015b4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	0018      	movs	r0, r3
 80015be:	230c      	movs	r3, #12
 80015c0:	001a      	movs	r2, r3
 80015c2:	2100      	movs	r1, #0
 80015c4:	f006 fb64 	bl	8007c90 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <MX_TIM7_Init+0x6c>)
 80015ca:	4a16      	ldr	r2, [pc, #88]	; (8001624 <MX_TIM7_Init+0x70>)
 80015cc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <MX_TIM7_Init+0x6c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <MX_TIM7_Init+0x6c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_TIM7_Init+0x6c>)
 80015dc:	4a12      	ldr	r2, [pc, #72]	; (8001628 <MX_TIM7_Init+0x74>)
 80015de:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <MX_TIM7_Init+0x6c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MX_TIM7_Init+0x6c>)
 80015e8:	0018      	movs	r0, r3
 80015ea:	f003 f94d 	bl	8004888 <HAL_TIM_Base_Init>
 80015ee:	1e03      	subs	r3, r0, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80015f2:	f000 f965 	bl	80018c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001602:	1d3a      	adds	r2, r7, #4
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_TIM7_Init+0x6c>)
 8001606:	0011      	movs	r1, r2
 8001608:	0018      	movs	r0, r3
 800160a:	f005 fafd 	bl	8006c08 <HAL_TIMEx_MasterConfigSynchronization>
 800160e:	1e03      	subs	r3, r0, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8001612:	f000 f955 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	46bd      	mov	sp, r7
 800161a:	b004      	add	sp, #16
 800161c:	bd80      	pop	{r7, pc}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	200001d0 	.word	0x200001d0
 8001624:	40001400 	.word	0x40001400
 8001628:	0000ffff 	.word	0x0000ffff

0800162c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b094      	sub	sp, #80	; 0x50
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001632:	2334      	movs	r3, #52	; 0x34
 8001634:	18fb      	adds	r3, r7, r3
 8001636:	0018      	movs	r0, r3
 8001638:	231c      	movs	r3, #28
 800163a:	001a      	movs	r2, r3
 800163c:	2100      	movs	r1, #0
 800163e:	f006 fb27 	bl	8007c90 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001642:	003b      	movs	r3, r7
 8001644:	0018      	movs	r0, r3
 8001646:	2334      	movs	r3, #52	; 0x34
 8001648:	001a      	movs	r2, r3
 800164a:	2100      	movs	r1, #0
 800164c:	f006 fb20 	bl	8007c90 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001650:	4b36      	ldr	r3, [pc, #216]	; (800172c <MX_TIM17_Init+0x100>)
 8001652:	4a37      	ldr	r2, [pc, #220]	; (8001730 <MX_TIM17_Init+0x104>)
 8001654:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64000;
 8001656:	4b35      	ldr	r3, [pc, #212]	; (800172c <MX_TIM17_Init+0x100>)
 8001658:	22fa      	movs	r2, #250	; 0xfa
 800165a:	0212      	lsls	r2, r2, #8
 800165c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165e:	4b33      	ldr	r3, [pc, #204]	; (800172c <MX_TIM17_Init+0x100>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 300;
 8001664:	4b31      	ldr	r3, [pc, #196]	; (800172c <MX_TIM17_Init+0x100>)
 8001666:	2296      	movs	r2, #150	; 0x96
 8001668:	0052      	lsls	r2, r2, #1
 800166a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166c:	4b2f      	ldr	r3, [pc, #188]	; (800172c <MX_TIM17_Init+0x100>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001672:	4b2e      	ldr	r3, [pc, #184]	; (800172c <MX_TIM17_Init+0x100>)
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001678:	4b2c      	ldr	r3, [pc, #176]	; (800172c <MX_TIM17_Init+0x100>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800167e:	4b2b      	ldr	r3, [pc, #172]	; (800172c <MX_TIM17_Init+0x100>)
 8001680:	0018      	movs	r0, r3
 8001682:	f003 f901 	bl	8004888 <HAL_TIM_Base_Init>
 8001686:	1e03      	subs	r3, r0, #0
 8001688:	d001      	beq.n	800168e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800168a:	f000 f919 	bl	80018c0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 800168e:	4b27      	ldr	r3, [pc, #156]	; (800172c <MX_TIM17_Init+0x100>)
 8001690:	0018      	movs	r0, r3
 8001692:	f003 f99f 	bl	80049d4 <HAL_TIM_OC_Init>
 8001696:	1e03      	subs	r3, r0, #0
 8001698:	d001      	beq.n	800169e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800169a:	f000 f911 	bl	80018c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800169e:	2134      	movs	r1, #52	; 0x34
 80016a0:	187b      	adds	r3, r7, r1
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80016a6:	187b      	adds	r3, r7, r1
 80016a8:	2200      	movs	r2, #0
 80016aa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ac:	187b      	adds	r3, r7, r1
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016b2:	187b      	adds	r3, r7, r1
 80016b4:	2200      	movs	r2, #0
 80016b6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016be:	187b      	adds	r3, r7, r1
 80016c0:	2200      	movs	r2, #0
 80016c2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	2200      	movs	r2, #0
 80016c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ca:	1879      	adds	r1, r7, r1
 80016cc:	4b17      	ldr	r3, [pc, #92]	; (800172c <MX_TIM17_Init+0x100>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	0018      	movs	r0, r3
 80016d2:	f004 fa79 	bl	8005bc8 <HAL_TIM_OC_ConfigChannel>
 80016d6:	1e03      	subs	r3, r0, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM17_Init+0xb2>
  {
    Error_Handler();
 80016da:	f000 f8f1 	bl	80018c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016de:	003b      	movs	r3, r7
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016e4:	003b      	movs	r3, r7
 80016e6:	2200      	movs	r2, #0
 80016e8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016ea:	003b      	movs	r3, r7
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016f0:	003b      	movs	r3, r7
 80016f2:	2200      	movs	r2, #0
 80016f4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016f6:	003b      	movs	r3, r7
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016fc:	003b      	movs	r3, r7
 80016fe:	2280      	movs	r2, #128	; 0x80
 8001700:	0192      	lsls	r2, r2, #6
 8001702:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001704:	003b      	movs	r3, r7
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800170a:	003b      	movs	r3, r7
 800170c:	2200      	movs	r2, #0
 800170e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001710:	003a      	movs	r2, r7
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_TIM17_Init+0x100>)
 8001714:	0011      	movs	r1, r2
 8001716:	0018      	movs	r0, r3
 8001718:	f005 fade 	bl	8006cd8 <HAL_TIMEx_ConfigBreakDeadTime>
 800171c:	1e03      	subs	r3, r0, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM17_Init+0xf8>
  {
    Error_Handler();
 8001720:	f000 f8ce 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	b014      	add	sp, #80	; 0x50
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000021c 	.word	0x2000021c
 8001730:	40014800 	.word	0x40014800

08001734 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_DMA_Init+0x38>)
 800173c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <MX_DMA_Init+0x38>)
 8001740:	2101      	movs	r1, #1
 8001742:	430a      	orrs	r2, r1
 8001744:	639a      	str	r2, [r3, #56]	; 0x38
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_DMA_Init+0x38>)
 8001748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174a:	2201      	movs	r2, #1
 800174c:	4013      	ands	r3, r2
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2103      	movs	r1, #3
 8001756:	2009      	movs	r0, #9
 8001758:	f001 fc50 	bl	8002ffc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800175c:	2009      	movs	r0, #9
 800175e:	f001 fc62 	bl	8003026 <HAL_NVIC_EnableIRQ>

}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	b002      	add	sp, #8
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	40021000 	.word	0x40021000

08001770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001776:	240c      	movs	r4, #12
 8001778:	193b      	adds	r3, r7, r4
 800177a:	0018      	movs	r0, r3
 800177c:	2314      	movs	r3, #20
 800177e:	001a      	movs	r2, r3
 8001780:	2100      	movs	r1, #0
 8001782:	f006 fa85 	bl	8007c90 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001786:	4b4b      	ldr	r3, [pc, #300]	; (80018b4 <MX_GPIO_Init+0x144>)
 8001788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800178a:	4b4a      	ldr	r3, [pc, #296]	; (80018b4 <MX_GPIO_Init+0x144>)
 800178c:	2102      	movs	r1, #2
 800178e:	430a      	orrs	r2, r1
 8001790:	635a      	str	r2, [r3, #52]	; 0x34
 8001792:	4b48      	ldr	r3, [pc, #288]	; (80018b4 <MX_GPIO_Init+0x144>)
 8001794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001796:	2202      	movs	r2, #2
 8001798:	4013      	ands	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179e:	4b45      	ldr	r3, [pc, #276]	; (80018b4 <MX_GPIO_Init+0x144>)
 80017a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017a2:	4b44      	ldr	r3, [pc, #272]	; (80018b4 <MX_GPIO_Init+0x144>)
 80017a4:	2104      	movs	r1, #4
 80017a6:	430a      	orrs	r2, r1
 80017a8:	635a      	str	r2, [r3, #52]	; 0x34
 80017aa:	4b42      	ldr	r3, [pc, #264]	; (80018b4 <MX_GPIO_Init+0x144>)
 80017ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ae:	2204      	movs	r2, #4
 80017b0:	4013      	ands	r3, r2
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	4b3f      	ldr	r3, [pc, #252]	; (80018b4 <MX_GPIO_Init+0x144>)
 80017b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ba:	4b3e      	ldr	r3, [pc, #248]	; (80018b4 <MX_GPIO_Init+0x144>)
 80017bc:	2101      	movs	r1, #1
 80017be:	430a      	orrs	r2, r1
 80017c0:	635a      	str	r2, [r3, #52]	; 0x34
 80017c2:	4b3c      	ldr	r3, [pc, #240]	; (80018b4 <MX_GPIO_Init+0x144>)
 80017c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c6:	2201      	movs	r2, #1
 80017c8:	4013      	ands	r3, r2
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OD_C_Pin|OD_B_Pin|OD_A_Pin, GPIO_PIN_RESET);
 80017ce:	23a0      	movs	r3, #160	; 0xa0
 80017d0:	05db      	lsls	r3, r3, #23
 80017d2:	2200      	movs	r2, #0
 80017d4:	2170      	movs	r1, #112	; 0x70
 80017d6:	0018      	movs	r0, r3
 80017d8:	f002 f9e6 	bl	8003ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80017dc:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <MX_GPIO_Init+0x148>)
 80017de:	2200      	movs	r2, #0
 80017e0:	2110      	movs	r1, #16
 80017e2:	0018      	movs	r0, r3
 80017e4:	f002 f9e0 	bl	8003ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ZC_A_Pin */
  GPIO_InitStruct.Pin = ZC_A_Pin;
 80017e8:	193b      	adds	r3, r7, r4
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	0092      	lsls	r2, r2, #2
 80017ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017f0:	193b      	adds	r3, r7, r4
 80017f2:	2284      	movs	r2, #132	; 0x84
 80017f4:	0392      	lsls	r2, r2, #14
 80017f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f8:	193b      	adds	r3, r7, r4
 80017fa:	2201      	movs	r2, #1
 80017fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ZC_A_GPIO_Port, &GPIO_InitStruct);
 80017fe:	193b      	adds	r3, r7, r4
 8001800:	4a2d      	ldr	r2, [pc, #180]	; (80018b8 <MX_GPIO_Init+0x148>)
 8001802:	0019      	movs	r1, r3
 8001804:	0010      	movs	r0, r2
 8001806:	f002 f86b 	bl	80038e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ZC_C_Pin ZC_B_Pin */
  GPIO_InitStruct.Pin = ZC_C_Pin|ZC_B_Pin;
 800180a:	0021      	movs	r1, r4
 800180c:	187b      	adds	r3, r7, r1
 800180e:	22c0      	movs	r2, #192	; 0xc0
 8001810:	0212      	lsls	r2, r2, #8
 8001812:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001814:	187b      	adds	r3, r7, r1
 8001816:	2284      	movs	r2, #132	; 0x84
 8001818:	0392      	lsls	r2, r2, #14
 800181a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800181c:	000c      	movs	r4, r1
 800181e:	193b      	adds	r3, r7, r4
 8001820:	2201      	movs	r2, #1
 8001822:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001824:	193b      	adds	r3, r7, r4
 8001826:	4a25      	ldr	r2, [pc, #148]	; (80018bc <MX_GPIO_Init+0x14c>)
 8001828:	0019      	movs	r1, r3
 800182a:	0010      	movs	r0, r2
 800182c:	f002 f858 	bl	80038e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : REV_Pin */
  GPIO_InitStruct.Pin = REV_Pin;
 8001830:	193b      	adds	r3, r7, r4
 8001832:	2202      	movs	r2, #2
 8001834:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001836:	193b      	adds	r3, r7, r4
 8001838:	2200      	movs	r2, #0
 800183a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800183c:	193b      	adds	r3, r7, r4
 800183e:	2201      	movs	r2, #1
 8001840:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(REV_GPIO_Port, &GPIO_InitStruct);
 8001842:	193a      	adds	r2, r7, r4
 8001844:	23a0      	movs	r3, #160	; 0xa0
 8001846:	05db      	lsls	r3, r3, #23
 8001848:	0011      	movs	r1, r2
 800184a:	0018      	movs	r0, r3
 800184c:	f002 f848 	bl	80038e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OD_C_Pin OD_B_Pin OD_A_Pin */
  GPIO_InitStruct.Pin = OD_C_Pin|OD_B_Pin|OD_A_Pin;
 8001850:	193b      	adds	r3, r7, r4
 8001852:	2270      	movs	r2, #112	; 0x70
 8001854:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	193b      	adds	r3, r7, r4
 8001858:	2201      	movs	r2, #1
 800185a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800185c:	193b      	adds	r3, r7, r4
 800185e:	2202      	movs	r2, #2
 8001860:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001862:	193b      	adds	r3, r7, r4
 8001864:	2201      	movs	r2, #1
 8001866:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001868:	193a      	adds	r2, r7, r4
 800186a:	23a0      	movs	r3, #160	; 0xa0
 800186c:	05db      	lsls	r3, r3, #23
 800186e:	0011      	movs	r1, r2
 8001870:	0018      	movs	r0, r3
 8001872:	f002 f835 	bl	80038e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001876:	0021      	movs	r1, r4
 8001878:	187b      	adds	r3, r7, r1
 800187a:	2210      	movs	r2, #16
 800187c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	187b      	adds	r3, r7, r1
 8001880:	2201      	movs	r2, #1
 8001882:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	187b      	adds	r3, r7, r1
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800188a:	187b      	adds	r3, r7, r1
 800188c:	2201      	movs	r2, #1
 800188e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001890:	187b      	adds	r3, r7, r1
 8001892:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <MX_GPIO_Init+0x148>)
 8001894:	0019      	movs	r1, r3
 8001896:	0010      	movs	r0, r2
 8001898:	f002 f822 	bl	80038e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	2007      	movs	r0, #7
 80018a2:	f001 fbab 	bl	8002ffc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80018a6:	2007      	movs	r0, #7
 80018a8:	f001 fbbd 	bl	8003026 <HAL_NVIC_EnableIRQ>

}
 80018ac:	46c0      	nop			; (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b009      	add	sp, #36	; 0x24
 80018b2:	bd90      	pop	{r4, r7, pc}
 80018b4:	40021000 	.word	0x40021000
 80018b8:	50000400 	.word	0x50000400
 80018bc:	50000800 	.word	0x50000800

080018c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c4:	b672      	cpsid	i
}
 80018c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <Error_Handler+0x8>
	...

080018cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_MspInit+0x4c>)
 80018d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_MspInit+0x4c>)
 80018d8:	2101      	movs	r1, #1
 80018da:	430a      	orrs	r2, r1
 80018dc:	641a      	str	r2, [r3, #64]	; 0x40
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_MspInit+0x4c>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	2201      	movs	r2, #1
 80018e4:	4013      	ands	r3, r2
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_MspInit+0x4c>)
 80018ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_MspInit+0x4c>)
 80018f0:	2180      	movs	r1, #128	; 0x80
 80018f2:	0549      	lsls	r1, r1, #21
 80018f4:	430a      	orrs	r2, r1
 80018f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <HAL_MspInit+0x4c>)
 80018fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	055b      	lsls	r3, r3, #21
 8001900:	4013      	ands	r3, r2
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001906:	23c0      	movs	r3, #192	; 0xc0
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	0018      	movs	r0, r3
 800190c:	f000 fb5a 	bl	8001fc4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001910:	46c0      	nop			; (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	b002      	add	sp, #8
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40021000 	.word	0x40021000

0800191c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b091      	sub	sp, #68	; 0x44
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	232c      	movs	r3, #44	; 0x2c
 8001926:	18fb      	adds	r3, r7, r3
 8001928:	0018      	movs	r0, r3
 800192a:	2314      	movs	r3, #20
 800192c:	001a      	movs	r2, r3
 800192e:	2100      	movs	r1, #0
 8001930:	f006 f9ae 	bl	8007c90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001934:	2410      	movs	r4, #16
 8001936:	193b      	adds	r3, r7, r4
 8001938:	0018      	movs	r0, r3
 800193a:	231c      	movs	r3, #28
 800193c:	001a      	movs	r2, r3
 800193e:	2100      	movs	r1, #0
 8001940:	f006 f9a6 	bl	8007c90 <memset>
  if(hadc->Instance==ADC1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a20      	ldr	r2, [pc, #128]	; (80019cc <HAL_ADC_MspInit+0xb0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d139      	bne.n	80019c2 <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800194e:	193b      	adds	r3, r7, r4
 8001950:	2280      	movs	r2, #128	; 0x80
 8001952:	01d2      	lsls	r2, r2, #7
 8001954:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001956:	193b      	adds	r3, r7, r4
 8001958:	2200      	movs	r2, #0
 800195a:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800195c:	193b      	adds	r3, r7, r4
 800195e:	0018      	movs	r0, r3
 8001960:	f002 fe5e 	bl	8004620 <HAL_RCCEx_PeriphCLKConfig>
 8001964:	1e03      	subs	r3, r0, #0
 8001966:	d001      	beq.n	800196c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001968:	f7ff ffaa 	bl	80018c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_ADC_MspInit+0xb4>)
 800196e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001970:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <HAL_ADC_MspInit+0xb4>)
 8001972:	2180      	movs	r1, #128	; 0x80
 8001974:	0349      	lsls	r1, r1, #13
 8001976:	430a      	orrs	r2, r1
 8001978:	641a      	str	r2, [r3, #64]	; 0x40
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_ADC_MspInit+0xb4>)
 800197c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	035b      	lsls	r3, r3, #13
 8001982:	4013      	ands	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <HAL_ADC_MspInit+0xb4>)
 800198a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800198c:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <HAL_ADC_MspInit+0xb4>)
 800198e:	2101      	movs	r1, #1
 8001990:	430a      	orrs	r2, r1
 8001992:	635a      	str	r2, [r3, #52]	; 0x34
 8001994:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <HAL_ADC_MspInit+0xb4>)
 8001996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001998:	2201      	movs	r2, #1
 800199a:	4013      	ands	r3, r2
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = BAT_VOLTS_Pin;
 80019a0:	212c      	movs	r1, #44	; 0x2c
 80019a2:	187b      	adds	r3, r7, r1
 80019a4:	2204      	movs	r2, #4
 80019a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019a8:	187b      	adds	r3, r7, r1
 80019aa:	2203      	movs	r2, #3
 80019ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	187b      	adds	r3, r7, r1
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BAT_VOLTS_GPIO_Port, &GPIO_InitStruct);
 80019b4:	187a      	adds	r2, r7, r1
 80019b6:	23a0      	movs	r3, #160	; 0xa0
 80019b8:	05db      	lsls	r3, r3, #23
 80019ba:	0011      	movs	r1, r2
 80019bc:	0018      	movs	r0, r3
 80019be:	f001 ff8f 	bl	80038e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b011      	add	sp, #68	; 0x44
 80019c8:	bd90      	pop	{r4, r7, pc}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	40012400 	.word	0x40012400
 80019d0:	40021000 	.word	0x40021000

080019d4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b08b      	sub	sp, #44	; 0x2c
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	2414      	movs	r4, #20
 80019de:	193b      	adds	r3, r7, r4
 80019e0:	0018      	movs	r0, r3
 80019e2:	2314      	movs	r3, #20
 80019e4:	001a      	movs	r2, r3
 80019e6:	2100      	movs	r1, #0
 80019e8:	f006 f952 	bl	8007c90 <memset>
  if(htim_ic->Instance==TIM1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a3b      	ldr	r2, [pc, #236]	; (8001ae0 <HAL_TIM_IC_MspInit+0x10c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d16f      	bne.n	8001ad6 <HAL_TIM_IC_MspInit+0x102>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019f6:	4b3b      	ldr	r3, [pc, #236]	; (8001ae4 <HAL_TIM_IC_MspInit+0x110>)
 80019f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019fa:	4b3a      	ldr	r3, [pc, #232]	; (8001ae4 <HAL_TIM_IC_MspInit+0x110>)
 80019fc:	2180      	movs	r1, #128	; 0x80
 80019fe:	0109      	lsls	r1, r1, #4
 8001a00:	430a      	orrs	r2, r1
 8001a02:	641a      	str	r2, [r3, #64]	; 0x40
 8001a04:	4b37      	ldr	r3, [pc, #220]	; (8001ae4 <HAL_TIM_IC_MspInit+0x110>)
 8001a06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	4b34      	ldr	r3, [pc, #208]	; (8001ae4 <HAL_TIM_IC_MspInit+0x110>)
 8001a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a16:	4b33      	ldr	r3, [pc, #204]	; (8001ae4 <HAL_TIM_IC_MspInit+0x110>)
 8001a18:	2102      	movs	r1, #2
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a1e:	4b31      	ldr	r3, [pc, #196]	; (8001ae4 <HAL_TIM_IC_MspInit+0x110>)
 8001a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a22:	2202      	movs	r2, #2
 8001a24:	4013      	ands	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Signal_Pin;
 8001a2a:	193b      	adds	r3, r7, r4
 8001a2c:	2208      	movs	r2, #8
 8001a2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a30:	193b      	adds	r3, r7, r4
 8001a32:	2202      	movs	r2, #2
 8001a34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	193b      	adds	r3, r7, r4
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	193b      	adds	r3, r7, r4
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a42:	193b      	adds	r3, r7, r4
 8001a44:	2201      	movs	r2, #1
 8001a46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Signal_GPIO_Port, &GPIO_InitStruct);
 8001a48:	193b      	adds	r3, r7, r4
 8001a4a:	4a27      	ldr	r2, [pc, #156]	; (8001ae8 <HAL_TIM_IC_MspInit+0x114>)
 8001a4c:	0019      	movs	r1, r3
 8001a4e:	0010      	movs	r0, r2
 8001a50:	f001 ff46 	bl	80038e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Proshot_Pin;
 8001a54:	0021      	movs	r1, r4
 8001a56:	187b      	adds	r3, r7, r1
 8001a58:	2240      	movs	r2, #64	; 0x40
 8001a5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	187b      	adds	r3, r7, r1
 8001a5e:	2202      	movs	r2, #2
 8001a60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a62:	187b      	adds	r3, r7, r1
 8001a64:	2201      	movs	r2, #1
 8001a66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	187b      	adds	r3, r7, r1
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a6e:	187b      	adds	r3, r7, r1
 8001a70:	2201      	movs	r2, #1
 8001a72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Proshot_GPIO_Port, &GPIO_InitStruct);
 8001a74:	187b      	adds	r3, r7, r1
 8001a76:	4a1c      	ldr	r2, [pc, #112]	; (8001ae8 <HAL_TIM_IC_MspInit+0x114>)
 8001a78:	0019      	movs	r1, r3
 8001a7a:	0010      	movs	r0, r2
 8001a7c:	f001 ff30 	bl	80038e0 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel1;
 8001a80:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <HAL_TIM_IC_MspInit+0x118>)
 8001a82:	4a1b      	ldr	r2, [pc, #108]	; (8001af0 <HAL_TIM_IC_MspInit+0x11c>)
 8001a84:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_TIM1_CH3;
 8001a86:	4b19      	ldr	r3, [pc, #100]	; (8001aec <HAL_TIM_IC_MspInit+0x118>)
 8001a88:	2216      	movs	r2, #22
 8001a8a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a8c:	4b17      	ldr	r3, [pc, #92]	; (8001aec <HAL_TIM_IC_MspInit+0x118>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a92:	4b16      	ldr	r3, [pc, #88]	; (8001aec <HAL_TIM_IC_MspInit+0x118>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001a98:	4b14      	ldr	r3, [pc, #80]	; (8001aec <HAL_TIM_IC_MspInit+0x118>)
 8001a9a:	2280      	movs	r2, #128	; 0x80
 8001a9c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a9e:	4b13      	ldr	r3, [pc, #76]	; (8001aec <HAL_TIM_IC_MspInit+0x118>)
 8001aa0:	2280      	movs	r2, #128	; 0x80
 8001aa2:	0052      	lsls	r2, r2, #1
 8001aa4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_TIM_IC_MspInit+0x118>)
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	00d2      	lsls	r2, r2, #3
 8001aac:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8001aae:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <HAL_TIM_IC_MspInit+0x118>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_TIM_IC_MspInit+0x118>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8001aba:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <HAL_TIM_IC_MspInit+0x118>)
 8001abc:	0018      	movs	r0, r3
 8001abe:	f001 facf 	bl	8003060 <HAL_DMA_Init>
 8001ac2:	1e03      	subs	r3, r0, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_TIM_IC_MspInit+0xf6>
    {
      Error_Handler();
 8001ac6:	f7ff fefb 	bl	80018c0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a07      	ldr	r2, [pc, #28]	; (8001aec <HAL_TIM_IC_MspInit+0x118>)
 8001ace:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_TIM_IC_MspInit+0x118>)
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b00b      	add	sp, #44	; 0x2c
 8001adc:	bd90      	pop	{r4, r7, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	40012c00 	.word	0x40012c00
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	50000400 	.word	0x50000400
 8001aec:	20000268 	.word	0x20000268
 8001af0:	40020008 	.word	0x40020008

08001af4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a4b      	ldr	r2, [pc, #300]	; (8001c30 <HAL_TIM_PWM_MspInit+0x13c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d000      	beq.n	8001b08 <HAL_TIM_PWM_MspInit+0x14>
 8001b06:	e08f      	b.n	8001c28 <HAL_TIM_PWM_MspInit+0x134>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b08:	4b4a      	ldr	r3, [pc, #296]	; (8001c34 <HAL_TIM_PWM_MspInit+0x140>)
 8001b0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b0c:	4b49      	ldr	r3, [pc, #292]	; (8001c34 <HAL_TIM_PWM_MspInit+0x140>)
 8001b0e:	2102      	movs	r1, #2
 8001b10:	430a      	orrs	r2, r1
 8001b12:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b14:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <HAL_TIM_PWM_MspInit+0x140>)
 8001b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b18:	2202      	movs	r2, #2
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Channel2;
 8001b20:	4b45      	ldr	r3, [pc, #276]	; (8001c38 <HAL_TIM_PWM_MspInit+0x144>)
 8001b22:	4a46      	ldr	r2, [pc, #280]	; (8001c3c <HAL_TIM_PWM_MspInit+0x148>)
 8001b24:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8001b26:	4b44      	ldr	r3, [pc, #272]	; (8001c38 <HAL_TIM_PWM_MspInit+0x144>)
 8001b28:	2221      	movs	r2, #33	; 0x21
 8001b2a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b2c:	4b42      	ldr	r3, [pc, #264]	; (8001c38 <HAL_TIM_PWM_MspInit+0x144>)
 8001b2e:	2210      	movs	r2, #16
 8001b30:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b32:	4b41      	ldr	r3, [pc, #260]	; (8001c38 <HAL_TIM_PWM_MspInit+0x144>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001b38:	4b3f      	ldr	r3, [pc, #252]	; (8001c38 <HAL_TIM_PWM_MspInit+0x144>)
 8001b3a:	2280      	movs	r2, #128	; 0x80
 8001b3c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b3e:	4b3e      	ldr	r3, [pc, #248]	; (8001c38 <HAL_TIM_PWM_MspInit+0x144>)
 8001b40:	2280      	movs	r2, #128	; 0x80
 8001b42:	0052      	lsls	r2, r2, #1
 8001b44:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b46:	4b3c      	ldr	r3, [pc, #240]	; (8001c38 <HAL_TIM_PWM_MspInit+0x144>)
 8001b48:	2280      	movs	r2, #128	; 0x80
 8001b4a:	00d2      	lsls	r2, r2, #3
 8001b4c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8001b4e:	4b3a      	ldr	r3, [pc, #232]	; (8001c38 <HAL_TIM_PWM_MspInit+0x144>)
 8001b50:	2220      	movs	r2, #32
 8001b52:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b54:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <HAL_TIM_PWM_MspInit+0x144>)
 8001b56:	22c0      	movs	r2, #192	; 0xc0
 8001b58:	0192      	lsls	r2, r2, #6
 8001b5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8001b5c:	4b36      	ldr	r3, [pc, #216]	; (8001c38 <HAL_TIM_PWM_MspInit+0x144>)
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f001 fa7e 	bl	8003060 <HAL_DMA_Init>
 8001b64:	1e03      	subs	r3, r0, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_TIM_PWM_MspInit+0x78>
    {
      Error_Handler();
 8001b68:	f7ff feaa 	bl	80018c0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a32      	ldr	r2, [pc, #200]	; (8001c38 <HAL_TIM_PWM_MspInit+0x144>)
 8001b70:	629a      	str	r2, [r3, #40]	; 0x28
 8001b72:	4b31      	ldr	r3, [pc, #196]	; (8001c38 <HAL_TIM_PWM_MspInit+0x144>)
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Channel3;
 8001b78:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <HAL_TIM_PWM_MspInit+0x14c>)
 8001b7a:	4a32      	ldr	r2, [pc, #200]	; (8001c44 <HAL_TIM_PWM_MspInit+0x150>)
 8001b7c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_TIM3_CH3;
 8001b7e:	4b30      	ldr	r3, [pc, #192]	; (8001c40 <HAL_TIM_PWM_MspInit+0x14c>)
 8001b80:	2222      	movs	r2, #34	; 0x22
 8001b82:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b84:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <HAL_TIM_PWM_MspInit+0x14c>)
 8001b86:	2210      	movs	r2, #16
 8001b88:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <HAL_TIM_PWM_MspInit+0x14c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001b90:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <HAL_TIM_PWM_MspInit+0x14c>)
 8001b92:	2280      	movs	r2, #128	; 0x80
 8001b94:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b96:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <HAL_TIM_PWM_MspInit+0x14c>)
 8001b98:	2280      	movs	r2, #128	; 0x80
 8001b9a:	0052      	lsls	r2, r2, #1
 8001b9c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b9e:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <HAL_TIM_PWM_MspInit+0x14c>)
 8001ba0:	2280      	movs	r2, #128	; 0x80
 8001ba2:	00d2      	lsls	r2, r2, #3
 8001ba4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 8001ba6:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <HAL_TIM_PWM_MspInit+0x14c>)
 8001ba8:	2220      	movs	r2, #32
 8001baa:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001bac:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <HAL_TIM_PWM_MspInit+0x14c>)
 8001bae:	22c0      	movs	r2, #192	; 0xc0
 8001bb0:	0192      	lsls	r2, r2, #6
 8001bb2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8001bb4:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <HAL_TIM_PWM_MspInit+0x14c>)
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f001 fa52 	bl	8003060 <HAL_DMA_Init>
 8001bbc:	1e03      	subs	r3, r0, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8001bc0:	f7ff fe7e 	bl	80018c0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a1e      	ldr	r2, [pc, #120]	; (8001c40 <HAL_TIM_PWM_MspInit+0x14c>)
 8001bc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bca:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <HAL_TIM_PWM_MspInit+0x14c>)
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM3_CH4 Init */
    hdma_tim3_ch4.Instance = DMA1_Channel4;
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <HAL_TIM_PWM_MspInit+0x154>)
 8001bd2:	4a1e      	ldr	r2, [pc, #120]	; (8001c4c <HAL_TIM_PWM_MspInit+0x158>)
 8001bd4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <HAL_TIM_PWM_MspInit+0x154>)
 8001bd8:	2223      	movs	r2, #35	; 0x23
 8001bda:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <HAL_TIM_PWM_MspInit+0x154>)
 8001bde:	2210      	movs	r2, #16
 8001be0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be2:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <HAL_TIM_PWM_MspInit+0x154>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001be8:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <HAL_TIM_PWM_MspInit+0x154>)
 8001bea:	2280      	movs	r2, #128	; 0x80
 8001bec:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bee:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <HAL_TIM_PWM_MspInit+0x154>)
 8001bf0:	2280      	movs	r2, #128	; 0x80
 8001bf2:	0052      	lsls	r2, r2, #1
 8001bf4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bf6:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <HAL_TIM_PWM_MspInit+0x154>)
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	00d2      	lsls	r2, r2, #3
 8001bfc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_CIRCULAR;
 8001bfe:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_TIM_PWM_MspInit+0x154>)
 8001c00:	2220      	movs	r2, #32
 8001c02:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c04:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <HAL_TIM_PWM_MspInit+0x154>)
 8001c06:	22c0      	movs	r2, #192	; 0xc0
 8001c08:	0192      	lsls	r2, r2, #6
 8001c0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <HAL_TIM_PWM_MspInit+0x154>)
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f001 fa26 	bl	8003060 <HAL_DMA_Init>
 8001c14:	1e03      	subs	r3, r0, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_TIM_PWM_MspInit+0x128>
    {
      Error_Handler();
 8001c18:	f7ff fe52 	bl	80018c0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <HAL_TIM_PWM_MspInit+0x154>)
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_TIM_PWM_MspInit+0x154>)
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c28:	46c0      	nop			; (mov r8, r8)
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b004      	add	sp, #16
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40000400 	.word	0x40000400
 8001c34:	40021000 	.word	0x40021000
 8001c38:	200002c4 	.word	0x200002c4
 8001c3c:	4002001c 	.word	0x4002001c
 8001c40:	20000320 	.word	0x20000320
 8001c44:	40020030 	.word	0x40020030
 8001c48:	2000037c 	.word	0x2000037c
 8001c4c:	40020044 	.word	0x40020044

08001c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a17      	ldr	r2, [pc, #92]	; (8001cbc <HAL_TIM_Base_MspInit+0x6c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d10c      	bne.n	8001c7c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c62:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <HAL_TIM_Base_MspInit+0x70>)
 8001c64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <HAL_TIM_Base_MspInit+0x70>)
 8001c68:	2120      	movs	r1, #32
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c6e:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <HAL_TIM_Base_MspInit+0x70>)
 8001c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c72:	2220      	movs	r2, #32
 8001c74:	4013      	ands	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001c7a:	e01a      	b.n	8001cb2 <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM17)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a10      	ldr	r2, [pc, #64]	; (8001cc4 <HAL_TIM_Base_MspInit+0x74>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d115      	bne.n	8001cb2 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001c86:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <HAL_TIM_Base_MspInit+0x70>)
 8001c88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <HAL_TIM_Base_MspInit+0x70>)
 8001c8c:	2180      	movs	r1, #128	; 0x80
 8001c8e:	02c9      	lsls	r1, r1, #11
 8001c90:	430a      	orrs	r2, r1
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40
 8001c94:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <HAL_TIM_Base_MspInit+0x70>)
 8001c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	02db      	lsls	r3, r3, #11
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	2016      	movs	r0, #22
 8001ca8:	f001 f9a8 	bl	8002ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001cac:	2016      	movs	r0, #22
 8001cae:	f001 f9ba 	bl	8003026 <HAL_NVIC_EnableIRQ>
}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b004      	add	sp, #16
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	40001400 	.word	0x40001400
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40014800 	.word	0x40014800

08001cc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cc8:	b590      	push	{r4, r7, lr}
 8001cca:	b08b      	sub	sp, #44	; 0x2c
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	2414      	movs	r4, #20
 8001cd2:	193b      	adds	r3, r7, r4
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	2314      	movs	r3, #20
 8001cd8:	001a      	movs	r2, r3
 8001cda:	2100      	movs	r1, #0
 8001cdc:	f005 ffd8 	bl	8007c90 <memset>
  if(htim->Instance==TIM3)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a25      	ldr	r2, [pc, #148]	; (8001d7c <HAL_TIM_MspPostInit+0xb4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d143      	bne.n	8001d72 <HAL_TIM_MspPostInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <HAL_TIM_MspPostInit+0xb8>)
 8001cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cee:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <HAL_TIM_MspPostInit+0xb8>)
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8001cf6:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <HAL_TIM_MspPostInit+0xb8>)
 8001cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <HAL_TIM_MspPostInit+0xb8>)
 8001d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <HAL_TIM_MspPostInit+0xb8>)
 8001d08:	2102      	movs	r1, #2
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <HAL_TIM_MspPostInit+0xb8>)
 8001d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d12:	2202      	movs	r2, #2
 8001d14:	4013      	ands	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM_A_Pin;
 8001d1a:	193b      	adds	r3, r7, r4
 8001d1c:	2280      	movs	r2, #128	; 0x80
 8001d1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	193b      	adds	r3, r7, r4
 8001d22:	2202      	movs	r2, #2
 8001d24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d26:	193b      	adds	r3, r7, r4
 8001d28:	2202      	movs	r2, #2
 8001d2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	193b      	adds	r3, r7, r4
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001d32:	193b      	adds	r3, r7, r4
 8001d34:	2201      	movs	r2, #1
 8001d36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_A_GPIO_Port, &GPIO_InitStruct);
 8001d38:	193a      	adds	r2, r7, r4
 8001d3a:	23a0      	movs	r3, #160	; 0xa0
 8001d3c:	05db      	lsls	r3, r3, #23
 8001d3e:	0011      	movs	r1, r2
 8001d40:	0018      	movs	r0, r3
 8001d42:	f001 fdcd 	bl	80038e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_B_Pin|PWM_C_Pin;
 8001d46:	0021      	movs	r1, r4
 8001d48:	187b      	adds	r3, r7, r1
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	187b      	adds	r3, r7, r1
 8001d50:	2202      	movs	r2, #2
 8001d52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d54:	187b      	adds	r3, r7, r1
 8001d56:	2202      	movs	r2, #2
 8001d58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	187b      	adds	r3, r7, r1
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001d60:	187b      	adds	r3, r7, r1
 8001d62:	2201      	movs	r2, #1
 8001d64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d66:	187b      	adds	r3, r7, r1
 8001d68:	4a06      	ldr	r2, [pc, #24]	; (8001d84 <HAL_TIM_MspPostInit+0xbc>)
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	0010      	movs	r0, r2
 8001d6e:	f001 fdb7 	bl	80038e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b00b      	add	sp, #44	; 0x2c
 8001d78:	bd90      	pop	{r4, r7, pc}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	40000400 	.word	0x40000400
 8001d80:	40021000 	.word	0x40021000
 8001d84:	50000400 	.word	0x50000400

08001d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <NMI_Handler+0x4>

08001d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d92:	e7fe      	b.n	8001d92 <HardFault_Handler+0x4>

08001d94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d98:	46c0      	nop			; (mov r8, r8)
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dac:	f000 f8ca 	bl	8001f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db0:	46c0      	nop			; (mov r8, r8)
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZC_A_Pin);
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f001 ff2a 	bl	8003c18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ZC_C_Pin);
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	01db      	lsls	r3, r3, #7
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f001 ff25 	bl	8003c18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ZC_B_Pin);
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f001 ff20 	bl	8003c18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001dd8:	46c0      	nop			; (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <DMA1_Channel1_IRQHandler+0x14>)
 8001de6:	0018      	movs	r0, r3
 8001de8:	f001 fab4 	bl	8003354 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dec:	46c0      	nop			; (mov r8, r8)
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	20000268 	.word	0x20000268

08001df8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <TIM17_IRQHandler+0x14>)
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f003 fdb0 	bl	8005964 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001e04:	46c0      	nop			; (mov r8, r8)
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	2000021c 	.word	0x2000021c

08001e10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e14:	46c0      	nop			; (mov r8, r8)
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e1c:	480d      	ldr	r0, [pc, #52]	; (8001e54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e1e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e20:	f7ff fff6 	bl	8001e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e24:	480c      	ldr	r0, [pc, #48]	; (8001e58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e26:	490d      	ldr	r1, [pc, #52]	; (8001e5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e28:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <LoopForever+0xe>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e2c:	e002      	b.n	8001e34 <LoopCopyDataInit>

08001e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e32:	3304      	adds	r3, #4

08001e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e38:	d3f9      	bcc.n	8001e2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e3c:	4c0a      	ldr	r4, [pc, #40]	; (8001e68 <LoopForever+0x16>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e40:	e001      	b.n	8001e46 <LoopFillZerobss>

08001e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e44:	3204      	adds	r2, #4

08001e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e48:	d3fb      	bcc.n	8001e42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e4a:	f005 fefd 	bl	8007c48 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001e4e:	f7ff f9f3 	bl	8001238 <main>

08001e52 <LoopForever>:

LoopForever:
  b LoopForever
 8001e52:	e7fe      	b.n	8001e52 <LoopForever>
  ldr   r0, =_estack
 8001e54:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e5c:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001e60:	08007ed8 	.word	0x08007ed8
  ldr r2, =_sbss
 8001e64:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001e68:	20000498 	.word	0x20000498

08001e6c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <ADC1_IRQHandler>
	...

08001e70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e76:	1dfb      	adds	r3, r7, #7
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_Init+0x3c>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <HAL_Init+0x3c>)
 8001e82:	2180      	movs	r1, #128	; 0x80
 8001e84:	0049      	lsls	r1, r1, #1
 8001e86:	430a      	orrs	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e8a:	2003      	movs	r0, #3
 8001e8c:	f000 f810 	bl	8001eb0 <HAL_InitTick>
 8001e90:	1e03      	subs	r3, r0, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001e94:	1dfb      	adds	r3, r7, #7
 8001e96:	2201      	movs	r2, #1
 8001e98:	701a      	strb	r2, [r3, #0]
 8001e9a:	e001      	b.n	8001ea0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001e9c:	f7ff fd16 	bl	80018cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ea0:	1dfb      	adds	r3, r7, #7
 8001ea2:	781b      	ldrb	r3, [r3, #0]
}
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b002      	add	sp, #8
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40022000 	.word	0x40022000

08001eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001eb8:	230f      	movs	r3, #15
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <HAL_InitTick+0x88>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d02b      	beq.n	8001f20 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001ec8:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <HAL_InitTick+0x8c>)
 8001eca:	681c      	ldr	r4, [r3, #0]
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_InitTick+0x88>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	23fa      	movs	r3, #250	; 0xfa
 8001ed4:	0098      	lsls	r0, r3, #2
 8001ed6:	f7fe f913 	bl	8000100 <__udivsi3>
 8001eda:	0003      	movs	r3, r0
 8001edc:	0019      	movs	r1, r3
 8001ede:	0020      	movs	r0, r4
 8001ee0:	f7fe f90e 	bl	8000100 <__udivsi3>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f001 f8ad 	bl	8003046 <HAL_SYSTICK_Config>
 8001eec:	1e03      	subs	r3, r0, #0
 8001eee:	d112      	bne.n	8001f16 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d80a      	bhi.n	8001f0c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	2301      	movs	r3, #1
 8001efa:	425b      	negs	r3, r3
 8001efc:	2200      	movs	r2, #0
 8001efe:	0018      	movs	r0, r3
 8001f00:	f001 f87c 	bl	8002ffc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <HAL_InitTick+0x90>)
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	e00d      	b.n	8001f28 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001f0c:	230f      	movs	r3, #15
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	2201      	movs	r2, #1
 8001f12:	701a      	strb	r2, [r3, #0]
 8001f14:	e008      	b.n	8001f28 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f16:	230f      	movs	r3, #15
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
 8001f1e:	e003      	b.n	8001f28 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f20:	230f      	movs	r3, #15
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001f28:	230f      	movs	r3, #15
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	781b      	ldrb	r3, [r3, #0]
}
 8001f2e:	0018      	movs	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b005      	add	sp, #20
 8001f34:	bd90      	pop	{r4, r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	20000008 	.word	0x20000008
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	20000004 	.word	0x20000004

08001f44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_IncTick+0x1c>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	001a      	movs	r2, r3
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_IncTick+0x20>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	18d2      	adds	r2, r2, r3
 8001f54:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <HAL_IncTick+0x20>)
 8001f56:	601a      	str	r2, [r3, #0]
}
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	20000008 	.word	0x20000008
 8001f64:	200003d8 	.word	0x200003d8

08001f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f6c:	4b02      	ldr	r3, [pc, #8]	; (8001f78 <HAL_GetTick+0x10>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	200003d8 	.word	0x200003d8

08001f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f84:	f7ff fff0 	bl	8001f68 <HAL_GetTick>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	3301      	adds	r3, #1
 8001f94:	d005      	beq.n	8001fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_Delay+0x44>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	001a      	movs	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	189b      	adds	r3, r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	f7ff ffe0 	bl	8001f68 <HAL_GetTick>
 8001fa8:	0002      	movs	r2, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d8f7      	bhi.n	8001fa4 <HAL_Delay+0x28>
  {
  }
}
 8001fb4:	46c0      	nop			; (mov r8, r8)
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	b004      	add	sp, #16
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	20000008 	.word	0x20000008

08001fc4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a06      	ldr	r2, [pc, #24]	; (8001fec <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	0019      	movs	r1, r3
 8001fd6:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]
}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b002      	add	sp, #8
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	fffff9ff 	.word	0xfffff9ff

08001ff0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a05      	ldr	r2, [pc, #20]	; (8002014 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002000:	401a      	ands	r2, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	601a      	str	r2, [r3, #0]
}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	46bd      	mov	sp, r7
 800200e:	b002      	add	sp, #8
 8002010:	bd80      	pop	{r7, pc}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	fe3fffff 	.word	0xfe3fffff

08002018 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	23e0      	movs	r3, #224	; 0xe0
 8002026:	045b      	lsls	r3, r3, #17
 8002028:	4013      	ands	r3, r2
}
 800202a:	0018      	movs	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	b002      	add	sp, #8
 8002030:	bd80      	pop	{r7, pc}

08002032 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	2104      	movs	r1, #4
 8002046:	400a      	ands	r2, r1
 8002048:	2107      	movs	r1, #7
 800204a:	4091      	lsls	r1, r2
 800204c:	000a      	movs	r2, r1
 800204e:	43d2      	mvns	r2, r2
 8002050:	401a      	ands	r2, r3
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2104      	movs	r1, #4
 8002056:	400b      	ands	r3, r1
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4099      	lsls	r1, r3
 800205c:	000b      	movs	r3, r1
 800205e:	431a      	orrs	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002064:	46c0      	nop			; (mov r8, r8)
 8002066:	46bd      	mov	sp, r7
 8002068:	b004      	add	sp, #16
 800206a:	bd80      	pop	{r7, pc}

0800206c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	2104      	movs	r1, #4
 800207e:	400a      	ands	r2, r1
 8002080:	2107      	movs	r1, #7
 8002082:	4091      	lsls	r1, r2
 8002084:	000a      	movs	r2, r1
 8002086:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2104      	movs	r1, #4
 800208c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800208e:	40da      	lsrs	r2, r3
 8002090:	0013      	movs	r3, r2
}
 8002092:	0018      	movs	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	b002      	add	sp, #8
 8002098:	bd80      	pop	{r7, pc}

0800209a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	211f      	movs	r1, #31
 80020ae:	400a      	ands	r2, r1
 80020b0:	210f      	movs	r1, #15
 80020b2:	4091      	lsls	r1, r2
 80020b4:	000a      	movs	r2, r1
 80020b6:	43d2      	mvns	r2, r2
 80020b8:	401a      	ands	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	0e9b      	lsrs	r3, r3, #26
 80020be:	210f      	movs	r1, #15
 80020c0:	4019      	ands	r1, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	201f      	movs	r0, #31
 80020c6:	4003      	ands	r3, r0
 80020c8:	4099      	lsls	r1, r3
 80020ca:	000b      	movs	r3, r1
 80020cc:	431a      	orrs	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b004      	add	sp, #16
 80020d8:	bd80      	pop	{r7, pc}

080020da <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	035b      	lsls	r3, r3, #13
 80020ec:	0b5b      	lsrs	r3, r3, #13
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020f4:	46c0      	nop			; (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b002      	add	sp, #8
 80020fa:	bd80      	pop	{r7, pc}

080020fc <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	0352      	lsls	r2, r2, #13
 800210e:	0b52      	lsrs	r2, r2, #13
 8002110:	43d2      	mvns	r2, r2
 8002112:	401a      	ands	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002118:	46c0      	nop			; (mov r8, r8)
 800211a:	46bd      	mov	sp, r7
 800211c:	b002      	add	sp, #8
 800211e:	bd80      	pop	{r7, pc}

08002120 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	0212      	lsls	r2, r2, #8
 8002134:	43d2      	mvns	r2, r2
 8002136:	401a      	ands	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	400b      	ands	r3, r1
 8002140:	4904      	ldr	r1, [pc, #16]	; (8002154 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002142:	400b      	ands	r3, r1
 8002144:	431a      	orrs	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	46bd      	mov	sp, r7
 800214e:	b004      	add	sp, #16
 8002150:	bd80      	pop	{r7, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	07ffff00 	.word	0x07ffff00

08002158 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a05      	ldr	r2, [pc, #20]	; (800217c <LL_ADC_EnableInternalRegulator+0x24>)
 8002166:	4013      	ands	r3, r2
 8002168:	2280      	movs	r2, #128	; 0x80
 800216a:	0552      	lsls	r2, r2, #21
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	46bd      	mov	sp, r7
 8002176:	b002      	add	sp, #8
 8002178:	bd80      	pop	{r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	6fffffe8 	.word	0x6fffffe8

08002180 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	055b      	lsls	r3, r3, #21
 8002190:	401a      	ands	r2, r3
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	055b      	lsls	r3, r3, #21
 8002196:	429a      	cmp	r2, r3
 8002198:	d101      	bne.n	800219e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800219e:	2300      	movs	r3, #0
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b002      	add	sp, #8
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <LL_ADC_Enable+0x20>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	2201      	movs	r2, #1
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021c0:	46c0      	nop			; (mov r8, r8)
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b002      	add	sp, #8
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	7fffffe8 	.word	0x7fffffe8

080021cc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	4a04      	ldr	r2, [pc, #16]	; (80021ec <LL_ADC_Disable+0x20>)
 80021da:	4013      	ands	r3, r2
 80021dc:	2202      	movs	r2, #2
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80021e4:	46c0      	nop			; (mov r8, r8)
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b002      	add	sp, #8
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	7fffffe8 	.word	0x7fffffe8

080021f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2201      	movs	r2, #1
 80021fe:	4013      	ands	r3, r2
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <LL_ADC_IsEnabled+0x18>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <LL_ADC_IsEnabled+0x1a>
 8002208:	2300      	movs	r3, #0
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	b002      	add	sp, #8
 8002210:	bd80      	pop	{r7, pc}

08002212 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2202      	movs	r2, #2
 8002220:	4013      	ands	r3, r2
 8002222:	2b02      	cmp	r3, #2
 8002224:	d101      	bne.n	800222a <LL_ADC_IsDisableOngoing+0x18>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <LL_ADC_IsDisableOngoing+0x1a>
 800222a:	2300      	movs	r3, #0
}
 800222c:	0018      	movs	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	b002      	add	sp, #8
 8002232:	bd80      	pop	{r7, pc}

08002234 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4a04      	ldr	r2, [pc, #16]	; (8002254 <LL_ADC_REG_StartConversion+0x20>)
 8002242:	4013      	ands	r3, r2
 8002244:	2204      	movs	r2, #4
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800224c:	46c0      	nop			; (mov r8, r8)
 800224e:	46bd      	mov	sp, r7
 8002250:	b002      	add	sp, #8
 8002252:	bd80      	pop	{r7, pc}
 8002254:	7fffffe8 	.word	0x7fffffe8

08002258 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2204      	movs	r2, #4
 8002266:	4013      	ands	r3, r2
 8002268:	2b04      	cmp	r3, #4
 800226a:	d101      	bne.n	8002270 <LL_ADC_REG_IsConversionOngoing+0x18>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002270:	2300      	movs	r3, #0
}
 8002272:	0018      	movs	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	b002      	add	sp, #8
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002284:	231f      	movs	r3, #31
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800228c:	2300      	movs	r3, #0
 800228e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e17f      	b.n	80025a2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10a      	bne.n	80022c0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	0018      	movs	r0, r3
 80022ae:	f7ff fb35 	bl	800191c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2254      	movs	r2, #84	; 0x54
 80022bc:	2100      	movs	r1, #0
 80022be:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f7ff ff5b 	bl	8002180 <LL_ADC_IsInternalRegulatorEnabled>
 80022ca:	1e03      	subs	r3, r0, #0
 80022cc:	d115      	bne.n	80022fa <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	0018      	movs	r0, r3
 80022d4:	f7ff ff40 	bl	8002158 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022d8:	4bb4      	ldr	r3, [pc, #720]	; (80025ac <HAL_ADC_Init+0x330>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	49b4      	ldr	r1, [pc, #720]	; (80025b0 <HAL_ADC_Init+0x334>)
 80022de:	0018      	movs	r0, r3
 80022e0:	f7fd ff0e 	bl	8000100 <__udivsi3>
 80022e4:	0003      	movs	r3, r0
 80022e6:	3301      	adds	r3, #1
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022ec:	e002      	b.n	80022f4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f9      	bne.n	80022ee <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	0018      	movs	r0, r3
 8002300:	f7ff ff3e 	bl	8002180 <LL_ADC_IsInternalRegulatorEnabled>
 8002304:	1e03      	subs	r3, r0, #0
 8002306:	d10f      	bne.n	8002328 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230c:	2210      	movs	r2, #16
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002318:	2201      	movs	r2, #1
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002320:	231f      	movs	r3, #31
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	0018      	movs	r0, r3
 800232e:	f7ff ff93 	bl	8002258 <LL_ADC_REG_IsConversionOngoing>
 8002332:	0003      	movs	r3, r0
 8002334:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	2210      	movs	r2, #16
 800233c:	4013      	ands	r3, r2
 800233e:	d000      	beq.n	8002342 <HAL_ADC_Init+0xc6>
 8002340:	e122      	b.n	8002588 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d000      	beq.n	800234a <HAL_ADC_Init+0xce>
 8002348:	e11e      	b.n	8002588 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	4a99      	ldr	r2, [pc, #612]	; (80025b4 <HAL_ADC_Init+0x338>)
 8002350:	4013      	ands	r3, r2
 8002352:	2202      	movs	r2, #2
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	0018      	movs	r0, r3
 8002360:	f7ff ff46 	bl	80021f0 <LL_ADC_IsEnabled>
 8002364:	1e03      	subs	r3, r0, #0
 8002366:	d000      	beq.n	800236a <HAL_ADC_Init+0xee>
 8002368:	e0ad      	b.n	80024c6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	7e1b      	ldrb	r3, [r3, #24]
 8002372:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002374:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	7e5b      	ldrb	r3, [r3, #25]
 800237a:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800237c:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	7e9b      	ldrb	r3, [r3, #26]
 8002382:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002384:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <HAL_ADC_Init+0x118>
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	015b      	lsls	r3, r3, #5
 8002392:	e000      	b.n	8002396 <HAL_ADC_Init+0x11a>
 8002394:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002396:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800239c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	da04      	bge.n	80023b0 <HAL_ADC_Init+0x134>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	085b      	lsrs	r3, r3, #1
 80023ae:	e001      	b.n	80023b4 <HAL_ADC_Init+0x138>
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80023b4:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	212c      	movs	r1, #44	; 0x2c
 80023ba:	5c5b      	ldrb	r3, [r3, r1]
 80023bc:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80023be:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2220      	movs	r2, #32
 80023ca:	5c9b      	ldrb	r3, [r3, r2]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d115      	bne.n	80023fc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	7e9b      	ldrb	r3, [r3, #26]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d105      	bne.n	80023e4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	2280      	movs	r2, #128	; 0x80
 80023dc:	0252      	lsls	r2, r2, #9
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
 80023e2:	e00b      	b.n	80023fc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e8:	2220      	movs	r2, #32
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f4:	2201      	movs	r2, #1
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002408:	23e0      	movs	r3, #224	; 0xe0
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002412:	4313      	orrs	r3, r2
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4a65      	ldr	r2, [pc, #404]	; (80025b8 <HAL_ADC_Init+0x33c>)
 8002422:	4013      	ands	r3, r2
 8002424:	0019      	movs	r1, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	430a      	orrs	r2, r1
 800242e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	0f9b      	lsrs	r3, r3, #30
 8002436:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800243c:	4313      	orrs	r3, r2
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4313      	orrs	r3, r2
 8002442:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	223c      	movs	r2, #60	; 0x3c
 8002448:	5c9b      	ldrb	r3, [r3, r2]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d111      	bne.n	8002472 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	0f9b      	lsrs	r3, r3, #30
 8002454:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800245a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002460:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002466:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	4313      	orrs	r3, r2
 800246c:	2201      	movs	r2, #1
 800246e:	4313      	orrs	r3, r2
 8002470:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	4a50      	ldr	r2, [pc, #320]	; (80025bc <HAL_ADC_Init+0x340>)
 800247a:	4013      	ands	r3, r2
 800247c:	0019      	movs	r1, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	430a      	orrs	r2, r1
 8002486:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	23c0      	movs	r3, #192	; 0xc0
 800248e:	061b      	lsls	r3, r3, #24
 8002490:	429a      	cmp	r2, r3
 8002492:	d018      	beq.n	80024c6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	05db      	lsls	r3, r3, #23
 800249c:	429a      	cmp	r2, r3
 800249e:	d012      	beq.n	80024c6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	061b      	lsls	r3, r3, #24
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d00c      	beq.n	80024c6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80024ac:	4b44      	ldr	r3, [pc, #272]	; (80025c0 <HAL_ADC_Init+0x344>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a44      	ldr	r2, [pc, #272]	; (80025c4 <HAL_ADC_Init+0x348>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	0019      	movs	r1, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	23f0      	movs	r3, #240	; 0xf0
 80024bc:	039b      	lsls	r3, r3, #14
 80024be:	401a      	ands	r2, r3
 80024c0:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <HAL_ADC_Init+0x344>)
 80024c2:	430a      	orrs	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ce:	001a      	movs	r2, r3
 80024d0:	2100      	movs	r1, #0
 80024d2:	f7ff fdae 	bl	8002032 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024de:	493a      	ldr	r1, [pc, #232]	; (80025c8 <HAL_ADC_Init+0x34c>)
 80024e0:	001a      	movs	r2, r3
 80024e2:	f7ff fda6 	bl	8002032 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2110      	movs	r1, #16
 80024fa:	4249      	negs	r1, r1
 80024fc:	430a      	orrs	r2, r1
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002500:	e018      	b.n	8002534 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691a      	ldr	r2, [r3, #16]
 8002506:	2380      	movs	r3, #128	; 0x80
 8002508:	039b      	lsls	r3, r3, #14
 800250a:	429a      	cmp	r2, r3
 800250c:	d112      	bne.n	8002534 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	3b01      	subs	r3, #1
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	221c      	movs	r2, #28
 800251e:	4013      	ands	r3, r2
 8002520:	2210      	movs	r2, #16
 8002522:	4252      	negs	r2, r2
 8002524:	409a      	lsls	r2, r3
 8002526:	0011      	movs	r1, r2
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2100      	movs	r1, #0
 800253a:	0018      	movs	r0, r3
 800253c:	f7ff fd96 	bl	800206c <LL_ADC_GetSamplingTimeCommonChannels>
 8002540:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002546:	429a      	cmp	r2, r3
 8002548:	d10b      	bne.n	8002562 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002554:	2203      	movs	r2, #3
 8002556:	4393      	bics	r3, r2
 8002558:	2201      	movs	r2, #1
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002560:	e01c      	b.n	800259c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	2212      	movs	r2, #18
 8002568:	4393      	bics	r3, r2
 800256a:	2210      	movs	r2, #16
 800256c:	431a      	orrs	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002576:	2201      	movs	r2, #1
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800257e:	231f      	movs	r3, #31
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002586:	e009      	b.n	800259c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258c:	2210      	movs	r2, #16
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002594:	231f      	movs	r3, #31
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	2201      	movs	r2, #1
 800259a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800259c:	231f      	movs	r3, #31
 800259e:	18fb      	adds	r3, r7, r3
 80025a0:	781b      	ldrb	r3, [r3, #0]
}
 80025a2:	0018      	movs	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b008      	add	sp, #32
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	20000000 	.word	0x20000000
 80025b0:	00030d40 	.word	0x00030d40
 80025b4:	fffffefd 	.word	0xfffffefd
 80025b8:	fffe0201 	.word	0xfffe0201
 80025bc:	1ffffc02 	.word	0x1ffffc02
 80025c0:	40012708 	.word	0x40012708
 80025c4:	ffc3ffff 	.word	0xffc3ffff
 80025c8:	07ffff04 	.word	0x07ffff04

080025cc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80025cc:	b5b0      	push	{r4, r5, r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0018      	movs	r0, r3
 80025da:	f7ff fe3d 	bl	8002258 <LL_ADC_REG_IsConversionOngoing>
 80025de:	1e03      	subs	r3, r0, #0
 80025e0:	d135      	bne.n	800264e <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2254      	movs	r2, #84	; 0x54
 80025e6:	5c9b      	ldrb	r3, [r3, r2]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d101      	bne.n	80025f0 <HAL_ADC_Start+0x24>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e035      	b.n	800265c <HAL_ADC_Start+0x90>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2254      	movs	r2, #84	; 0x54
 80025f4:	2101      	movs	r1, #1
 80025f6:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80025f8:	250f      	movs	r5, #15
 80025fa:	197c      	adds	r4, r7, r5
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	0018      	movs	r0, r3
 8002600:	f000 fa16 	bl	8002a30 <ADC_Enable>
 8002604:	0003      	movs	r3, r0
 8002606:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002608:	197b      	adds	r3, r7, r5
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d119      	bne.n	8002644 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	4a13      	ldr	r2, [pc, #76]	; (8002664 <HAL_ADC_Start+0x98>)
 8002616:	4013      	ands	r3, r2
 8002618:	2280      	movs	r2, #128	; 0x80
 800261a:	0052      	lsls	r2, r2, #1
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	221c      	movs	r2, #28
 800262e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2254      	movs	r2, #84	; 0x54
 8002634:	2100      	movs	r1, #0
 8002636:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	0018      	movs	r0, r3
 800263e:	f7ff fdf9 	bl	8002234 <LL_ADC_REG_StartConversion>
 8002642:	e008      	b.n	8002656 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2254      	movs	r2, #84	; 0x54
 8002648:	2100      	movs	r1, #0
 800264a:	5499      	strb	r1, [r3, r2]
 800264c:	e003      	b.n	8002656 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800264e:	230f      	movs	r3, #15
 8002650:	18fb      	adds	r3, r7, r3
 8002652:	2202      	movs	r2, #2
 8002654:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002656:	230f      	movs	r3, #15
 8002658:	18fb      	adds	r3, r7, r3
 800265a:	781b      	ldrb	r3, [r3, #0]
}
 800265c:	0018      	movs	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	b004      	add	sp, #16
 8002662:	bdb0      	pop	{r4, r5, r7, pc}
 8002664:	fffff0fe 	.word	0xfffff0fe

08002668 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002676:	0018      	movs	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	b002      	add	sp, #8
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800268a:	2317      	movs	r3, #23
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2254      	movs	r2, #84	; 0x54
 800269a:	5c9b      	ldrb	r3, [r3, r2]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x24>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e1c0      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x3a6>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2254      	movs	r2, #84	; 0x54
 80026a8:	2101      	movs	r1, #1
 80026aa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	0018      	movs	r0, r3
 80026b2:	f7ff fdd1 	bl	8002258 <LL_ADC_REG_IsConversionOngoing>
 80026b6:	1e03      	subs	r3, r0, #0
 80026b8:	d000      	beq.n	80026bc <HAL_ADC_ConfigChannel+0x3c>
 80026ba:	e1a3      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d100      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x46>
 80026c4:	e143      	b.n	800294e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691a      	ldr	r2, [r3, #16]
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	061b      	lsls	r3, r3, #24
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d004      	beq.n	80026dc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80026d6:	4ac1      	ldr	r2, [pc, #772]	; (80029dc <HAL_ADC_ConfigChannel+0x35c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d108      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	0019      	movs	r1, r3
 80026e6:	0010      	movs	r0, r2
 80026e8:	f7ff fcf7 	bl	80020da <LL_ADC_REG_SetSequencerChAdd>
 80026ec:	e0c9      	b.n	8002882 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	211f      	movs	r1, #31
 80026f8:	400b      	ands	r3, r1
 80026fa:	210f      	movs	r1, #15
 80026fc:	4099      	lsls	r1, r3
 80026fe:	000b      	movs	r3, r1
 8002700:	43db      	mvns	r3, r3
 8002702:	4013      	ands	r3, r2
 8002704:	0019      	movs	r1, r3
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	035b      	lsls	r3, r3, #13
 800270c:	0b5b      	lsrs	r3, r3, #13
 800270e:	d105      	bne.n	800271c <HAL_ADC_ConfigChannel+0x9c>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	0e9b      	lsrs	r3, r3, #26
 8002716:	221f      	movs	r2, #31
 8002718:	4013      	ands	r3, r2
 800271a:	e098      	b.n	800284e <HAL_ADC_ConfigChannel+0x1ce>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2201      	movs	r2, #1
 8002722:	4013      	ands	r3, r2
 8002724:	d000      	beq.n	8002728 <HAL_ADC_ConfigChannel+0xa8>
 8002726:	e091      	b.n	800284c <HAL_ADC_ConfigChannel+0x1cc>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2202      	movs	r2, #2
 800272e:	4013      	ands	r3, r2
 8002730:	d000      	beq.n	8002734 <HAL_ADC_ConfigChannel+0xb4>
 8002732:	e089      	b.n	8002848 <HAL_ADC_ConfigChannel+0x1c8>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2204      	movs	r2, #4
 800273a:	4013      	ands	r3, r2
 800273c:	d000      	beq.n	8002740 <HAL_ADC_ConfigChannel+0xc0>
 800273e:	e081      	b.n	8002844 <HAL_ADC_ConfigChannel+0x1c4>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2208      	movs	r2, #8
 8002746:	4013      	ands	r3, r2
 8002748:	d000      	beq.n	800274c <HAL_ADC_ConfigChannel+0xcc>
 800274a:	e079      	b.n	8002840 <HAL_ADC_ConfigChannel+0x1c0>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2210      	movs	r2, #16
 8002752:	4013      	ands	r3, r2
 8002754:	d000      	beq.n	8002758 <HAL_ADC_ConfigChannel+0xd8>
 8002756:	e071      	b.n	800283c <HAL_ADC_ConfigChannel+0x1bc>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2220      	movs	r2, #32
 800275e:	4013      	ands	r3, r2
 8002760:	d000      	beq.n	8002764 <HAL_ADC_ConfigChannel+0xe4>
 8002762:	e069      	b.n	8002838 <HAL_ADC_ConfigChannel+0x1b8>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2240      	movs	r2, #64	; 0x40
 800276a:	4013      	ands	r3, r2
 800276c:	d000      	beq.n	8002770 <HAL_ADC_ConfigChannel+0xf0>
 800276e:	e061      	b.n	8002834 <HAL_ADC_ConfigChannel+0x1b4>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2280      	movs	r2, #128	; 0x80
 8002776:	4013      	ands	r3, r2
 8002778:	d000      	beq.n	800277c <HAL_ADC_ConfigChannel+0xfc>
 800277a:	e059      	b.n	8002830 <HAL_ADC_ConfigChannel+0x1b0>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4013      	ands	r3, r2
 8002786:	d151      	bne.n	800282c <HAL_ADC_ConfigChannel+0x1ac>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4013      	ands	r3, r2
 8002792:	d149      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x1a8>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4013      	ands	r3, r2
 800279e:	d141      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x1a4>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	4013      	ands	r3, r2
 80027aa:	d139      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x1a0>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	2380      	movs	r3, #128	; 0x80
 80027b2:	015b      	lsls	r3, r3, #5
 80027b4:	4013      	ands	r3, r2
 80027b6:	d131      	bne.n	800281c <HAL_ADC_ConfigChannel+0x19c>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	019b      	lsls	r3, r3, #6
 80027c0:	4013      	ands	r3, r2
 80027c2:	d129      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x198>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	2380      	movs	r3, #128	; 0x80
 80027ca:	01db      	lsls	r3, r3, #7
 80027cc:	4013      	ands	r3, r2
 80027ce:	d121      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x194>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	4013      	ands	r3, r2
 80027da:	d119      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x190>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	2380      	movs	r3, #128	; 0x80
 80027e2:	025b      	lsls	r3, r3, #9
 80027e4:	4013      	ands	r3, r2
 80027e6:	d111      	bne.n	800280c <HAL_ADC_ConfigChannel+0x18c>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	029b      	lsls	r3, r3, #10
 80027f0:	4013      	ands	r3, r2
 80027f2:	d109      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x188>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	2380      	movs	r3, #128	; 0x80
 80027fa:	02db      	lsls	r3, r3, #11
 80027fc:	4013      	ands	r3, r2
 80027fe:	d001      	beq.n	8002804 <HAL_ADC_ConfigChannel+0x184>
 8002800:	2312      	movs	r3, #18
 8002802:	e024      	b.n	800284e <HAL_ADC_ConfigChannel+0x1ce>
 8002804:	2300      	movs	r3, #0
 8002806:	e022      	b.n	800284e <HAL_ADC_ConfigChannel+0x1ce>
 8002808:	2311      	movs	r3, #17
 800280a:	e020      	b.n	800284e <HAL_ADC_ConfigChannel+0x1ce>
 800280c:	2310      	movs	r3, #16
 800280e:	e01e      	b.n	800284e <HAL_ADC_ConfigChannel+0x1ce>
 8002810:	230f      	movs	r3, #15
 8002812:	e01c      	b.n	800284e <HAL_ADC_ConfigChannel+0x1ce>
 8002814:	230e      	movs	r3, #14
 8002816:	e01a      	b.n	800284e <HAL_ADC_ConfigChannel+0x1ce>
 8002818:	230d      	movs	r3, #13
 800281a:	e018      	b.n	800284e <HAL_ADC_ConfigChannel+0x1ce>
 800281c:	230c      	movs	r3, #12
 800281e:	e016      	b.n	800284e <HAL_ADC_ConfigChannel+0x1ce>
 8002820:	230b      	movs	r3, #11
 8002822:	e014      	b.n	800284e <HAL_ADC_ConfigChannel+0x1ce>
 8002824:	230a      	movs	r3, #10
 8002826:	e012      	b.n	800284e <HAL_ADC_ConfigChannel+0x1ce>
 8002828:	2309      	movs	r3, #9
 800282a:	e010      	b.n	800284e <HAL_ADC_ConfigChannel+0x1ce>
 800282c:	2308      	movs	r3, #8
 800282e:	e00e      	b.n	800284e <HAL_ADC_ConfigChannel+0x1ce>
 8002830:	2307      	movs	r3, #7
 8002832:	e00c      	b.n	800284e <HAL_ADC_ConfigChannel+0x1ce>
 8002834:	2306      	movs	r3, #6
 8002836:	e00a      	b.n	800284e <HAL_ADC_ConfigChannel+0x1ce>
 8002838:	2305      	movs	r3, #5
 800283a:	e008      	b.n	800284e <HAL_ADC_ConfigChannel+0x1ce>
 800283c:	2304      	movs	r3, #4
 800283e:	e006      	b.n	800284e <HAL_ADC_ConfigChannel+0x1ce>
 8002840:	2303      	movs	r3, #3
 8002842:	e004      	b.n	800284e <HAL_ADC_ConfigChannel+0x1ce>
 8002844:	2302      	movs	r3, #2
 8002846:	e002      	b.n	800284e <HAL_ADC_ConfigChannel+0x1ce>
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <HAL_ADC_ConfigChannel+0x1ce>
 800284c:	2300      	movs	r3, #0
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	6852      	ldr	r2, [r2, #4]
 8002852:	201f      	movs	r0, #31
 8002854:	4002      	ands	r2, r0
 8002856:	4093      	lsls	r3, r2
 8002858:	000a      	movs	r2, r1
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	089b      	lsrs	r3, r3, #2
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	429a      	cmp	r2, r3
 800286e:	d808      	bhi.n	8002882 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	001a      	movs	r2, r3
 800287e:	f7ff fc0c 	bl	800209a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6819      	ldr	r1, [r3, #0]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	001a      	movs	r2, r3
 8002890:	f7ff fc46 	bl	8002120 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	db00      	blt.n	800289e <HAL_ADC_ConfigChannel+0x21e>
 800289c:	e0bc      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800289e:	4b50      	ldr	r3, [pc, #320]	; (80029e0 <HAL_ADC_ConfigChannel+0x360>)
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7ff fbb9 	bl	8002018 <LL_ADC_GetCommonPathInternalCh>
 80028a6:	0003      	movs	r3, r0
 80028a8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a4d      	ldr	r2, [pc, #308]	; (80029e4 <HAL_ADC_ConfigChannel+0x364>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d122      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	041b      	lsls	r3, r3, #16
 80028ba:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028bc:	d11d      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	2280      	movs	r2, #128	; 0x80
 80028c2:	0412      	lsls	r2, r2, #16
 80028c4:	4313      	orrs	r3, r2
 80028c6:	4a46      	ldr	r2, [pc, #280]	; (80029e0 <HAL_ADC_ConfigChannel+0x360>)
 80028c8:	0019      	movs	r1, r3
 80028ca:	0010      	movs	r0, r2
 80028cc:	f7ff fb90 	bl	8001ff0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028d0:	4b45      	ldr	r3, [pc, #276]	; (80029e8 <HAL_ADC_ConfigChannel+0x368>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4945      	ldr	r1, [pc, #276]	; (80029ec <HAL_ADC_ConfigChannel+0x36c>)
 80028d6:	0018      	movs	r0, r3
 80028d8:	f7fd fc12 	bl	8000100 <__udivsi3>
 80028dc:	0003      	movs	r3, r0
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	0013      	movs	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	189b      	adds	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028ea:	e002      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f9      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028f8:	e08e      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a3c      	ldr	r2, [pc, #240]	; (80029f0 <HAL_ADC_ConfigChannel+0x370>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d10e      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	045b      	lsls	r3, r3, #17
 800290a:	4013      	ands	r3, r2
 800290c:	d109      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	2280      	movs	r2, #128	; 0x80
 8002912:	0452      	lsls	r2, r2, #17
 8002914:	4313      	orrs	r3, r2
 8002916:	4a32      	ldr	r2, [pc, #200]	; (80029e0 <HAL_ADC_ConfigChannel+0x360>)
 8002918:	0019      	movs	r1, r3
 800291a:	0010      	movs	r0, r2
 800291c:	f7ff fb68 	bl	8001ff0 <LL_ADC_SetCommonPathInternalCh>
 8002920:	e07a      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a33      	ldr	r2, [pc, #204]	; (80029f4 <HAL_ADC_ConfigChannel+0x374>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d000      	beq.n	800292e <HAL_ADC_ConfigChannel+0x2ae>
 800292c:	e074      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	03db      	lsls	r3, r3, #15
 8002934:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002936:	d000      	beq.n	800293a <HAL_ADC_ConfigChannel+0x2ba>
 8002938:	e06e      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	2280      	movs	r2, #128	; 0x80
 800293e:	03d2      	lsls	r2, r2, #15
 8002940:	4313      	orrs	r3, r2
 8002942:	4a27      	ldr	r2, [pc, #156]	; (80029e0 <HAL_ADC_ConfigChannel+0x360>)
 8002944:	0019      	movs	r1, r3
 8002946:	0010      	movs	r0, r2
 8002948:	f7ff fb52 	bl	8001ff0 <LL_ADC_SetCommonPathInternalCh>
 800294c:	e064      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	2380      	movs	r3, #128	; 0x80
 8002954:	061b      	lsls	r3, r3, #24
 8002956:	429a      	cmp	r2, r3
 8002958:	d004      	beq.n	8002964 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800295e:	4a1f      	ldr	r2, [pc, #124]	; (80029dc <HAL_ADC_ConfigChannel+0x35c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d107      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	0019      	movs	r1, r3
 800296e:	0010      	movs	r0, r2
 8002970:	f7ff fbc4 	bl	80020fc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	da4d      	bge.n	8002a18 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800297c:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <HAL_ADC_ConfigChannel+0x360>)
 800297e:	0018      	movs	r0, r3
 8002980:	f7ff fb4a 	bl	8002018 <LL_ADC_GetCommonPathInternalCh>
 8002984:	0003      	movs	r3, r0
 8002986:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a15      	ldr	r2, [pc, #84]	; (80029e4 <HAL_ADC_ConfigChannel+0x364>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d108      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4a18      	ldr	r2, [pc, #96]	; (80029f8 <HAL_ADC_ConfigChannel+0x378>)
 8002996:	4013      	ands	r3, r2
 8002998:	4a11      	ldr	r2, [pc, #68]	; (80029e0 <HAL_ADC_ConfigChannel+0x360>)
 800299a:	0019      	movs	r1, r3
 800299c:	0010      	movs	r0, r2
 800299e:	f7ff fb27 	bl	8001ff0 <LL_ADC_SetCommonPathInternalCh>
 80029a2:	e039      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a11      	ldr	r2, [pc, #68]	; (80029f0 <HAL_ADC_ConfigChannel+0x370>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d108      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4a12      	ldr	r2, [pc, #72]	; (80029fc <HAL_ADC_ConfigChannel+0x37c>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <HAL_ADC_ConfigChannel+0x360>)
 80029b6:	0019      	movs	r1, r3
 80029b8:	0010      	movs	r0, r2
 80029ba:	f7ff fb19 	bl	8001ff0 <LL_ADC_SetCommonPathInternalCh>
 80029be:	e02b      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a0b      	ldr	r2, [pc, #44]	; (80029f4 <HAL_ADC_ConfigChannel+0x374>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d126      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4a0c      	ldr	r2, [pc, #48]	; (8002a00 <HAL_ADC_ConfigChannel+0x380>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	4a03      	ldr	r2, [pc, #12]	; (80029e0 <HAL_ADC_ConfigChannel+0x360>)
 80029d2:	0019      	movs	r1, r3
 80029d4:	0010      	movs	r0, r2
 80029d6:	f7ff fb0b 	bl	8001ff0 <LL_ADC_SetCommonPathInternalCh>
 80029da:	e01d      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x398>
 80029dc:	80000004 	.word	0x80000004
 80029e0:	40012708 	.word	0x40012708
 80029e4:	b0001000 	.word	0xb0001000
 80029e8:	20000000 	.word	0x20000000
 80029ec:	00030d40 	.word	0x00030d40
 80029f0:	b8004000 	.word	0xb8004000
 80029f4:	b4002000 	.word	0xb4002000
 80029f8:	ff7fffff 	.word	0xff7fffff
 80029fc:	feffffff 	.word	0xfeffffff
 8002a00:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a08:	2220      	movs	r2, #32
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a10:	2317      	movs	r3, #23
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	2201      	movs	r2, #1
 8002a16:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2254      	movs	r2, #84	; 0x54
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002a20:	2317      	movs	r3, #23
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	781b      	ldrb	r3, [r3, #0]
}
 8002a26:	0018      	movs	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b006      	add	sp, #24
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	46c0      	nop			; (mov r8, r8)

08002a30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	0018      	movs	r0, r3
 8002a42:	f7ff fbd5 	bl	80021f0 <LL_ADC_IsEnabled>
 8002a46:	1e03      	subs	r3, r0, #0
 8002a48:	d000      	beq.n	8002a4c <ADC_Enable+0x1c>
 8002a4a:	e069      	b.n	8002b20 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	4a36      	ldr	r2, [pc, #216]	; (8002b2c <ADC_Enable+0xfc>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	d00d      	beq.n	8002a74 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a68:	2201      	movs	r2, #1
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e056      	b.n	8002b22 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f7ff fb95 	bl	80021a8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8002a7e:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <ADC_Enable+0x100>)
 8002a80:	0018      	movs	r0, r3
 8002a82:	f7ff fac9 	bl	8002018 <LL_ADC_GetCommonPathInternalCh>
 8002a86:	0002      	movs	r2, r0
 8002a88:	2380      	movs	r3, #128	; 0x80
 8002a8a:	041b      	lsls	r3, r3, #16
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d00f      	beq.n	8002ab0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a90:	4b28      	ldr	r3, [pc, #160]	; (8002b34 <ADC_Enable+0x104>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4928      	ldr	r1, [pc, #160]	; (8002b38 <ADC_Enable+0x108>)
 8002a96:	0018      	movs	r0, r3
 8002a98:	f7fd fb32 	bl	8000100 <__udivsi3>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8002aa0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002aa2:	e002      	b.n	8002aaa <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1f9      	bne.n	8002aa4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	7e5b      	ldrb	r3, [r3, #25]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d033      	beq.n	8002b20 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002ab8:	f7ff fa56 	bl	8001f68 <HAL_GetTick>
 8002abc:	0003      	movs	r3, r0
 8002abe:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ac0:	e027      	b.n	8002b12 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f7ff fb92 	bl	80021f0 <LL_ADC_IsEnabled>
 8002acc:	1e03      	subs	r3, r0, #0
 8002ace:	d104      	bne.n	8002ada <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f7ff fb67 	bl	80021a8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ada:	f7ff fa45 	bl	8001f68 <HAL_GetTick>
 8002ade:	0002      	movs	r2, r0
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d914      	bls.n	8002b12 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2201      	movs	r2, #1
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d00d      	beq.n	8002b12 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afa:	2210      	movs	r2, #16
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b06:	2201      	movs	r2, #1
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e007      	b.n	8002b22 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d1d0      	bne.n	8002ac2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	0018      	movs	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b004      	add	sp, #16
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	80000017 	.word	0x80000017
 8002b30:	40012708 	.word	0x40012708
 8002b34:	20000000 	.word	0x20000000
 8002b38:	00030d40 	.word	0x00030d40

08002b3c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f7ff fb62 	bl	8002212 <LL_ADC_IsDisableOngoing>
 8002b4e:	0003      	movs	r3, r0
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	0018      	movs	r0, r3
 8002b58:	f7ff fb4a 	bl	80021f0 <LL_ADC_IsEnabled>
 8002b5c:	1e03      	subs	r3, r0, #0
 8002b5e:	d046      	beq.n	8002bee <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d143      	bne.n	8002bee <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2205      	movs	r2, #5
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d10d      	bne.n	8002b90 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f7ff fb27 	bl	80021cc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2203      	movs	r2, #3
 8002b84:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b86:	f7ff f9ef 	bl	8001f68 <HAL_GetTick>
 8002b8a:	0003      	movs	r3, r0
 8002b8c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b8e:	e028      	b.n	8002be2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b94:	2210      	movs	r2, #16
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e021      	b.n	8002bf0 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bac:	f7ff f9dc 	bl	8001f68 <HAL_GetTick>
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d913      	bls.n	8002be2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d00d      	beq.n	8002be2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bca:	2210      	movs	r2, #16
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e006      	b.n	8002bf0 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2201      	movs	r2, #1
 8002bea:	4013      	ands	r3, r2
 8002bec:	d1de      	bne.n	8002bac <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b004      	add	sp, #16
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <LL_ADC_SetCalibrationFactor>:
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	22b4      	movs	r2, #180	; 0xb4
 8002c06:	589b      	ldr	r3, [r3, r2]
 8002c08:	227f      	movs	r2, #127	; 0x7f
 8002c0a:	4393      	bics	r3, r2
 8002c0c:	001a      	movs	r2, r3
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	21b4      	movs	r1, #180	; 0xb4
 8002c16:	505a      	str	r2, [r3, r1]
}
 8002c18:	46c0      	nop			; (mov r8, r8)
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b002      	add	sp, #8
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <LL_ADC_GetCalibrationFactor>:
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	22b4      	movs	r2, #180	; 0xb4
 8002c2c:	589b      	ldr	r3, [r3, r2]
 8002c2e:	227f      	movs	r2, #127	; 0x7f
 8002c30:	4013      	ands	r3, r2
}
 8002c32:	0018      	movs	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b002      	add	sp, #8
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <LL_ADC_Enable>:
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	4a04      	ldr	r2, [pc, #16]	; (8002c5c <LL_ADC_Enable+0x20>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	609a      	str	r2, [r3, #8]
}
 8002c54:	46c0      	nop			; (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b002      	add	sp, #8
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	7fffffe8 	.word	0x7fffffe8

08002c60 <LL_ADC_Disable>:
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <LL_ADC_Disable+0x20>)
 8002c6e:	4013      	ands	r3, r2
 8002c70:	2202      	movs	r2, #2
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	609a      	str	r2, [r3, #8]
}
 8002c78:	46c0      	nop			; (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b002      	add	sp, #8
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	7fffffe8 	.word	0x7fffffe8

08002c84 <LL_ADC_IsEnabled>:
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2201      	movs	r2, #1
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <LL_ADC_IsEnabled+0x18>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <LL_ADC_IsEnabled+0x1a>
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b002      	add	sp, #8
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <LL_ADC_StartCalibration>:
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <LL_ADC_StartCalibration+0x24>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2280      	movs	r2, #128	; 0x80
 8002cba:	0612      	lsls	r2, r2, #24
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	609a      	str	r2, [r3, #8]
}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b002      	add	sp, #8
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	7fffffe8 	.word	0x7fffffe8

08002cd0 <LL_ADC_IsCalibrationOnGoing>:
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	0fdb      	lsrs	r3, r3, #31
 8002cde:	07da      	lsls	r2, r3, #31
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	061b      	lsls	r3, r3, #24
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d101      	bne.n	8002cec <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	0018      	movs	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b002      	add	sp, #8
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002cf8:	b590      	push	{r4, r7, lr}
 8002cfa:	b089      	sub	sp, #36	; 0x24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2254      	movs	r2, #84	; 0x54
 8002d0c:	5c9b      	ldrb	r3, [r3, r2]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_ADCEx_Calibration_Start+0x1e>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e0ba      	b.n	8002e8c <HAL_ADCEx_Calibration_Start+0x194>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2254      	movs	r2, #84	; 0x54
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002d1e:	2317      	movs	r3, #23
 8002d20:	18fc      	adds	r4, r7, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	0018      	movs	r0, r3
 8002d26:	f7ff ff09 	bl	8002b3c <ADC_Disable>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	0018      	movs	r0, r3
 8002d34:	f7ff ffa6 	bl	8002c84 <LL_ADC_IsEnabled>
 8002d38:	1e03      	subs	r3, r0, #0
 8002d3a:	d000      	beq.n	8002d3e <HAL_ADCEx_Calibration_Start+0x46>
 8002d3c:	e099      	b.n	8002e72 <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	4a54      	ldr	r2, [pc, #336]	; (8002e94 <HAL_ADCEx_Calibration_Start+0x19c>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	2202      	movs	r2, #2
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4a50      	ldr	r2, [pc, #320]	; (8002e98 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	494d      	ldr	r1, [pc, #308]	; (8002e9c <HAL_ADCEx_Calibration_Start+0x1a4>)
 8002d66:	400a      	ands	r2, r1
 8002d68:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	e02d      	b.n	8002dcc <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	0018      	movs	r0, r3
 8002d76:	f7ff ff97 	bl	8002ca8 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d7a:	e014      	b.n	8002da6 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4a46      	ldr	r2, [pc, #280]	; (8002ea0 <HAL_ADCEx_Calibration_Start+0x1a8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d90d      	bls.n	8002da6 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8e:	2212      	movs	r2, #18
 8002d90:	4393      	bics	r3, r2
 8002d92:	2210      	movs	r2, #16
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2254      	movs	r2, #84	; 0x54
 8002d9e:	2100      	movs	r1, #0
 8002da0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e072      	b.n	8002e8c <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	0018      	movs	r0, r3
 8002dac:	f7ff ff90 	bl	8002cd0 <LL_ADC_IsCalibrationOnGoing>
 8002db0:	1e03      	subs	r3, r0, #0
 8002db2:	d1e3      	bne.n	8002d7c <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	0018      	movs	r0, r3
 8002dba:	f7ff ff31 	bl	8002c20 <LL_ADC_GetCalibrationFactor>
 8002dbe:	0002      	movs	r2, r0
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	189b      	adds	r3, r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	61fb      	str	r3, [r7, #28]
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	2b07      	cmp	r3, #7
 8002dd0:	d9ce      	bls.n	8002d70 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002dd2:	69f9      	ldr	r1, [r7, #28]
 8002dd4:	69b8      	ldr	r0, [r7, #24]
 8002dd6:	f7fd f993 	bl	8000100 <__udivsi3>
 8002dda:	0003      	movs	r3, r0
 8002ddc:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	0018      	movs	r0, r3
 8002de4:	f7ff ff2a 	bl	8002c3c <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	0011      	movs	r1, r2
 8002df0:	0018      	movs	r0, r3
 8002df2:	f7ff ff01 	bl	8002bf8 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f7ff ff30 	bl	8002c60 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e00:	f7ff f8b2 	bl	8001f68 <HAL_GetTick>
 8002e04:	0003      	movs	r3, r0
 8002e06:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e08:	e01b      	b.n	8002e42 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e0a:	f7ff f8ad 	bl	8001f68 <HAL_GetTick>
 8002e0e:	0002      	movs	r2, r0
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d914      	bls.n	8002e42 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f7ff ff31 	bl	8002c84 <LL_ADC_IsEnabled>
 8002e22:	1e03      	subs	r3, r0, #0
 8002e24:	d00d      	beq.n	8002e42 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2a:	2210      	movs	r2, #16
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e36:	2201      	movs	r2, #1
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e024      	b.n	8002e8c <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	0018      	movs	r0, r3
 8002e48:	f7ff ff1c 	bl	8002c84 <LL_ADC_IsEnabled>
 8002e4c:	1e03      	subs	r3, r0, #0
 8002e4e:	d1dc      	bne.n	8002e0a <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68d9      	ldr	r1, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	2203      	movs	r2, #3
 8002e66:	4393      	bics	r3, r2
 8002e68:	2201      	movs	r2, #1
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	659a      	str	r2, [r3, #88]	; 0x58
 8002e70:	e005      	b.n	8002e7e <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e76:	2210      	movs	r2, #16
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2254      	movs	r2, #84	; 0x54
 8002e82:	2100      	movs	r1, #0
 8002e84:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002e86:	2317      	movs	r3, #23
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	781b      	ldrb	r3, [r3, #0]
}
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b009      	add	sp, #36	; 0x24
 8002e92:	bd90      	pop	{r4, r7, pc}
 8002e94:	fffffefd 	.word	0xfffffefd
 8002e98:	00008003 	.word	0x00008003
 8002e9c:	ffff7ffc 	.word	0xffff7ffc
 8002ea0:	0002f1ff 	.word	0x0002f1ff

08002ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	0002      	movs	r2, r0
 8002eac:	1dfb      	adds	r3, r7, #7
 8002eae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002eb0:	1dfb      	adds	r3, r7, #7
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b7f      	cmp	r3, #127	; 0x7f
 8002eb6:	d809      	bhi.n	8002ecc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eb8:	1dfb      	adds	r3, r7, #7
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	001a      	movs	r2, r3
 8002ebe:	231f      	movs	r3, #31
 8002ec0:	401a      	ands	r2, r3
 8002ec2:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <__NVIC_EnableIRQ+0x30>)
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	4091      	lsls	r1, r2
 8002ec8:	000a      	movs	r2, r1
 8002eca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002ecc:	46c0      	nop			; (mov r8, r8)
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b002      	add	sp, #8
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	e000e100 	.word	0xe000e100

08002ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	0002      	movs	r2, r0
 8002ee0:	6039      	str	r1, [r7, #0]
 8002ee2:	1dfb      	adds	r3, r7, #7
 8002ee4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ee6:	1dfb      	adds	r3, r7, #7
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b7f      	cmp	r3, #127	; 0x7f
 8002eec:	d828      	bhi.n	8002f40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002eee:	4a2f      	ldr	r2, [pc, #188]	; (8002fac <__NVIC_SetPriority+0xd4>)
 8002ef0:	1dfb      	adds	r3, r7, #7
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	b25b      	sxtb	r3, r3
 8002ef6:	089b      	lsrs	r3, r3, #2
 8002ef8:	33c0      	adds	r3, #192	; 0xc0
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	589b      	ldr	r3, [r3, r2]
 8002efe:	1dfa      	adds	r2, r7, #7
 8002f00:	7812      	ldrb	r2, [r2, #0]
 8002f02:	0011      	movs	r1, r2
 8002f04:	2203      	movs	r2, #3
 8002f06:	400a      	ands	r2, r1
 8002f08:	00d2      	lsls	r2, r2, #3
 8002f0a:	21ff      	movs	r1, #255	; 0xff
 8002f0c:	4091      	lsls	r1, r2
 8002f0e:	000a      	movs	r2, r1
 8002f10:	43d2      	mvns	r2, r2
 8002f12:	401a      	ands	r2, r3
 8002f14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	019b      	lsls	r3, r3, #6
 8002f1a:	22ff      	movs	r2, #255	; 0xff
 8002f1c:	401a      	ands	r2, r3
 8002f1e:	1dfb      	adds	r3, r7, #7
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	0018      	movs	r0, r3
 8002f24:	2303      	movs	r3, #3
 8002f26:	4003      	ands	r3, r0
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f2c:	481f      	ldr	r0, [pc, #124]	; (8002fac <__NVIC_SetPriority+0xd4>)
 8002f2e:	1dfb      	adds	r3, r7, #7
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	b25b      	sxtb	r3, r3
 8002f34:	089b      	lsrs	r3, r3, #2
 8002f36:	430a      	orrs	r2, r1
 8002f38:	33c0      	adds	r3, #192	; 0xc0
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f3e:	e031      	b.n	8002fa4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f40:	4a1b      	ldr	r2, [pc, #108]	; (8002fb0 <__NVIC_SetPriority+0xd8>)
 8002f42:	1dfb      	adds	r3, r7, #7
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	0019      	movs	r1, r3
 8002f48:	230f      	movs	r3, #15
 8002f4a:	400b      	ands	r3, r1
 8002f4c:	3b08      	subs	r3, #8
 8002f4e:	089b      	lsrs	r3, r3, #2
 8002f50:	3306      	adds	r3, #6
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	18d3      	adds	r3, r2, r3
 8002f56:	3304      	adds	r3, #4
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	1dfa      	adds	r2, r7, #7
 8002f5c:	7812      	ldrb	r2, [r2, #0]
 8002f5e:	0011      	movs	r1, r2
 8002f60:	2203      	movs	r2, #3
 8002f62:	400a      	ands	r2, r1
 8002f64:	00d2      	lsls	r2, r2, #3
 8002f66:	21ff      	movs	r1, #255	; 0xff
 8002f68:	4091      	lsls	r1, r2
 8002f6a:	000a      	movs	r2, r1
 8002f6c:	43d2      	mvns	r2, r2
 8002f6e:	401a      	ands	r2, r3
 8002f70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	019b      	lsls	r3, r3, #6
 8002f76:	22ff      	movs	r2, #255	; 0xff
 8002f78:	401a      	ands	r2, r3
 8002f7a:	1dfb      	adds	r3, r7, #7
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	0018      	movs	r0, r3
 8002f80:	2303      	movs	r3, #3
 8002f82:	4003      	ands	r3, r0
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f88:	4809      	ldr	r0, [pc, #36]	; (8002fb0 <__NVIC_SetPriority+0xd8>)
 8002f8a:	1dfb      	adds	r3, r7, #7
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	001c      	movs	r4, r3
 8002f90:	230f      	movs	r3, #15
 8002f92:	4023      	ands	r3, r4
 8002f94:	3b08      	subs	r3, #8
 8002f96:	089b      	lsrs	r3, r3, #2
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	3306      	adds	r3, #6
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	18c3      	adds	r3, r0, r3
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	601a      	str	r2, [r3, #0]
}
 8002fa4:	46c0      	nop			; (mov r8, r8)
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	b003      	add	sp, #12
 8002faa:	bd90      	pop	{r4, r7, pc}
 8002fac:	e000e100 	.word	0xe000e100
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	1e5a      	subs	r2, r3, #1
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	045b      	lsls	r3, r3, #17
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d301      	bcc.n	8002fcc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e010      	b.n	8002fee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <SysTick_Config+0x44>)
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	3a01      	subs	r2, #1
 8002fd2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	425b      	negs	r3, r3
 8002fd8:	2103      	movs	r1, #3
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f7ff ff7c 	bl	8002ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <SysTick_Config+0x44>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fe6:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <SysTick_Config+0x44>)
 8002fe8:	2207      	movs	r2, #7
 8002fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	0018      	movs	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b002      	add	sp, #8
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	e000e010 	.word	0xe000e010

08002ffc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	607a      	str	r2, [r7, #4]
 8003006:	210f      	movs	r1, #15
 8003008:	187b      	adds	r3, r7, r1
 800300a:	1c02      	adds	r2, r0, #0
 800300c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	187b      	adds	r3, r7, r1
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	b25b      	sxtb	r3, r3
 8003016:	0011      	movs	r1, r2
 8003018:	0018      	movs	r0, r3
 800301a:	f7ff ff5d 	bl	8002ed8 <__NVIC_SetPriority>
}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	46bd      	mov	sp, r7
 8003022:	b004      	add	sp, #16
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	0002      	movs	r2, r0
 800302e:	1dfb      	adds	r3, r7, #7
 8003030:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003032:	1dfb      	adds	r3, r7, #7
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	b25b      	sxtb	r3, r3
 8003038:	0018      	movs	r0, r3
 800303a:	f7ff ff33 	bl	8002ea4 <__NVIC_EnableIRQ>
}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	46bd      	mov	sp, r7
 8003042:	b002      	add	sp, #8
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	0018      	movs	r0, r3
 8003052:	f7ff ffaf 	bl	8002fb4 <SysTick_Config>
 8003056:	0003      	movs	r3, r0
}
 8003058:	0018      	movs	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	b002      	add	sp, #8
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e077      	b.n	8003162 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a3d      	ldr	r2, [pc, #244]	; (800316c <HAL_DMA_Init+0x10c>)
 8003078:	4694      	mov	ip, r2
 800307a:	4463      	add	r3, ip
 800307c:	2114      	movs	r1, #20
 800307e:	0018      	movs	r0, r3
 8003080:	f7fd f83e 	bl	8000100 <__udivsi3>
 8003084:	0003      	movs	r3, r0
 8003086:	009a      	lsls	r2, r3, #2
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2225      	movs	r2, #37	; 0x25
 8003090:	2102      	movs	r1, #2
 8003092:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4934      	ldr	r1, [pc, #208]	; (8003170 <HAL_DMA_Init+0x110>)
 80030a0:	400a      	ands	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6819      	ldr	r1, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	0018      	movs	r0, r3
 80030de:	f000 fa2b 	bl	8003538 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	2380      	movs	r3, #128	; 0x80
 80030e8:	01db      	lsls	r3, r3, #7
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d102      	bne.n	80030f4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fc:	213f      	movs	r1, #63	; 0x3f
 80030fe:	400a      	ands	r2, r1
 8003100:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800310a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d011      	beq.n	8003138 <HAL_DMA_Init+0xd8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b04      	cmp	r3, #4
 800311a:	d80d      	bhi.n	8003138 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	0018      	movs	r0, r3
 8003120:	f000 fa36 	bl	8003590 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	e008      	b.n	800314a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2225      	movs	r2, #37	; 0x25
 8003154:	2101      	movs	r1, #1
 8003156:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2224      	movs	r2, #36	; 0x24
 800315c:	2100      	movs	r1, #0
 800315e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	0018      	movs	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	b002      	add	sp, #8
 8003168:	bd80      	pop	{r7, pc}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	bffdfff8 	.word	0xbffdfff8
 8003170:	ffff800f 	.word	0xffff800f

08003174 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003182:	2317      	movs	r3, #23
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2224      	movs	r2, #36	; 0x24
 800318e:	5c9b      	ldrb	r3, [r3, r2]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_DMA_Start_IT+0x24>
 8003194:	2302      	movs	r3, #2
 8003196:	e06f      	b.n	8003278 <HAL_DMA_Start_IT+0x104>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2224      	movs	r2, #36	; 0x24
 800319c:	2101      	movs	r1, #1
 800319e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2225      	movs	r2, #37	; 0x25
 80031a4:	5c9b      	ldrb	r3, [r3, r2]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d157      	bne.n	800325c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2225      	movs	r2, #37	; 0x25
 80031b0:	2102      	movs	r1, #2
 80031b2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2101      	movs	r1, #1
 80031c6:	438a      	bics	r2, r1
 80031c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68b9      	ldr	r1, [r7, #8]
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f971 	bl	80034b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d008      	beq.n	80031f0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	210e      	movs	r1, #14
 80031ea:	430a      	orrs	r2, r1
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	e00f      	b.n	8003210 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2104      	movs	r1, #4
 80031fc:	438a      	bics	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	210a      	movs	r1, #10
 800320c:	430a      	orrs	r2, r1
 800320e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	025b      	lsls	r3, r3, #9
 800321a:	4013      	ands	r3, r2
 800321c:	d008      	beq.n	8003230 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003228:	2180      	movs	r1, #128	; 0x80
 800322a:	0049      	lsls	r1, r1, #1
 800322c:	430a      	orrs	r2, r1
 800322e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003242:	2180      	movs	r1, #128	; 0x80
 8003244:	0049      	lsls	r1, r1, #1
 8003246:	430a      	orrs	r2, r1
 8003248:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2101      	movs	r1, #1
 8003256:	430a      	orrs	r2, r1
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	e00a      	b.n	8003272 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2280      	movs	r2, #128	; 0x80
 8003260:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2224      	movs	r2, #36	; 0x24
 8003266:	2100      	movs	r1, #0
 8003268:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800326a:	2317      	movs	r3, #23
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	2201      	movs	r2, #1
 8003270:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003272:	2317      	movs	r3, #23
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	781b      	ldrb	r3, [r3, #0]
}
 8003278:	0018      	movs	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	b006      	add	sp, #24
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003288:	210f      	movs	r1, #15
 800328a:	187b      	adds	r3, r7, r1
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2225      	movs	r2, #37	; 0x25
 8003294:	5c9b      	ldrb	r3, [r3, r2]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d006      	beq.n	80032aa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2204      	movs	r2, #4
 80032a0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80032a2:	187b      	adds	r3, r7, r1
 80032a4:	2201      	movs	r2, #1
 80032a6:	701a      	strb	r2, [r3, #0]
 80032a8:	e049      	b.n	800333e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	210e      	movs	r1, #14
 80032b6:	438a      	bics	r2, r1
 80032b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2101      	movs	r1, #1
 80032c6:	438a      	bics	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d4:	491d      	ldr	r1, [pc, #116]	; (800334c <HAL_DMA_Abort_IT+0xcc>)
 80032d6:	400a      	ands	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80032da:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <HAL_DMA_Abort_IT+0xd0>)
 80032dc:	6859      	ldr	r1, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	221c      	movs	r2, #28
 80032e4:	4013      	ands	r3, r2
 80032e6:	2201      	movs	r2, #1
 80032e8:	409a      	lsls	r2, r3
 80032ea:	4b19      	ldr	r3, [pc, #100]	; (8003350 <HAL_DMA_Abort_IT+0xd0>)
 80032ec:	430a      	orrs	r2, r1
 80032ee:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80032f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00c      	beq.n	800331c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800330c:	490f      	ldr	r1, [pc, #60]	; (800334c <HAL_DMA_Abort_IT+0xcc>)
 800330e:	400a      	ands	r2, r1
 8003310:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800331a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2225      	movs	r2, #37	; 0x25
 8003320:	2101      	movs	r1, #1
 8003322:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2224      	movs	r2, #36	; 0x24
 8003328:	2100      	movs	r1, #0
 800332a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	2b00      	cmp	r3, #0
 8003332:	d004      	beq.n	800333e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	0010      	movs	r0, r2
 800333c:	4798      	blx	r3
    }
  }
  return status;
 800333e:	230f      	movs	r3, #15
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	781b      	ldrb	r3, [r3, #0]
}
 8003344:	0018      	movs	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	b004      	add	sp, #16
 800334a:	bd80      	pop	{r7, pc}
 800334c:	fffffeff 	.word	0xfffffeff
 8003350:	40020000 	.word	0x40020000

08003354 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800335c:	4b55      	ldr	r3, [pc, #340]	; (80034b4 <HAL_DMA_IRQHandler+0x160>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	221c      	movs	r2, #28
 8003370:	4013      	ands	r3, r2
 8003372:	2204      	movs	r2, #4
 8003374:	409a      	lsls	r2, r3
 8003376:	0013      	movs	r3, r2
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4013      	ands	r3, r2
 800337c:	d027      	beq.n	80033ce <HAL_DMA_IRQHandler+0x7a>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2204      	movs	r2, #4
 8003382:	4013      	ands	r3, r2
 8003384:	d023      	beq.n	80033ce <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2220      	movs	r2, #32
 800338e:	4013      	ands	r3, r2
 8003390:	d107      	bne.n	80033a2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2104      	movs	r1, #4
 800339e:	438a      	bics	r2, r1
 80033a0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80033a2:	4b44      	ldr	r3, [pc, #272]	; (80034b4 <HAL_DMA_IRQHandler+0x160>)
 80033a4:	6859      	ldr	r1, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	221c      	movs	r2, #28
 80033ac:	4013      	ands	r3, r2
 80033ae:	2204      	movs	r2, #4
 80033b0:	409a      	lsls	r2, r3
 80033b2:	4b40      	ldr	r3, [pc, #256]	; (80034b4 <HAL_DMA_IRQHandler+0x160>)
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d100      	bne.n	80033c2 <HAL_DMA_IRQHandler+0x6e>
 80033c0:	e073      	b.n	80034aa <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	0010      	movs	r0, r2
 80033ca:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80033cc:	e06d      	b.n	80034aa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	221c      	movs	r2, #28
 80033d4:	4013      	ands	r3, r2
 80033d6:	2202      	movs	r2, #2
 80033d8:	409a      	lsls	r2, r3
 80033da:	0013      	movs	r3, r2
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4013      	ands	r3, r2
 80033e0:	d02e      	beq.n	8003440 <HAL_DMA_IRQHandler+0xec>
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2202      	movs	r2, #2
 80033e6:	4013      	ands	r3, r2
 80033e8:	d02a      	beq.n	8003440 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2220      	movs	r2, #32
 80033f2:	4013      	ands	r3, r2
 80033f4:	d10b      	bne.n	800340e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	210a      	movs	r1, #10
 8003402:	438a      	bics	r2, r1
 8003404:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2225      	movs	r2, #37	; 0x25
 800340a:	2101      	movs	r1, #1
 800340c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800340e:	4b29      	ldr	r3, [pc, #164]	; (80034b4 <HAL_DMA_IRQHandler+0x160>)
 8003410:	6859      	ldr	r1, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	221c      	movs	r2, #28
 8003418:	4013      	ands	r3, r2
 800341a:	2202      	movs	r2, #2
 800341c:	409a      	lsls	r2, r3
 800341e:	4b25      	ldr	r3, [pc, #148]	; (80034b4 <HAL_DMA_IRQHandler+0x160>)
 8003420:	430a      	orrs	r2, r1
 8003422:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2224      	movs	r2, #36	; 0x24
 8003428:	2100      	movs	r1, #0
 800342a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003430:	2b00      	cmp	r3, #0
 8003432:	d03a      	beq.n	80034aa <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	0010      	movs	r0, r2
 800343c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800343e:	e034      	b.n	80034aa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	221c      	movs	r2, #28
 8003446:	4013      	ands	r3, r2
 8003448:	2208      	movs	r2, #8
 800344a:	409a      	lsls	r2, r3
 800344c:	0013      	movs	r3, r2
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4013      	ands	r3, r2
 8003452:	d02b      	beq.n	80034ac <HAL_DMA_IRQHandler+0x158>
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2208      	movs	r2, #8
 8003458:	4013      	ands	r3, r2
 800345a:	d027      	beq.n	80034ac <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	210e      	movs	r1, #14
 8003468:	438a      	bics	r2, r1
 800346a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800346c:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <HAL_DMA_IRQHandler+0x160>)
 800346e:	6859      	ldr	r1, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	221c      	movs	r2, #28
 8003476:	4013      	ands	r3, r2
 8003478:	2201      	movs	r2, #1
 800347a:	409a      	lsls	r2, r3
 800347c:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <HAL_DMA_IRQHandler+0x160>)
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2225      	movs	r2, #37	; 0x25
 800348c:	2101      	movs	r1, #1
 800348e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2224      	movs	r2, #36	; 0x24
 8003494:	2100      	movs	r1, #0
 8003496:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	0010      	movs	r0, r2
 80034a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	46c0      	nop			; (mov r8, r8)
}
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b004      	add	sp, #16
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40020000 	.word	0x40020000

080034b8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80034ce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d004      	beq.n	80034e2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80034e0:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80034e2:	4b14      	ldr	r3, [pc, #80]	; (8003534 <DMA_SetConfig+0x7c>)
 80034e4:	6859      	ldr	r1, [r3, #4]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	221c      	movs	r2, #28
 80034ec:	4013      	ands	r3, r2
 80034ee:	2201      	movs	r2, #1
 80034f0:	409a      	lsls	r2, r3
 80034f2:	4b10      	ldr	r3, [pc, #64]	; (8003534 <DMA_SetConfig+0x7c>)
 80034f4:	430a      	orrs	r2, r1
 80034f6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2b10      	cmp	r3, #16
 8003506:	d108      	bne.n	800351a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003518:	e007      	b.n	800352a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	60da      	str	r2, [r3, #12]
}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	46bd      	mov	sp, r7
 800352e:	b004      	add	sp, #16
 8003530:	bd80      	pop	{r7, pc}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	40020000 	.word	0x40020000

08003538 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	089b      	lsrs	r3, r3, #2
 8003546:	4a10      	ldr	r2, [pc, #64]	; (8003588 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003548:	4694      	mov	ip, r2
 800354a:	4463      	add	r3, ip
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	001a      	movs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	001a      	movs	r2, r3
 800355a:	23ff      	movs	r3, #255	; 0xff
 800355c:	4013      	ands	r3, r2
 800355e:	3b08      	subs	r3, #8
 8003560:	2114      	movs	r1, #20
 8003562:	0018      	movs	r0, r3
 8003564:	f7fc fdcc 	bl	8000100 <__udivsi3>
 8003568:	0003      	movs	r3, r0
 800356a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a07      	ldr	r2, [pc, #28]	; (800358c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003570:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	221f      	movs	r2, #31
 8003576:	4013      	ands	r3, r2
 8003578:	2201      	movs	r2, #1
 800357a:	409a      	lsls	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003580:	46c0      	nop			; (mov r8, r8)
 8003582:	46bd      	mov	sp, r7
 8003584:	b004      	add	sp, #16
 8003586:	bd80      	pop	{r7, pc}
 8003588:	10008200 	.word	0x10008200
 800358c:	40020880 	.word	0x40020880

08003590 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	223f      	movs	r2, #63	; 0x3f
 800359e:	4013      	ands	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	4a0a      	ldr	r2, [pc, #40]	; (80035d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80035a6:	4694      	mov	ip, r2
 80035a8:	4463      	add	r3, ip
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	001a      	movs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a07      	ldr	r2, [pc, #28]	; (80035d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80035b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	2203      	movs	r2, #3
 80035be:	4013      	ands	r3, r2
 80035c0:	2201      	movs	r2, #1
 80035c2:	409a      	lsls	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80035c8:	46c0      	nop			; (mov r8, r8)
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b004      	add	sp, #16
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	1000823f 	.word	0x1000823f
 80035d4:	40020940 	.word	0x40020940

080035d8 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80035d8:	b5b0      	push	{r4, r5, r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	603a      	str	r2, [r7, #0]
 80035e4:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80035e6:	4b21      	ldr	r3, [pc, #132]	; (800366c <HAL_FLASH_Program+0x94>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d101      	bne.n	80035f2 <HAL_FLASH_Program+0x1a>
 80035ee:	2302      	movs	r3, #2
 80035f0:	e038      	b.n	8003664 <HAL_FLASH_Program+0x8c>
 80035f2:	4b1e      	ldr	r3, [pc, #120]	; (800366c <HAL_FLASH_Program+0x94>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80035f8:	4b1c      	ldr	r3, [pc, #112]	; (800366c <HAL_FLASH_Program+0x94>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80035fe:	2517      	movs	r5, #23
 8003600:	197c      	adds	r4, r7, r5
 8003602:	23fa      	movs	r3, #250	; 0xfa
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	0018      	movs	r0, r3
 8003608:	f000 f858 	bl	80036bc <FLASH_WaitForLastOperation>
 800360c:	0003      	movs	r3, r0
 800360e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003610:	197b      	adds	r3, r7, r5
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d11f      	bne.n	8003658 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d106      	bne.n	800362c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68b9      	ldr	r1, [r7, #8]
 8003624:	0008      	movs	r0, r1
 8003626:	f000 f897 	bl	8003758 <FLASH_Program_DoubleWord>
 800362a:	e005      	b.n	8003638 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	0011      	movs	r1, r2
 8003632:	0018      	movs	r0, r3
 8003634:	f004 fb40 	bl	8007cb8 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003638:	2317      	movs	r3, #23
 800363a:	18fc      	adds	r4, r7, r3
 800363c:	23fa      	movs	r3, #250	; 0xfa
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	0018      	movs	r0, r3
 8003642:	f000 f83b 	bl	80036bc <FLASH_WaitForLastOperation>
 8003646:	0003      	movs	r3, r0
 8003648:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800364a:	4b09      	ldr	r3, [pc, #36]	; (8003670 <HAL_FLASH_Program+0x98>)
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	43d9      	mvns	r1, r3
 8003652:	4b07      	ldr	r3, [pc, #28]	; (8003670 <HAL_FLASH_Program+0x98>)
 8003654:	400a      	ands	r2, r1
 8003656:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003658:	4b04      	ldr	r3, [pc, #16]	; (800366c <HAL_FLASH_Program+0x94>)
 800365a:	2200      	movs	r2, #0
 800365c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800365e:	2317      	movs	r3, #23
 8003660:	18fb      	adds	r3, r7, r3
 8003662:	781b      	ldrb	r3, [r3, #0]
}
 8003664:	0018      	movs	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	b006      	add	sp, #24
 800366a:	bdb0      	pop	{r4, r5, r7, pc}
 800366c:	200003dc 	.word	0x200003dc
 8003670:	40022000 	.word	0x40022000

08003674 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800367a:	1dfb      	adds	r3, r7, #7
 800367c:	2200      	movs	r2, #0
 800367e:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_FLASH_Unlock+0x3c>)
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	2b00      	cmp	r3, #0
 8003686:	da0c      	bge.n	80036a2 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003688:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <HAL_FLASH_Unlock+0x3c>)
 800368a:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <HAL_FLASH_Unlock+0x40>)
 800368c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800368e:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <HAL_FLASH_Unlock+0x3c>)
 8003690:	4a09      	ldr	r2, [pc, #36]	; (80036b8 <HAL_FLASH_Unlock+0x44>)
 8003692:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8003694:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <HAL_FLASH_Unlock+0x3c>)
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	2b00      	cmp	r3, #0
 800369a:	da02      	bge.n	80036a2 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 800369c:	1dfb      	adds	r3, r7, #7
 800369e:	2201      	movs	r2, #1
 80036a0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80036a2:	1dfb      	adds	r3, r7, #7
 80036a4:	781b      	ldrb	r3, [r3, #0]
}
 80036a6:	0018      	movs	r0, r3
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b002      	add	sp, #8
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	40022000 	.word	0x40022000
 80036b4:	45670123 	.word	0x45670123
 80036b8:	cdef89ab 	.word	0xcdef89ab

080036bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 80036c4:	f7fe fc50 	bl	8001f68 <HAL_GetTick>
 80036c8:	0002      	movs	r2, r0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	189b      	adds	r3, r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	025b      	lsls	r3, r3, #9
 80036d4:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 80036d6:	e007      	b.n	80036e8 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 80036d8:	f7fe fc46 	bl	8001f68 <HAL_GetTick>
 80036dc:	0002      	movs	r2, r0
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d801      	bhi.n	80036e8 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e02a      	b.n	800373e <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 80036e8:	4b17      	ldr	r3, [pc, #92]	; (8003748 <FLASH_WaitForLastOperation+0x8c>)
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	4013      	ands	r3, r2
 80036f0:	d1f2      	bne.n	80036d8 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80036f2:	4b15      	ldr	r3, [pc, #84]	; (8003748 <FLASH_WaitForLastOperation+0x8c>)
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	4a15      	ldr	r2, [pc, #84]	; (800374c <FLASH_WaitForLastOperation+0x90>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 80036fc:	4b12      	ldr	r3, [pc, #72]	; (8003748 <FLASH_WaitForLastOperation+0x8c>)
 80036fe:	4a14      	ldr	r2, [pc, #80]	; (8003750 <FLASH_WaitForLastOperation+0x94>)
 8003700:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d004      	beq.n	8003712 <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8003708:	4b12      	ldr	r3, [pc, #72]	; (8003754 <FLASH_WaitForLastOperation+0x98>)
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e015      	b.n	800373e <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8003712:	f7fe fc29 	bl	8001f68 <HAL_GetTick>
 8003716:	0002      	movs	r2, r0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	189b      	adds	r3, r3, r2
 800371c:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800371e:	e007      	b.n	8003730 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8003720:	f7fe fc22 	bl	8001f68 <HAL_GetTick>
 8003724:	0002      	movs	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4293      	cmp	r3, r2
 800372a:	d801      	bhi.n	8003730 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e006      	b.n	800373e <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <FLASH_WaitForLastOperation+0x8c>)
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	2380      	movs	r3, #128	; 0x80
 8003736:	02db      	lsls	r3, r3, #11
 8003738:	4013      	ands	r3, r2
 800373a:	d1f1      	bne.n	8003720 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	0018      	movs	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	b004      	add	sp, #16
 8003744:	bd80      	pop	{r7, pc}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	40022000 	.word	0x40022000
 800374c:	000083fa 	.word	0x000083fa
 8003750:	000083fb 	.word	0x000083fb
 8003754:	200003dc 	.word	0x200003dc

08003758 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003758:	b5b0      	push	{r4, r5, r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	603a      	str	r2, [r7, #0]
 8003762:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003764:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <FLASH_Program_DoubleWord+0x3c>)
 8003766:	695a      	ldr	r2, [r3, #20]
 8003768:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <FLASH_Program_DoubleWord+0x3c>)
 800376a:	2101      	movs	r1, #1
 800376c:	430a      	orrs	r2, r1
 800376e:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003776:	f3bf 8f6f 	isb	sy
}
 800377a:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	001c      	movs	r4, r3
 8003780:	2300      	movs	r3, #0
 8003782:	001d      	movs	r5, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	3304      	adds	r3, #4
 8003788:	0022      	movs	r2, r4
 800378a:	601a      	str	r2, [r3, #0]
}
 800378c:	46c0      	nop			; (mov r8, r8)
 800378e:	46bd      	mov	sp, r7
 8003790:	b004      	add	sp, #16
 8003792:	bdb0      	pop	{r4, r5, r7, pc}
 8003794:	40022000 	.word	0x40022000

08003798 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003798:	b5b0      	push	{r4, r5, r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80037a2:	4b35      	ldr	r3, [pc, #212]	; (8003878 <HAL_FLASHEx_Erase+0xe0>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_FLASHEx_Erase+0x16>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e05f      	b.n	800386e <HAL_FLASHEx_Erase+0xd6>
 80037ae:	4b32      	ldr	r3, [pc, #200]	; (8003878 <HAL_FLASHEx_Erase+0xe0>)
 80037b0:	2201      	movs	r2, #1
 80037b2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80037b4:	4b30      	ldr	r3, [pc, #192]	; (8003878 <HAL_FLASHEx_Erase+0xe0>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80037ba:	250f      	movs	r5, #15
 80037bc:	197c      	adds	r4, r7, r5
 80037be:	23fa      	movs	r3, #250	; 0xfa
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	0018      	movs	r0, r3
 80037c4:	f7ff ff7a 	bl	80036bc <FLASH_WaitForLastOperation>
 80037c8:	0003      	movs	r3, r0
 80037ca:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80037cc:	002c      	movs	r4, r5
 80037ce:	193b      	adds	r3, r7, r4
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d145      	bne.n	8003862 <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2204      	movs	r2, #4
 80037da:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d10d      	bne.n	8003800 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f000 f849 	bl	8003880 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80037ee:	193c      	adds	r4, r7, r4
 80037f0:	23fa      	movs	r3, #250	; 0xfa
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	0018      	movs	r0, r3
 80037f6:	f7ff ff61 	bl	80036bc <FLASH_WaitForLastOperation>
 80037fa:	0003      	movs	r3, r0
 80037fc:	7023      	strb	r3, [r4, #0]
 80037fe:	e030      	b.n	8003862 <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2201      	movs	r2, #1
 8003804:	4252      	negs	r2, r2
 8003806:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	e01a      	b.n	8003846 <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	0011      	movs	r1, r2
 8003818:	0018      	movs	r0, r3
 800381a:	f000 f845 	bl	80038a8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800381e:	250f      	movs	r5, #15
 8003820:	197c      	adds	r4, r7, r5
 8003822:	23fa      	movs	r3, #250	; 0xfa
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	0018      	movs	r0, r3
 8003828:	f7ff ff48 	bl	80036bc <FLASH_WaitForLastOperation>
 800382c:	0003      	movs	r3, r0
 800382e:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8003830:	197b      	adds	r3, r7, r5
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	601a      	str	r2, [r3, #0]
          break;
 800383e:	e00a      	b.n	8003856 <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	3301      	adds	r3, #1
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	18d3      	adds	r3, r2, r3
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	429a      	cmp	r2, r3
 8003854:	d3dc      	bcc.n	8003810 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003856:	4b09      	ldr	r3, [pc, #36]	; (800387c <HAL_FLASHEx_Erase+0xe4>)
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	4b08      	ldr	r3, [pc, #32]	; (800387c <HAL_FLASHEx_Erase+0xe4>)
 800385c:	2102      	movs	r1, #2
 800385e:	438a      	bics	r2, r1
 8003860:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_FLASHEx_Erase+0xe0>)
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8003868:	230f      	movs	r3, #15
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	781b      	ldrb	r3, [r3, #0]
}
 800386e:	0018      	movs	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	b004      	add	sp, #16
 8003874:	bdb0      	pop	{r4, r5, r7, pc}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	200003dc 	.word	0x200003dc
 800387c:	40022000 	.word	0x40022000

08003880 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <FLASH_MassErase+0x24>)
 800388a:	695a      	ldr	r2, [r3, #20]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	431a      	orrs	r2, r3
 8003890:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <FLASH_MassErase+0x24>)
 8003892:	2180      	movs	r1, #128	; 0x80
 8003894:	0249      	lsls	r1, r1, #9
 8003896:	430a      	orrs	r2, r1
 8003898:	615a      	str	r2, [r3, #20]
}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	46bd      	mov	sp, r7
 800389e:	b002      	add	sp, #8
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	40022000 	.word	0x40022000

080038a8 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 80038b2:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <FLASH_PageErase+0x2c>)
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	4a08      	ldr	r2, [pc, #32]	; (80038d8 <FLASH_PageErase+0x30>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
    tmp &= ~FLASH_CR_BKER;
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	00da      	lsls	r2, r3, #3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	4b03      	ldr	r3, [pc, #12]	; (80038d4 <FLASH_PageErase+0x2c>)
 80038c6:	4905      	ldr	r1, [pc, #20]	; (80038dc <FLASH_PageErase+0x34>)
 80038c8:	430a      	orrs	r2, r1
 80038ca:	615a      	str	r2, [r3, #20]
}
 80038cc:	46c0      	nop			; (mov r8, r8)
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b004      	add	sp, #16
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40022000 	.word	0x40022000
 80038d8:	ffffe007 	.word	0xffffe007
 80038dc:	00010002 	.word	0x00010002

080038e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ee:	e147      	b.n	8003b80 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2101      	movs	r1, #1
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4091      	lsls	r1, r2
 80038fa:	000a      	movs	r2, r1
 80038fc:	4013      	ands	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d100      	bne.n	8003908 <HAL_GPIO_Init+0x28>
 8003906:	e138      	b.n	8003b7a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2203      	movs	r2, #3
 800390e:	4013      	ands	r3, r2
 8003910:	2b01      	cmp	r3, #1
 8003912:	d005      	beq.n	8003920 <HAL_GPIO_Init+0x40>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2203      	movs	r2, #3
 800391a:	4013      	ands	r3, r2
 800391c:	2b02      	cmp	r3, #2
 800391e:	d130      	bne.n	8003982 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	2203      	movs	r2, #3
 800392c:	409a      	lsls	r2, r3
 800392e:	0013      	movs	r3, r2
 8003930:	43da      	mvns	r2, r3
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	4013      	ands	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	409a      	lsls	r2, r3
 8003942:	0013      	movs	r3, r2
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003956:	2201      	movs	r2, #1
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	409a      	lsls	r2, r3
 800395c:	0013      	movs	r3, r2
 800395e:	43da      	mvns	r2, r3
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4013      	ands	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	091b      	lsrs	r3, r3, #4
 800396c:	2201      	movs	r2, #1
 800396e:	401a      	ands	r2, r3
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	409a      	lsls	r2, r3
 8003974:	0013      	movs	r3, r2
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2203      	movs	r2, #3
 8003988:	4013      	ands	r3, r2
 800398a:	2b03      	cmp	r3, #3
 800398c:	d017      	beq.n	80039be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	2203      	movs	r2, #3
 800399a:	409a      	lsls	r2, r3
 800399c:	0013      	movs	r3, r2
 800399e:	43da      	mvns	r2, r3
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	4013      	ands	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	409a      	lsls	r2, r3
 80039b0:	0013      	movs	r3, r2
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2203      	movs	r2, #3
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d123      	bne.n	8003a12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	08da      	lsrs	r2, r3, #3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3208      	adds	r2, #8
 80039d2:	0092      	lsls	r2, r2, #2
 80039d4:	58d3      	ldr	r3, [r2, r3]
 80039d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2207      	movs	r2, #7
 80039dc:	4013      	ands	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	220f      	movs	r2, #15
 80039e2:	409a      	lsls	r2, r3
 80039e4:	0013      	movs	r3, r2
 80039e6:	43da      	mvns	r2, r3
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	4013      	ands	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2107      	movs	r1, #7
 80039f6:	400b      	ands	r3, r1
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	409a      	lsls	r2, r3
 80039fc:	0013      	movs	r3, r2
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	08da      	lsrs	r2, r3, #3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3208      	adds	r2, #8
 8003a0c:	0092      	lsls	r2, r2, #2
 8003a0e:	6939      	ldr	r1, [r7, #16]
 8003a10:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	0013      	movs	r3, r2
 8003a22:	43da      	mvns	r2, r3
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	4013      	ands	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2203      	movs	r2, #3
 8003a30:	401a      	ands	r2, r3
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	409a      	lsls	r2, r3
 8003a38:	0013      	movs	r3, r2
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	23c0      	movs	r3, #192	; 0xc0
 8003a4c:	029b      	lsls	r3, r3, #10
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d100      	bne.n	8003a54 <HAL_GPIO_Init+0x174>
 8003a52:	e092      	b.n	8003b7a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003a54:	4a50      	ldr	r2, [pc, #320]	; (8003b98 <HAL_GPIO_Init+0x2b8>)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	089b      	lsrs	r3, r3, #2
 8003a5a:	3318      	adds	r3, #24
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	589b      	ldr	r3, [r3, r2]
 8003a60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2203      	movs	r2, #3
 8003a66:	4013      	ands	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	220f      	movs	r2, #15
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	0013      	movs	r3, r2
 8003a70:	43da      	mvns	r2, r3
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4013      	ands	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	23a0      	movs	r3, #160	; 0xa0
 8003a7c:	05db      	lsls	r3, r3, #23
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d013      	beq.n	8003aaa <HAL_GPIO_Init+0x1ca>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a45      	ldr	r2, [pc, #276]	; (8003b9c <HAL_GPIO_Init+0x2bc>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00d      	beq.n	8003aa6 <HAL_GPIO_Init+0x1c6>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a44      	ldr	r2, [pc, #272]	; (8003ba0 <HAL_GPIO_Init+0x2c0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d007      	beq.n	8003aa2 <HAL_GPIO_Init+0x1c2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a43      	ldr	r2, [pc, #268]	; (8003ba4 <HAL_GPIO_Init+0x2c4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d101      	bne.n	8003a9e <HAL_GPIO_Init+0x1be>
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e006      	b.n	8003aac <HAL_GPIO_Init+0x1cc>
 8003a9e:	2305      	movs	r3, #5
 8003aa0:	e004      	b.n	8003aac <HAL_GPIO_Init+0x1cc>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e002      	b.n	8003aac <HAL_GPIO_Init+0x1cc>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <HAL_GPIO_Init+0x1cc>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	2103      	movs	r1, #3
 8003ab0:	400a      	ands	r2, r1
 8003ab2:	00d2      	lsls	r2, r2, #3
 8003ab4:	4093      	lsls	r3, r2
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003abc:	4936      	ldr	r1, [pc, #216]	; (8003b98 <HAL_GPIO_Init+0x2b8>)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	089b      	lsrs	r3, r3, #2
 8003ac2:	3318      	adds	r3, #24
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aca:	4b33      	ldr	r3, [pc, #204]	; (8003b98 <HAL_GPIO_Init+0x2b8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	43da      	mvns	r2, r3
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	2380      	movs	r3, #128	; 0x80
 8003ae0:	035b      	lsls	r3, r3, #13
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d003      	beq.n	8003aee <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003aee:	4b2a      	ldr	r3, [pc, #168]	; (8003b98 <HAL_GPIO_Init+0x2b8>)
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003af4:	4b28      	ldr	r3, [pc, #160]	; (8003b98 <HAL_GPIO_Init+0x2b8>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	43da      	mvns	r2, r3
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4013      	ands	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	2380      	movs	r3, #128	; 0x80
 8003b0a:	039b      	lsls	r3, r3, #14
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d003      	beq.n	8003b18 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b18:	4b1f      	ldr	r3, [pc, #124]	; (8003b98 <HAL_GPIO_Init+0x2b8>)
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b1e:	4a1e      	ldr	r2, [pc, #120]	; (8003b98 <HAL_GPIO_Init+0x2b8>)
 8003b20:	2384      	movs	r3, #132	; 0x84
 8003b22:	58d3      	ldr	r3, [r2, r3]
 8003b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	43da      	mvns	r2, r3
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	029b      	lsls	r3, r3, #10
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d003      	beq.n	8003b44 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b44:	4914      	ldr	r1, [pc, #80]	; (8003b98 <HAL_GPIO_Init+0x2b8>)
 8003b46:	2284      	movs	r2, #132	; 0x84
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003b4c:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <HAL_GPIO_Init+0x2b8>)
 8003b4e:	2380      	movs	r3, #128	; 0x80
 8003b50:	58d3      	ldr	r3, [r2, r3]
 8003b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	43da      	mvns	r2, r3
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	025b      	lsls	r3, r3, #9
 8003b66:	4013      	ands	r3, r2
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b72:	4909      	ldr	r1, [pc, #36]	; (8003b98 <HAL_GPIO_Init+0x2b8>)
 8003b74:	2280      	movs	r2, #128	; 0x80
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	40da      	lsrs	r2, r3
 8003b88:	1e13      	subs	r3, r2, #0
 8003b8a:	d000      	beq.n	8003b8e <HAL_GPIO_Init+0x2ae>
 8003b8c:	e6b0      	b.n	80038f0 <HAL_GPIO_Init+0x10>
  }
}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	46c0      	nop			; (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b006      	add	sp, #24
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40021800 	.word	0x40021800
 8003b9c:	50000400 	.word	0x50000400
 8003ba0:	50000800 	.word	0x50000800
 8003ba4:	50000c00 	.word	0x50000c00

08003ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	0008      	movs	r0, r1
 8003bb2:	0011      	movs	r1, r2
 8003bb4:	1cbb      	adds	r3, r7, #2
 8003bb6:	1c02      	adds	r2, r0, #0
 8003bb8:	801a      	strh	r2, [r3, #0]
 8003bba:	1c7b      	adds	r3, r7, #1
 8003bbc:	1c0a      	adds	r2, r1, #0
 8003bbe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bc0:	1c7b      	adds	r3, r7, #1
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d004      	beq.n	8003bd2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bc8:	1cbb      	adds	r3, r7, #2
 8003bca:	881a      	ldrh	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bd0:	e003      	b.n	8003bda <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bd2:	1cbb      	adds	r3, r7, #2
 8003bd4:	881a      	ldrh	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b002      	add	sp, #8
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	000a      	movs	r2, r1
 8003bec:	1cbb      	adds	r3, r7, #2
 8003bee:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bf6:	1cbb      	adds	r3, r7, #2
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	041a      	lsls	r2, r3, #16
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	43db      	mvns	r3, r3
 8003c04:	1cb9      	adds	r1, r7, #2
 8003c06:	8809      	ldrh	r1, [r1, #0]
 8003c08:	400b      	ands	r3, r1
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	619a      	str	r2, [r3, #24]
}
 8003c10:	46c0      	nop			; (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b004      	add	sp, #16
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	0002      	movs	r2, r0
 8003c20:	1dbb      	adds	r3, r7, #6
 8003c22:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003c24:	4b10      	ldr	r3, [pc, #64]	; (8003c68 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	1dba      	adds	r2, r7, #6
 8003c2a:	8812      	ldrh	r2, [r2, #0]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d008      	beq.n	8003c42 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003c30:	4b0d      	ldr	r3, [pc, #52]	; (8003c68 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003c32:	1dba      	adds	r2, r7, #6
 8003c34:	8812      	ldrh	r2, [r2, #0]
 8003c36:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003c38:	1dbb      	adds	r3, r7, #6
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f003 fa13 	bl	8007068 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003c42:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	1dba      	adds	r2, r7, #6
 8003c48:	8812      	ldrh	r2, [r2, #0]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d008      	beq.n	8003c60 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003c4e:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003c50:	1dba      	adds	r2, r7, #6
 8003c52:	8812      	ldrh	r2, [r2, #0]
 8003c54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003c56:	1dbb      	adds	r3, r7, #6
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f003 fa40 	bl	80070e0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003c60:	46c0      	nop			; (mov r8, r8)
 8003c62:	46bd      	mov	sp, r7
 8003c64:	b002      	add	sp, #8
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40021800 	.word	0x40021800

08003c6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003c74:	4b19      	ldr	r3, [pc, #100]	; (8003cdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a19      	ldr	r2, [pc, #100]	; (8003ce0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	0019      	movs	r1, r3
 8003c7e:	4b17      	ldr	r3, [pc, #92]	; (8003cdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	2380      	movs	r3, #128	; 0x80
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d11f      	bne.n	8003cd0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003c90:	4b14      	ldr	r3, [pc, #80]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	0013      	movs	r3, r2
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	189b      	adds	r3, r3, r2
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	4912      	ldr	r1, [pc, #72]	; (8003ce8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f7fc fa2e 	bl	8000100 <__udivsi3>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003caa:	e008      	b.n	8003cbe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	e001      	b.n	8003cbe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e009      	b.n	8003cd2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cbe:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	2380      	movs	r3, #128	; 0x80
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d0ed      	beq.n	8003cac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b004      	add	sp, #16
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	40007000 	.word	0x40007000
 8003ce0:	fffff9ff 	.word	0xfffff9ff
 8003ce4:	20000000 	.word	0x20000000
 8003ce8:	000f4240 	.word	0x000f4240

08003cec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e2f3      	b.n	80042e6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2201      	movs	r2, #1
 8003d04:	4013      	ands	r3, r2
 8003d06:	d100      	bne.n	8003d0a <HAL_RCC_OscConfig+0x1e>
 8003d08:	e07c      	b.n	8003e04 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d0a:	4bc3      	ldr	r3, [pc, #780]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2238      	movs	r2, #56	; 0x38
 8003d10:	4013      	ands	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d14:	4bc0      	ldr	r3, [pc, #768]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	2203      	movs	r2, #3
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	2b10      	cmp	r3, #16
 8003d22:	d102      	bne.n	8003d2a <HAL_RCC_OscConfig+0x3e>
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d002      	beq.n	8003d30 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d10b      	bne.n	8003d48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d30:	4bb9      	ldr	r3, [pc, #740]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	2380      	movs	r3, #128	; 0x80
 8003d36:	029b      	lsls	r3, r3, #10
 8003d38:	4013      	ands	r3, r2
 8003d3a:	d062      	beq.n	8003e02 <HAL_RCC_OscConfig+0x116>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d15e      	bne.n	8003e02 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e2ce      	b.n	80042e6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	2380      	movs	r3, #128	; 0x80
 8003d4e:	025b      	lsls	r3, r3, #9
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d107      	bne.n	8003d64 <HAL_RCC_OscConfig+0x78>
 8003d54:	4bb0      	ldr	r3, [pc, #704]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	4baf      	ldr	r3, [pc, #700]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003d5a:	2180      	movs	r1, #128	; 0x80
 8003d5c:	0249      	lsls	r1, r1, #9
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	e020      	b.n	8003da6 <HAL_RCC_OscConfig+0xba>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	23a0      	movs	r3, #160	; 0xa0
 8003d6a:	02db      	lsls	r3, r3, #11
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d10e      	bne.n	8003d8e <HAL_RCC_OscConfig+0xa2>
 8003d70:	4ba9      	ldr	r3, [pc, #676]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4ba8      	ldr	r3, [pc, #672]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003d76:	2180      	movs	r1, #128	; 0x80
 8003d78:	02c9      	lsls	r1, r1, #11
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	4ba6      	ldr	r3, [pc, #664]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	4ba5      	ldr	r3, [pc, #660]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003d84:	2180      	movs	r1, #128	; 0x80
 8003d86:	0249      	lsls	r1, r1, #9
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e00b      	b.n	8003da6 <HAL_RCC_OscConfig+0xba>
 8003d8e:	4ba2      	ldr	r3, [pc, #648]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4ba1      	ldr	r3, [pc, #644]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003d94:	49a1      	ldr	r1, [pc, #644]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003d96:	400a      	ands	r2, r1
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	4b9f      	ldr	r3, [pc, #636]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	4b9e      	ldr	r3, [pc, #632]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003da0:	499f      	ldr	r1, [pc, #636]	; (8004020 <HAL_RCC_OscConfig+0x334>)
 8003da2:	400a      	ands	r2, r1
 8003da4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d014      	beq.n	8003dd8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dae:	f7fe f8db 	bl	8001f68 <HAL_GetTick>
 8003db2:	0003      	movs	r3, r0
 8003db4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db8:	f7fe f8d6 	bl	8001f68 <HAL_GetTick>
 8003dbc:	0002      	movs	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b64      	cmp	r3, #100	; 0x64
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e28d      	b.n	80042e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dca:	4b93      	ldr	r3, [pc, #588]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	2380      	movs	r3, #128	; 0x80
 8003dd0:	029b      	lsls	r3, r3, #10
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCC_OscConfig+0xcc>
 8003dd6:	e015      	b.n	8003e04 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd8:	f7fe f8c6 	bl	8001f68 <HAL_GetTick>
 8003ddc:	0003      	movs	r3, r0
 8003dde:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de2:	f7fe f8c1 	bl	8001f68 <HAL_GetTick>
 8003de6:	0002      	movs	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b64      	cmp	r3, #100	; 0x64
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e278      	b.n	80042e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003df4:	4b88      	ldr	r3, [pc, #544]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	2380      	movs	r3, #128	; 0x80
 8003dfa:	029b      	lsls	r3, r3, #10
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d1f0      	bne.n	8003de2 <HAL_RCC_OscConfig+0xf6>
 8003e00:	e000      	b.n	8003e04 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e02:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2202      	movs	r2, #2
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d100      	bne.n	8003e10 <HAL_RCC_OscConfig+0x124>
 8003e0e:	e099      	b.n	8003f44 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e10:	4b81      	ldr	r3, [pc, #516]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	2238      	movs	r2, #56	; 0x38
 8003e16:	4013      	ands	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e1a:	4b7f      	ldr	r3, [pc, #508]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	2203      	movs	r2, #3
 8003e20:	4013      	ands	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	d102      	bne.n	8003e30 <HAL_RCC_OscConfig+0x144>
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d002      	beq.n	8003e36 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d135      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e36:	4b78      	ldr	r3, [pc, #480]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	2380      	movs	r3, #128	; 0x80
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4013      	ands	r3, r2
 8003e40:	d005      	beq.n	8003e4e <HAL_RCC_OscConfig+0x162>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e24b      	b.n	80042e6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4e:	4b72      	ldr	r3, [pc, #456]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	4a74      	ldr	r2, [pc, #464]	; (8004024 <HAL_RCC_OscConfig+0x338>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	0019      	movs	r1, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	021a      	lsls	r2, r3, #8
 8003e5e:	4b6e      	ldr	r3, [pc, #440]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003e60:	430a      	orrs	r2, r1
 8003e62:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d112      	bne.n	8003e90 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e6a:	4b6b      	ldr	r3, [pc, #428]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a6e      	ldr	r2, [pc, #440]	; (8004028 <HAL_RCC_OscConfig+0x33c>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	0019      	movs	r1, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	4b67      	ldr	r3, [pc, #412]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003e7e:	4b66      	ldr	r3, [pc, #408]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	0adb      	lsrs	r3, r3, #11
 8003e84:	2207      	movs	r2, #7
 8003e86:	4013      	ands	r3, r2
 8003e88:	4a68      	ldr	r2, [pc, #416]	; (800402c <HAL_RCC_OscConfig+0x340>)
 8003e8a:	40da      	lsrs	r2, r3
 8003e8c:	4b68      	ldr	r3, [pc, #416]	; (8004030 <HAL_RCC_OscConfig+0x344>)
 8003e8e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e90:	4b68      	ldr	r3, [pc, #416]	; (8004034 <HAL_RCC_OscConfig+0x348>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	0018      	movs	r0, r3
 8003e96:	f7fe f80b 	bl	8001eb0 <HAL_InitTick>
 8003e9a:	1e03      	subs	r3, r0, #0
 8003e9c:	d051      	beq.n	8003f42 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e221      	b.n	80042e6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d030      	beq.n	8003f0c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003eaa:	4b5b      	ldr	r3, [pc, #364]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a5e      	ldr	r2, [pc, #376]	; (8004028 <HAL_RCC_OscConfig+0x33c>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	4b57      	ldr	r3, [pc, #348]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003ebe:	4b56      	ldr	r3, [pc, #344]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	4b55      	ldr	r3, [pc, #340]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003ec4:	2180      	movs	r1, #128	; 0x80
 8003ec6:	0049      	lsls	r1, r1, #1
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ecc:	f7fe f84c 	bl	8001f68 <HAL_GetTick>
 8003ed0:	0003      	movs	r3, r0
 8003ed2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed6:	f7fe f847 	bl	8001f68 <HAL_GetTick>
 8003eda:	0002      	movs	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e1fe      	b.n	80042e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ee8:	4b4b      	ldr	r3, [pc, #300]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	2380      	movs	r3, #128	; 0x80
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	d0f0      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef4:	4b48      	ldr	r3, [pc, #288]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	4a4a      	ldr	r2, [pc, #296]	; (8004024 <HAL_RCC_OscConfig+0x338>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	0019      	movs	r1, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	021a      	lsls	r2, r3, #8
 8003f04:	4b44      	ldr	r3, [pc, #272]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
 8003f0a:	e01b      	b.n	8003f44 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003f0c:	4b42      	ldr	r3, [pc, #264]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	4b41      	ldr	r3, [pc, #260]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003f12:	4949      	ldr	r1, [pc, #292]	; (8004038 <HAL_RCC_OscConfig+0x34c>)
 8003f14:	400a      	ands	r2, r1
 8003f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f18:	f7fe f826 	bl	8001f68 <HAL_GetTick>
 8003f1c:	0003      	movs	r3, r0
 8003f1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f22:	f7fe f821 	bl	8001f68 <HAL_GetTick>
 8003f26:	0002      	movs	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e1d8      	b.n	80042e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f34:	4b38      	ldr	r3, [pc, #224]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	2380      	movs	r3, #128	; 0x80
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	d1f0      	bne.n	8003f22 <HAL_RCC_OscConfig+0x236>
 8003f40:	e000      	b.n	8003f44 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f42:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2208      	movs	r2, #8
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d047      	beq.n	8003fde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003f4e:	4b32      	ldr	r3, [pc, #200]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	2238      	movs	r2, #56	; 0x38
 8003f54:	4013      	ands	r3, r2
 8003f56:	2b18      	cmp	r3, #24
 8003f58:	d10a      	bne.n	8003f70 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003f5a:	4b2f      	ldr	r3, [pc, #188]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5e:	2202      	movs	r2, #2
 8003f60:	4013      	ands	r3, r2
 8003f62:	d03c      	beq.n	8003fde <HAL_RCC_OscConfig+0x2f2>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d138      	bne.n	8003fde <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e1ba      	b.n	80042e6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d019      	beq.n	8003fac <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003f78:	4b27      	ldr	r3, [pc, #156]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003f7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f7c:	4b26      	ldr	r3, [pc, #152]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003f7e:	2101      	movs	r1, #1
 8003f80:	430a      	orrs	r2, r1
 8003f82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fd fff0 	bl	8001f68 <HAL_GetTick>
 8003f88:	0003      	movs	r3, r0
 8003f8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f8e:	f7fd ffeb 	bl	8001f68 <HAL_GetTick>
 8003f92:	0002      	movs	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e1a2      	b.n	80042e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fa0:	4b1d      	ldr	r3, [pc, #116]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d0f1      	beq.n	8003f8e <HAL_RCC_OscConfig+0x2a2>
 8003faa:	e018      	b.n	8003fde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003fac:	4b1a      	ldr	r3, [pc, #104]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003fae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003fb0:	4b19      	ldr	r3, [pc, #100]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	438a      	bics	r2, r1
 8003fb6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb8:	f7fd ffd6 	bl	8001f68 <HAL_GetTick>
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fc2:	f7fd ffd1 	bl	8001f68 <HAL_GetTick>
 8003fc6:	0002      	movs	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e188      	b.n	80042e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fd4:	4b10      	ldr	r3, [pc, #64]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd8:	2202      	movs	r2, #2
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d1f1      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d100      	bne.n	8003fea <HAL_RCC_OscConfig+0x2fe>
 8003fe8:	e0c6      	b.n	8004178 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fea:	231f      	movs	r3, #31
 8003fec:	18fb      	adds	r3, r7, r3
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003ff2:	4b09      	ldr	r3, [pc, #36]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2238      	movs	r2, #56	; 0x38
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	d11e      	bne.n	800403c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <HAL_RCC_OscConfig+0x32c>)
 8004000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004002:	2202      	movs	r2, #2
 8004004:	4013      	ands	r3, r2
 8004006:	d100      	bne.n	800400a <HAL_RCC_OscConfig+0x31e>
 8004008:	e0b6      	b.n	8004178 <HAL_RCC_OscConfig+0x48c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d000      	beq.n	8004014 <HAL_RCC_OscConfig+0x328>
 8004012:	e0b1      	b.n	8004178 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e166      	b.n	80042e6 <HAL_RCC_OscConfig+0x5fa>
 8004018:	40021000 	.word	0x40021000
 800401c:	fffeffff 	.word	0xfffeffff
 8004020:	fffbffff 	.word	0xfffbffff
 8004024:	ffff80ff 	.word	0xffff80ff
 8004028:	ffffc7ff 	.word	0xffffc7ff
 800402c:	00f42400 	.word	0x00f42400
 8004030:	20000000 	.word	0x20000000
 8004034:	20000004 	.word	0x20000004
 8004038:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800403c:	4bac      	ldr	r3, [pc, #688]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 800403e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004040:	2380      	movs	r3, #128	; 0x80
 8004042:	055b      	lsls	r3, r3, #21
 8004044:	4013      	ands	r3, r2
 8004046:	d101      	bne.n	800404c <HAL_RCC_OscConfig+0x360>
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <HAL_RCC_OscConfig+0x362>
 800404c:	2300      	movs	r3, #0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d011      	beq.n	8004076 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004052:	4ba7      	ldr	r3, [pc, #668]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 8004054:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004056:	4ba6      	ldr	r3, [pc, #664]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 8004058:	2180      	movs	r1, #128	; 0x80
 800405a:	0549      	lsls	r1, r1, #21
 800405c:	430a      	orrs	r2, r1
 800405e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004060:	4ba3      	ldr	r3, [pc, #652]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 8004062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004064:	2380      	movs	r3, #128	; 0x80
 8004066:	055b      	lsls	r3, r3, #21
 8004068:	4013      	ands	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800406e:	231f      	movs	r3, #31
 8004070:	18fb      	adds	r3, r7, r3
 8004072:	2201      	movs	r2, #1
 8004074:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004076:	4b9f      	ldr	r3, [pc, #636]	; (80042f4 <HAL_RCC_OscConfig+0x608>)
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	2380      	movs	r3, #128	; 0x80
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	4013      	ands	r3, r2
 8004080:	d11a      	bne.n	80040b8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004082:	4b9c      	ldr	r3, [pc, #624]	; (80042f4 <HAL_RCC_OscConfig+0x608>)
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	4b9b      	ldr	r3, [pc, #620]	; (80042f4 <HAL_RCC_OscConfig+0x608>)
 8004088:	2180      	movs	r1, #128	; 0x80
 800408a:	0049      	lsls	r1, r1, #1
 800408c:	430a      	orrs	r2, r1
 800408e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004090:	f7fd ff6a 	bl	8001f68 <HAL_GetTick>
 8004094:	0003      	movs	r3, r0
 8004096:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409a:	f7fd ff65 	bl	8001f68 <HAL_GetTick>
 800409e:	0002      	movs	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e11c      	b.n	80042e6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ac:	4b91      	ldr	r3, [pc, #580]	; (80042f4 <HAL_RCC_OscConfig+0x608>)
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	2380      	movs	r3, #128	; 0x80
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	4013      	ands	r3, r2
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d106      	bne.n	80040ce <HAL_RCC_OscConfig+0x3e2>
 80040c0:	4b8b      	ldr	r3, [pc, #556]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 80040c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040c4:	4b8a      	ldr	r3, [pc, #552]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 80040c6:	2101      	movs	r1, #1
 80040c8:	430a      	orrs	r2, r1
 80040ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80040cc:	e01c      	b.n	8004108 <HAL_RCC_OscConfig+0x41c>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b05      	cmp	r3, #5
 80040d4:	d10c      	bne.n	80040f0 <HAL_RCC_OscConfig+0x404>
 80040d6:	4b86      	ldr	r3, [pc, #536]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 80040d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040da:	4b85      	ldr	r3, [pc, #532]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 80040dc:	2104      	movs	r1, #4
 80040de:	430a      	orrs	r2, r1
 80040e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80040e2:	4b83      	ldr	r3, [pc, #524]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 80040e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040e6:	4b82      	ldr	r3, [pc, #520]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 80040e8:	2101      	movs	r1, #1
 80040ea:	430a      	orrs	r2, r1
 80040ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80040ee:	e00b      	b.n	8004108 <HAL_RCC_OscConfig+0x41c>
 80040f0:	4b7f      	ldr	r3, [pc, #508]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 80040f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040f4:	4b7e      	ldr	r3, [pc, #504]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 80040f6:	2101      	movs	r1, #1
 80040f8:	438a      	bics	r2, r1
 80040fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80040fc:	4b7c      	ldr	r3, [pc, #496]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 80040fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004100:	4b7b      	ldr	r3, [pc, #492]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 8004102:	2104      	movs	r1, #4
 8004104:	438a      	bics	r2, r1
 8004106:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d014      	beq.n	800413a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004110:	f7fd ff2a 	bl	8001f68 <HAL_GetTick>
 8004114:	0003      	movs	r3, r0
 8004116:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004118:	e009      	b.n	800412e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411a:	f7fd ff25 	bl	8001f68 <HAL_GetTick>
 800411e:	0002      	movs	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	4a74      	ldr	r2, [pc, #464]	; (80042f8 <HAL_RCC_OscConfig+0x60c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e0db      	b.n	80042e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800412e:	4b70      	ldr	r3, [pc, #448]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 8004130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004132:	2202      	movs	r2, #2
 8004134:	4013      	ands	r3, r2
 8004136:	d0f0      	beq.n	800411a <HAL_RCC_OscConfig+0x42e>
 8004138:	e013      	b.n	8004162 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413a:	f7fd ff15 	bl	8001f68 <HAL_GetTick>
 800413e:	0003      	movs	r3, r0
 8004140:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004142:	e009      	b.n	8004158 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004144:	f7fd ff10 	bl	8001f68 <HAL_GetTick>
 8004148:	0002      	movs	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	4a6a      	ldr	r2, [pc, #424]	; (80042f8 <HAL_RCC_OscConfig+0x60c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e0c6      	b.n	80042e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004158:	4b65      	ldr	r3, [pc, #404]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 800415a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415c:	2202      	movs	r2, #2
 800415e:	4013      	ands	r3, r2
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004162:	231f      	movs	r3, #31
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d105      	bne.n	8004178 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800416c:	4b60      	ldr	r3, [pc, #384]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 800416e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004170:	4b5f      	ldr	r3, [pc, #380]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 8004172:	4962      	ldr	r1, [pc, #392]	; (80042fc <HAL_RCC_OscConfig+0x610>)
 8004174:	400a      	ands	r2, r1
 8004176:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d100      	bne.n	8004182 <HAL_RCC_OscConfig+0x496>
 8004180:	e0b0      	b.n	80042e4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004182:	4b5b      	ldr	r3, [pc, #364]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	2238      	movs	r2, #56	; 0x38
 8004188:	4013      	ands	r3, r2
 800418a:	2b10      	cmp	r3, #16
 800418c:	d100      	bne.n	8004190 <HAL_RCC_OscConfig+0x4a4>
 800418e:	e078      	b.n	8004282 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	2b02      	cmp	r3, #2
 8004196:	d153      	bne.n	8004240 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004198:	4b55      	ldr	r3, [pc, #340]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	4b54      	ldr	r3, [pc, #336]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 800419e:	4958      	ldr	r1, [pc, #352]	; (8004300 <HAL_RCC_OscConfig+0x614>)
 80041a0:	400a      	ands	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a4:	f7fd fee0 	bl	8001f68 <HAL_GetTick>
 80041a8:	0003      	movs	r3, r0
 80041aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ae:	f7fd fedb 	bl	8001f68 <HAL_GetTick>
 80041b2:	0002      	movs	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e092      	b.n	80042e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041c0:	4b4b      	ldr	r3, [pc, #300]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	049b      	lsls	r3, r3, #18
 80041c8:	4013      	ands	r3, r2
 80041ca:	d1f0      	bne.n	80041ae <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041cc:	4b48      	ldr	r3, [pc, #288]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4a4c      	ldr	r2, [pc, #304]	; (8004304 <HAL_RCC_OscConfig+0x618>)
 80041d2:	4013      	ands	r3, r2
 80041d4:	0019      	movs	r1, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1a      	ldr	r2, [r3, #32]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	431a      	orrs	r2, r3
 80041f4:	4b3e      	ldr	r3, [pc, #248]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 80041f6:	430a      	orrs	r2, r1
 80041f8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041fa:	4b3d      	ldr	r3, [pc, #244]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	4b3c      	ldr	r3, [pc, #240]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 8004200:	2180      	movs	r1, #128	; 0x80
 8004202:	0449      	lsls	r1, r1, #17
 8004204:	430a      	orrs	r2, r1
 8004206:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004208:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	4b38      	ldr	r3, [pc, #224]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 800420e:	2180      	movs	r1, #128	; 0x80
 8004210:	0549      	lsls	r1, r1, #21
 8004212:	430a      	orrs	r2, r1
 8004214:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004216:	f7fd fea7 	bl	8001f68 <HAL_GetTick>
 800421a:	0003      	movs	r3, r0
 800421c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004220:	f7fd fea2 	bl	8001f68 <HAL_GetTick>
 8004224:	0002      	movs	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e059      	b.n	80042e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004232:	4b2f      	ldr	r3, [pc, #188]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	2380      	movs	r3, #128	; 0x80
 8004238:	049b      	lsls	r3, r3, #18
 800423a:	4013      	ands	r3, r2
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0x534>
 800423e:	e051      	b.n	80042e4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004240:	4b2b      	ldr	r3, [pc, #172]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4b2a      	ldr	r3, [pc, #168]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 8004246:	492e      	ldr	r1, [pc, #184]	; (8004300 <HAL_RCC_OscConfig+0x614>)
 8004248:	400a      	ands	r2, r1
 800424a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fd fe8c 	bl	8001f68 <HAL_GetTick>
 8004250:	0003      	movs	r3, r0
 8004252:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004256:	f7fd fe87 	bl	8001f68 <HAL_GetTick>
 800425a:	0002      	movs	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e03e      	b.n	80042e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004268:	4b21      	ldr	r3, [pc, #132]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	2380      	movs	r3, #128	; 0x80
 800426e:	049b      	lsls	r3, r3, #18
 8004270:	4013      	ands	r3, r2
 8004272:	d1f0      	bne.n	8004256 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004274:	4b1e      	ldr	r3, [pc, #120]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	4b1d      	ldr	r3, [pc, #116]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 800427a:	4923      	ldr	r1, [pc, #140]	; (8004308 <HAL_RCC_OscConfig+0x61c>)
 800427c:	400a      	ands	r2, r1
 800427e:	60da      	str	r2, [r3, #12]
 8004280:	e030      	b.n	80042e4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e02b      	b.n	80042e6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800428e:	4b18      	ldr	r3, [pc, #96]	; (80042f0 <HAL_RCC_OscConfig+0x604>)
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2203      	movs	r2, #3
 8004298:	401a      	ands	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d11e      	bne.n	80042e0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2270      	movs	r2, #112	; 0x70
 80042a6:	401a      	ands	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d117      	bne.n	80042e0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	23fe      	movs	r3, #254	; 0xfe
 80042b4:	01db      	lsls	r3, r3, #7
 80042b6:	401a      	ands	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042be:	429a      	cmp	r2, r3
 80042c0:	d10e      	bne.n	80042e0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	23f8      	movs	r3, #248	; 0xf8
 80042c6:	039b      	lsls	r3, r3, #14
 80042c8:	401a      	ands	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d106      	bne.n	80042e0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	0f5b      	lsrs	r3, r3, #29
 80042d6:	075a      	lsls	r2, r3, #29
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80042dc:	429a      	cmp	r2, r3
 80042de:	d001      	beq.n	80042e4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	0018      	movs	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b008      	add	sp, #32
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	40021000 	.word	0x40021000
 80042f4:	40007000 	.word	0x40007000
 80042f8:	00001388 	.word	0x00001388
 80042fc:	efffffff 	.word	0xefffffff
 8004300:	feffffff 	.word	0xfeffffff
 8004304:	1fc1808c 	.word	0x1fc1808c
 8004308:	effefffc 	.word	0xeffefffc

0800430c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e0e9      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004320:	4b76      	ldr	r3, [pc, #472]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2207      	movs	r2, #7
 8004326:	4013      	ands	r3, r2
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d91e      	bls.n	800436c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432e:	4b73      	ldr	r3, [pc, #460]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2207      	movs	r2, #7
 8004334:	4393      	bics	r3, r2
 8004336:	0019      	movs	r1, r3
 8004338:	4b70      	ldr	r3, [pc, #448]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004340:	f7fd fe12 	bl	8001f68 <HAL_GetTick>
 8004344:	0003      	movs	r3, r0
 8004346:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004348:	e009      	b.n	800435e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800434a:	f7fd fe0d 	bl	8001f68 <HAL_GetTick>
 800434e:	0002      	movs	r2, r0
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	4a6a      	ldr	r2, [pc, #424]	; (8004500 <HAL_RCC_ClockConfig+0x1f4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e0ca      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800435e:	4b67      	ldr	r3, [pc, #412]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2207      	movs	r2, #7
 8004364:	4013      	ands	r3, r2
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d1ee      	bne.n	800434a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2202      	movs	r2, #2
 8004372:	4013      	ands	r3, r2
 8004374:	d015      	beq.n	80043a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2204      	movs	r2, #4
 800437c:	4013      	ands	r3, r2
 800437e:	d006      	beq.n	800438e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004380:	4b60      	ldr	r3, [pc, #384]	; (8004504 <HAL_RCC_ClockConfig+0x1f8>)
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	4b5f      	ldr	r3, [pc, #380]	; (8004504 <HAL_RCC_ClockConfig+0x1f8>)
 8004386:	21e0      	movs	r1, #224	; 0xe0
 8004388:	01c9      	lsls	r1, r1, #7
 800438a:	430a      	orrs	r2, r1
 800438c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800438e:	4b5d      	ldr	r3, [pc, #372]	; (8004504 <HAL_RCC_ClockConfig+0x1f8>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	4a5d      	ldr	r2, [pc, #372]	; (8004508 <HAL_RCC_ClockConfig+0x1fc>)
 8004394:	4013      	ands	r3, r2
 8004396:	0019      	movs	r1, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	4b59      	ldr	r3, [pc, #356]	; (8004504 <HAL_RCC_ClockConfig+0x1f8>)
 800439e:	430a      	orrs	r2, r1
 80043a0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2201      	movs	r2, #1
 80043a8:	4013      	ands	r3, r2
 80043aa:	d057      	beq.n	800445c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d107      	bne.n	80043c4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043b4:	4b53      	ldr	r3, [pc, #332]	; (8004504 <HAL_RCC_ClockConfig+0x1f8>)
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	029b      	lsls	r3, r3, #10
 80043bc:	4013      	ands	r3, r2
 80043be:	d12b      	bne.n	8004418 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e097      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d107      	bne.n	80043dc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043cc:	4b4d      	ldr	r3, [pc, #308]	; (8004504 <HAL_RCC_ClockConfig+0x1f8>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	2380      	movs	r3, #128	; 0x80
 80043d2:	049b      	lsls	r3, r3, #18
 80043d4:	4013      	ands	r3, r2
 80043d6:	d11f      	bne.n	8004418 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e08b      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d107      	bne.n	80043f4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043e4:	4b47      	ldr	r3, [pc, #284]	; (8004504 <HAL_RCC_ClockConfig+0x1f8>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	2380      	movs	r3, #128	; 0x80
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	4013      	ands	r3, r2
 80043ee:	d113      	bne.n	8004418 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e07f      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d106      	bne.n	800440a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043fc:	4b41      	ldr	r3, [pc, #260]	; (8004504 <HAL_RCC_ClockConfig+0x1f8>)
 80043fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004400:	2202      	movs	r2, #2
 8004402:	4013      	ands	r3, r2
 8004404:	d108      	bne.n	8004418 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e074      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800440a:	4b3e      	ldr	r3, [pc, #248]	; (8004504 <HAL_RCC_ClockConfig+0x1f8>)
 800440c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440e:	2202      	movs	r2, #2
 8004410:	4013      	ands	r3, r2
 8004412:	d101      	bne.n	8004418 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e06d      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004418:	4b3a      	ldr	r3, [pc, #232]	; (8004504 <HAL_RCC_ClockConfig+0x1f8>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2207      	movs	r2, #7
 800441e:	4393      	bics	r3, r2
 8004420:	0019      	movs	r1, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	4b37      	ldr	r3, [pc, #220]	; (8004504 <HAL_RCC_ClockConfig+0x1f8>)
 8004428:	430a      	orrs	r2, r1
 800442a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800442c:	f7fd fd9c 	bl	8001f68 <HAL_GetTick>
 8004430:	0003      	movs	r3, r0
 8004432:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004434:	e009      	b.n	800444a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004436:	f7fd fd97 	bl	8001f68 <HAL_GetTick>
 800443a:	0002      	movs	r2, r0
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	4a2f      	ldr	r2, [pc, #188]	; (8004500 <HAL_RCC_ClockConfig+0x1f4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e054      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444a:	4b2e      	ldr	r3, [pc, #184]	; (8004504 <HAL_RCC_ClockConfig+0x1f8>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	2238      	movs	r2, #56	; 0x38
 8004450:	401a      	ands	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	429a      	cmp	r2, r3
 800445a:	d1ec      	bne.n	8004436 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800445c:	4b27      	ldr	r3, [pc, #156]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2207      	movs	r2, #7
 8004462:	4013      	ands	r3, r2
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d21e      	bcs.n	80044a8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446a:	4b24      	ldr	r3, [pc, #144]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2207      	movs	r2, #7
 8004470:	4393      	bics	r3, r2
 8004472:	0019      	movs	r1, r3
 8004474:	4b21      	ldr	r3, [pc, #132]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800447c:	f7fd fd74 	bl	8001f68 <HAL_GetTick>
 8004480:	0003      	movs	r3, r0
 8004482:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004484:	e009      	b.n	800449a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004486:	f7fd fd6f 	bl	8001f68 <HAL_GetTick>
 800448a:	0002      	movs	r2, r0
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	4a1b      	ldr	r2, [pc, #108]	; (8004500 <HAL_RCC_ClockConfig+0x1f4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d901      	bls.n	800449a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e02c      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800449a:	4b18      	ldr	r3, [pc, #96]	; (80044fc <HAL_RCC_ClockConfig+0x1f0>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2207      	movs	r2, #7
 80044a0:	4013      	ands	r3, r2
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d1ee      	bne.n	8004486 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2204      	movs	r2, #4
 80044ae:	4013      	ands	r3, r2
 80044b0:	d009      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80044b2:	4b14      	ldr	r3, [pc, #80]	; (8004504 <HAL_RCC_ClockConfig+0x1f8>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	4a15      	ldr	r2, [pc, #84]	; (800450c <HAL_RCC_ClockConfig+0x200>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	0019      	movs	r1, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	4b10      	ldr	r3, [pc, #64]	; (8004504 <HAL_RCC_ClockConfig+0x1f8>)
 80044c2:	430a      	orrs	r2, r1
 80044c4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80044c6:	f000 f829 	bl	800451c <HAL_RCC_GetSysClockFreq>
 80044ca:	0001      	movs	r1, r0
 80044cc:	4b0d      	ldr	r3, [pc, #52]	; (8004504 <HAL_RCC_ClockConfig+0x1f8>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	0a1b      	lsrs	r3, r3, #8
 80044d2:	220f      	movs	r2, #15
 80044d4:	401a      	ands	r2, r3
 80044d6:	4b0e      	ldr	r3, [pc, #56]	; (8004510 <HAL_RCC_ClockConfig+0x204>)
 80044d8:	0092      	lsls	r2, r2, #2
 80044da:	58d3      	ldr	r3, [r2, r3]
 80044dc:	221f      	movs	r2, #31
 80044de:	4013      	ands	r3, r2
 80044e0:	000a      	movs	r2, r1
 80044e2:	40da      	lsrs	r2, r3
 80044e4:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <HAL_RCC_ClockConfig+0x208>)
 80044e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <HAL_RCC_ClockConfig+0x20c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	0018      	movs	r0, r3
 80044ee:	f7fd fcdf 	bl	8001eb0 <HAL_InitTick>
 80044f2:	0003      	movs	r3, r0
}
 80044f4:	0018      	movs	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	b004      	add	sp, #16
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40022000 	.word	0x40022000
 8004500:	00001388 	.word	0x00001388
 8004504:	40021000 	.word	0x40021000
 8004508:	fffff0ff 	.word	0xfffff0ff
 800450c:	ffff8fff 	.word	0xffff8fff
 8004510:	08007d4c 	.word	0x08007d4c
 8004514:	20000000 	.word	0x20000000
 8004518:	20000004 	.word	0x20000004

0800451c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004522:	4b3c      	ldr	r3, [pc, #240]	; (8004614 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	2238      	movs	r2, #56	; 0x38
 8004528:	4013      	ands	r3, r2
 800452a:	d10f      	bne.n	800454c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800452c:	4b39      	ldr	r3, [pc, #228]	; (8004614 <HAL_RCC_GetSysClockFreq+0xf8>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	0adb      	lsrs	r3, r3, #11
 8004532:	2207      	movs	r2, #7
 8004534:	4013      	ands	r3, r2
 8004536:	2201      	movs	r2, #1
 8004538:	409a      	lsls	r2, r3
 800453a:	0013      	movs	r3, r2
 800453c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800453e:	6839      	ldr	r1, [r7, #0]
 8004540:	4835      	ldr	r0, [pc, #212]	; (8004618 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004542:	f7fb fddd 	bl	8000100 <__udivsi3>
 8004546:	0003      	movs	r3, r0
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	e05d      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800454c:	4b31      	ldr	r3, [pc, #196]	; (8004614 <HAL_RCC_GetSysClockFreq+0xf8>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2238      	movs	r2, #56	; 0x38
 8004552:	4013      	ands	r3, r2
 8004554:	2b08      	cmp	r3, #8
 8004556:	d102      	bne.n	800455e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004558:	4b30      	ldr	r3, [pc, #192]	; (800461c <HAL_RCC_GetSysClockFreq+0x100>)
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	e054      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800455e:	4b2d      	ldr	r3, [pc, #180]	; (8004614 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	2238      	movs	r2, #56	; 0x38
 8004564:	4013      	ands	r3, r2
 8004566:	2b10      	cmp	r3, #16
 8004568:	d138      	bne.n	80045dc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800456a:	4b2a      	ldr	r3, [pc, #168]	; (8004614 <HAL_RCC_GetSysClockFreq+0xf8>)
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	2203      	movs	r2, #3
 8004570:	4013      	ands	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004574:	4b27      	ldr	r3, [pc, #156]	; (8004614 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	091b      	lsrs	r3, r3, #4
 800457a:	2207      	movs	r2, #7
 800457c:	4013      	ands	r3, r2
 800457e:	3301      	adds	r3, #1
 8004580:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b03      	cmp	r3, #3
 8004586:	d10d      	bne.n	80045a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004588:	68b9      	ldr	r1, [r7, #8]
 800458a:	4824      	ldr	r0, [pc, #144]	; (800461c <HAL_RCC_GetSysClockFreq+0x100>)
 800458c:	f7fb fdb8 	bl	8000100 <__udivsi3>
 8004590:	0003      	movs	r3, r0
 8004592:	0019      	movs	r1, r3
 8004594:	4b1f      	ldr	r3, [pc, #124]	; (8004614 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	0a1b      	lsrs	r3, r3, #8
 800459a:	227f      	movs	r2, #127	; 0x7f
 800459c:	4013      	ands	r3, r2
 800459e:	434b      	muls	r3, r1
 80045a0:	617b      	str	r3, [r7, #20]
        break;
 80045a2:	e00d      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	481c      	ldr	r0, [pc, #112]	; (8004618 <HAL_RCC_GetSysClockFreq+0xfc>)
 80045a8:	f7fb fdaa 	bl	8000100 <__udivsi3>
 80045ac:	0003      	movs	r3, r0
 80045ae:	0019      	movs	r1, r3
 80045b0:	4b18      	ldr	r3, [pc, #96]	; (8004614 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	0a1b      	lsrs	r3, r3, #8
 80045b6:	227f      	movs	r2, #127	; 0x7f
 80045b8:	4013      	ands	r3, r2
 80045ba:	434b      	muls	r3, r1
 80045bc:	617b      	str	r3, [r7, #20]
        break;
 80045be:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80045c0:	4b14      	ldr	r3, [pc, #80]	; (8004614 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	0f5b      	lsrs	r3, r3, #29
 80045c6:	2207      	movs	r2, #7
 80045c8:	4013      	ands	r3, r2
 80045ca:	3301      	adds	r3, #1
 80045cc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	6978      	ldr	r0, [r7, #20]
 80045d2:	f7fb fd95 	bl	8000100 <__udivsi3>
 80045d6:	0003      	movs	r3, r0
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	e015      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80045dc:	4b0d      	ldr	r3, [pc, #52]	; (8004614 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2238      	movs	r2, #56	; 0x38
 80045e2:	4013      	ands	r3, r2
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d103      	bne.n	80045f0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80045e8:	2380      	movs	r3, #128	; 0x80
 80045ea:	021b      	lsls	r3, r3, #8
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	e00b      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80045f0:	4b08      	ldr	r3, [pc, #32]	; (8004614 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	2238      	movs	r2, #56	; 0x38
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b18      	cmp	r3, #24
 80045fa:	d103      	bne.n	8004604 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80045fc:	23fa      	movs	r3, #250	; 0xfa
 80045fe:	01db      	lsls	r3, r3, #7
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	e001      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004608:	693b      	ldr	r3, [r7, #16]
}
 800460a:	0018      	movs	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	b006      	add	sp, #24
 8004610:	bd80      	pop	{r7, pc}
 8004612:	46c0      	nop			; (mov r8, r8)
 8004614:	40021000 	.word	0x40021000
 8004618:	00f42400 	.word	0x00f42400
 800461c:	007a1200 	.word	0x007a1200

08004620 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004628:	2313      	movs	r3, #19
 800462a:	18fb      	adds	r3, r7, r3
 800462c:	2200      	movs	r2, #0
 800462e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004630:	2312      	movs	r3, #18
 8004632:	18fb      	adds	r3, r7, r3
 8004634:	2200      	movs	r2, #0
 8004636:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	2380      	movs	r3, #128	; 0x80
 800463e:	029b      	lsls	r3, r3, #10
 8004640:	4013      	ands	r3, r2
 8004642:	d100      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004644:	e0a3      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004646:	2011      	movs	r0, #17
 8004648:	183b      	adds	r3, r7, r0
 800464a:	2200      	movs	r2, #0
 800464c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800464e:	4b86      	ldr	r3, [pc, #536]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004650:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004652:	2380      	movs	r3, #128	; 0x80
 8004654:	055b      	lsls	r3, r3, #21
 8004656:	4013      	ands	r3, r2
 8004658:	d110      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800465a:	4b83      	ldr	r3, [pc, #524]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800465c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800465e:	4b82      	ldr	r3, [pc, #520]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004660:	2180      	movs	r1, #128	; 0x80
 8004662:	0549      	lsls	r1, r1, #21
 8004664:	430a      	orrs	r2, r1
 8004666:	63da      	str	r2, [r3, #60]	; 0x3c
 8004668:	4b7f      	ldr	r3, [pc, #508]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800466a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800466c:	2380      	movs	r3, #128	; 0x80
 800466e:	055b      	lsls	r3, r3, #21
 8004670:	4013      	ands	r3, r2
 8004672:	60bb      	str	r3, [r7, #8]
 8004674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004676:	183b      	adds	r3, r7, r0
 8004678:	2201      	movs	r2, #1
 800467a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800467c:	4b7b      	ldr	r3, [pc, #492]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	4b7a      	ldr	r3, [pc, #488]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004682:	2180      	movs	r1, #128	; 0x80
 8004684:	0049      	lsls	r1, r1, #1
 8004686:	430a      	orrs	r2, r1
 8004688:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800468a:	f7fd fc6d 	bl	8001f68 <HAL_GetTick>
 800468e:	0003      	movs	r3, r0
 8004690:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004692:	e00b      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004694:	f7fd fc68 	bl	8001f68 <HAL_GetTick>
 8004698:	0002      	movs	r2, r0
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d904      	bls.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80046a2:	2313      	movs	r3, #19
 80046a4:	18fb      	adds	r3, r7, r3
 80046a6:	2203      	movs	r2, #3
 80046a8:	701a      	strb	r2, [r3, #0]
        break;
 80046aa:	e005      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046ac:	4b6f      	ldr	r3, [pc, #444]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	2380      	movs	r3, #128	; 0x80
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	4013      	ands	r3, r2
 80046b6:	d0ed      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80046b8:	2313      	movs	r3, #19
 80046ba:	18fb      	adds	r3, r7, r3
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d154      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046c2:	4b69      	ldr	r3, [pc, #420]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046c6:	23c0      	movs	r3, #192	; 0xc0
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4013      	ands	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d019      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d014      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046de:	4b62      	ldr	r3, [pc, #392]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e2:	4a63      	ldr	r2, [pc, #396]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80046e4:	4013      	ands	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046e8:	4b5f      	ldr	r3, [pc, #380]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046ec:	4b5e      	ldr	r3, [pc, #376]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046ee:	2180      	movs	r1, #128	; 0x80
 80046f0:	0249      	lsls	r1, r1, #9
 80046f2:	430a      	orrs	r2, r1
 80046f4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046f6:	4b5c      	ldr	r3, [pc, #368]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046fa:	4b5b      	ldr	r3, [pc, #364]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046fc:	495d      	ldr	r1, [pc, #372]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046fe:	400a      	ands	r2, r1
 8004700:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004702:	4b59      	ldr	r3, [pc, #356]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2201      	movs	r2, #1
 800470c:	4013      	ands	r3, r2
 800470e:	d016      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7fd fc2a 	bl	8001f68 <HAL_GetTick>
 8004714:	0003      	movs	r3, r0
 8004716:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004718:	e00c      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800471a:	f7fd fc25 	bl	8001f68 <HAL_GetTick>
 800471e:	0002      	movs	r2, r0
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	4a54      	ldr	r2, [pc, #336]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d904      	bls.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800472a:	2313      	movs	r3, #19
 800472c:	18fb      	adds	r3, r7, r3
 800472e:	2203      	movs	r2, #3
 8004730:	701a      	strb	r2, [r3, #0]
            break;
 8004732:	e004      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004734:	4b4c      	ldr	r3, [pc, #304]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004738:	2202      	movs	r2, #2
 800473a:	4013      	ands	r3, r2
 800473c:	d0ed      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800473e:	2313      	movs	r3, #19
 8004740:	18fb      	adds	r3, r7, r3
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10a      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004748:	4b47      	ldr	r3, [pc, #284]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800474a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474c:	4a48      	ldr	r2, [pc, #288]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800474e:	4013      	ands	r3, r2
 8004750:	0019      	movs	r1, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	4b44      	ldr	r3, [pc, #272]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004758:	430a      	orrs	r2, r1
 800475a:	65da      	str	r2, [r3, #92]	; 0x5c
 800475c:	e00c      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800475e:	2312      	movs	r3, #18
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	2213      	movs	r2, #19
 8004764:	18ba      	adds	r2, r7, r2
 8004766:	7812      	ldrb	r2, [r2, #0]
 8004768:	701a      	strb	r2, [r3, #0]
 800476a:	e005      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476c:	2312      	movs	r3, #18
 800476e:	18fb      	adds	r3, r7, r3
 8004770:	2213      	movs	r2, #19
 8004772:	18ba      	adds	r2, r7, r2
 8004774:	7812      	ldrb	r2, [r2, #0]
 8004776:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004778:	2311      	movs	r3, #17
 800477a:	18fb      	adds	r3, r7, r3
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d105      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004782:	4b39      	ldr	r3, [pc, #228]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004784:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004786:	4b38      	ldr	r3, [pc, #224]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004788:	493c      	ldr	r1, [pc, #240]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800478a:	400a      	ands	r2, r1
 800478c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2201      	movs	r2, #1
 8004794:	4013      	ands	r3, r2
 8004796:	d009      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004798:	4b33      	ldr	r3, [pc, #204]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800479a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479c:	2203      	movs	r2, #3
 800479e:	4393      	bics	r3, r2
 80047a0:	0019      	movs	r1, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	4b30      	ldr	r3, [pc, #192]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047a8:	430a      	orrs	r2, r1
 80047aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2202      	movs	r2, #2
 80047b2:	4013      	ands	r3, r2
 80047b4:	d009      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047b6:	4b2c      	ldr	r3, [pc, #176]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ba:	220c      	movs	r2, #12
 80047bc:	4393      	bics	r3, r2
 80047be:	0019      	movs	r1, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	4b28      	ldr	r3, [pc, #160]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047c6:	430a      	orrs	r2, r1
 80047c8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2220      	movs	r2, #32
 80047d0:	4013      	ands	r3, r2
 80047d2:	d009      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047d4:	4b24      	ldr	r3, [pc, #144]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d8:	4a29      	ldr	r2, [pc, #164]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047da:	4013      	ands	r3, r2
 80047dc:	0019      	movs	r1, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	4b21      	ldr	r3, [pc, #132]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047e4:	430a      	orrs	r2, r1
 80047e6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	2380      	movs	r3, #128	; 0x80
 80047ee:	01db      	lsls	r3, r3, #7
 80047f0:	4013      	ands	r3, r2
 80047f2:	d015      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047f4:	4b1c      	ldr	r3, [pc, #112]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	0899      	lsrs	r1, r3, #2
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	695a      	ldr	r2, [r3, #20]
 8004800:	4b19      	ldr	r3, [pc, #100]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004802:	430a      	orrs	r2, r1
 8004804:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695a      	ldr	r2, [r3, #20]
 800480a:	2380      	movs	r3, #128	; 0x80
 800480c:	05db      	lsls	r3, r3, #23
 800480e:	429a      	cmp	r2, r3
 8004810:	d106      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004812:	4b15      	ldr	r3, [pc, #84]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	4b14      	ldr	r3, [pc, #80]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004818:	2180      	movs	r1, #128	; 0x80
 800481a:	0249      	lsls	r1, r1, #9
 800481c:	430a      	orrs	r2, r1
 800481e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	2380      	movs	r3, #128	; 0x80
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	4013      	ands	r3, r2
 800482a:	d016      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800482c:	4b0e      	ldr	r3, [pc, #56]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800482e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004830:	4a14      	ldr	r2, [pc, #80]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004832:	4013      	ands	r3, r2
 8004834:	0019      	movs	r1, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691a      	ldr	r2, [r3, #16]
 800483a:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800483c:	430a      	orrs	r2, r1
 800483e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	01db      	lsls	r3, r3, #7
 8004848:	429a      	cmp	r2, r3
 800484a:	d106      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800484c:	4b06      	ldr	r3, [pc, #24]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	4b05      	ldr	r3, [pc, #20]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004852:	2180      	movs	r1, #128	; 0x80
 8004854:	0249      	lsls	r1, r1, #9
 8004856:	430a      	orrs	r2, r1
 8004858:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800485a:	2312      	movs	r3, #18
 800485c:	18fb      	adds	r3, r7, r3
 800485e:	781b      	ldrb	r3, [r3, #0]
}
 8004860:	0018      	movs	r0, r3
 8004862:	46bd      	mov	sp, r7
 8004864:	b006      	add	sp, #24
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40021000 	.word	0x40021000
 800486c:	40007000 	.word	0x40007000
 8004870:	fffffcff 	.word	0xfffffcff
 8004874:	fffeffff 	.word	0xfffeffff
 8004878:	00001388 	.word	0x00001388
 800487c:	efffffff 	.word	0xefffffff
 8004880:	ffffcfff 	.word	0xffffcfff
 8004884:	ffff3fff 	.word	0xffff3fff

08004888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e04a      	b.n	8004930 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	223d      	movs	r2, #61	; 0x3d
 800489e:	5c9b      	ldrb	r3, [r3, r2]
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d107      	bne.n	80048b6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	223c      	movs	r2, #60	; 0x3c
 80048aa:	2100      	movs	r1, #0
 80048ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7fd f9cd 	bl	8001c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	223d      	movs	r2, #61	; 0x3d
 80048ba:	2102      	movs	r1, #2
 80048bc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3304      	adds	r3, #4
 80048c6:	0019      	movs	r1, r3
 80048c8:	0010      	movs	r0, r2
 80048ca:	f001 fd1f 	bl	800630c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2248      	movs	r2, #72	; 0x48
 80048d2:	2101      	movs	r1, #1
 80048d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	223e      	movs	r2, #62	; 0x3e
 80048da:	2101      	movs	r1, #1
 80048dc:	5499      	strb	r1, [r3, r2]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	223f      	movs	r2, #63	; 0x3f
 80048e2:	2101      	movs	r1, #1
 80048e4:	5499      	strb	r1, [r3, r2]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2240      	movs	r2, #64	; 0x40
 80048ea:	2101      	movs	r1, #1
 80048ec:	5499      	strb	r1, [r3, r2]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2241      	movs	r2, #65	; 0x41
 80048f2:	2101      	movs	r1, #1
 80048f4:	5499      	strb	r1, [r3, r2]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2242      	movs	r2, #66	; 0x42
 80048fa:	2101      	movs	r1, #1
 80048fc:	5499      	strb	r1, [r3, r2]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2243      	movs	r2, #67	; 0x43
 8004902:	2101      	movs	r1, #1
 8004904:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2244      	movs	r2, #68	; 0x44
 800490a:	2101      	movs	r1, #1
 800490c:	5499      	strb	r1, [r3, r2]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2245      	movs	r2, #69	; 0x45
 8004912:	2101      	movs	r1, #1
 8004914:	5499      	strb	r1, [r3, r2]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2246      	movs	r2, #70	; 0x46
 800491a:	2101      	movs	r1, #1
 800491c:	5499      	strb	r1, [r3, r2]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2247      	movs	r2, #71	; 0x47
 8004922:	2101      	movs	r1, #1
 8004924:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	223d      	movs	r2, #61	; 0x3d
 800492a:	2101      	movs	r1, #1
 800492c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	0018      	movs	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	b002      	add	sp, #8
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	223d      	movs	r2, #61	; 0x3d
 8004944:	5c9b      	ldrb	r3, [r3, r2]
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b01      	cmp	r3, #1
 800494a:	d001      	beq.n	8004950 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e034      	b.n	80049ba <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	223d      	movs	r2, #61	; 0x3d
 8004954:	2102      	movs	r1, #2
 8004956:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a19      	ldr	r2, [pc, #100]	; (80049c4 <HAL_TIM_Base_Start+0x8c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d009      	beq.n	8004976 <HAL_TIM_Base_Start+0x3e>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a18      	ldr	r2, [pc, #96]	; (80049c8 <HAL_TIM_Base_Start+0x90>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d004      	beq.n	8004976 <HAL_TIM_Base_Start+0x3e>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a16      	ldr	r2, [pc, #88]	; (80049cc <HAL_TIM_Base_Start+0x94>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d116      	bne.n	80049a4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	4a14      	ldr	r2, [pc, #80]	; (80049d0 <HAL_TIM_Base_Start+0x98>)
 800497e:	4013      	ands	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b06      	cmp	r3, #6
 8004986:	d016      	beq.n	80049b6 <HAL_TIM_Base_Start+0x7e>
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	2380      	movs	r3, #128	; 0x80
 800498c:	025b      	lsls	r3, r3, #9
 800498e:	429a      	cmp	r2, r3
 8004990:	d011      	beq.n	80049b6 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2101      	movs	r1, #1
 800499e:	430a      	orrs	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a2:	e008      	b.n	80049b6 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2101      	movs	r1, #1
 80049b0:	430a      	orrs	r2, r1
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	e000      	b.n	80049b8 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	0018      	movs	r0, r3
 80049bc:	46bd      	mov	sp, r7
 80049be:	b004      	add	sp, #16
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	40012c00 	.word	0x40012c00
 80049c8:	40000400 	.word	0x40000400
 80049cc:	40014000 	.word	0x40014000
 80049d0:	00010007 	.word	0x00010007

080049d4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e04a      	b.n	8004a7c <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	223d      	movs	r2, #61	; 0x3d
 80049ea:	5c9b      	ldrb	r3, [r3, r2]
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d107      	bne.n	8004a02 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	223c      	movs	r2, #60	; 0x3c
 80049f6:	2100      	movs	r1, #0
 80049f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	0018      	movs	r0, r3
 80049fe:	f000 f841 	bl	8004a84 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	223d      	movs	r2, #61	; 0x3d
 8004a06:	2102      	movs	r1, #2
 8004a08:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3304      	adds	r3, #4
 8004a12:	0019      	movs	r1, r3
 8004a14:	0010      	movs	r0, r2
 8004a16:	f001 fc79 	bl	800630c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2248      	movs	r2, #72	; 0x48
 8004a1e:	2101      	movs	r1, #1
 8004a20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	223e      	movs	r2, #62	; 0x3e
 8004a26:	2101      	movs	r1, #1
 8004a28:	5499      	strb	r1, [r3, r2]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	223f      	movs	r2, #63	; 0x3f
 8004a2e:	2101      	movs	r1, #1
 8004a30:	5499      	strb	r1, [r3, r2]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2240      	movs	r2, #64	; 0x40
 8004a36:	2101      	movs	r1, #1
 8004a38:	5499      	strb	r1, [r3, r2]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2241      	movs	r2, #65	; 0x41
 8004a3e:	2101      	movs	r1, #1
 8004a40:	5499      	strb	r1, [r3, r2]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2242      	movs	r2, #66	; 0x42
 8004a46:	2101      	movs	r1, #1
 8004a48:	5499      	strb	r1, [r3, r2]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2243      	movs	r2, #67	; 0x43
 8004a4e:	2101      	movs	r1, #1
 8004a50:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2244      	movs	r2, #68	; 0x44
 8004a56:	2101      	movs	r1, #1
 8004a58:	5499      	strb	r1, [r3, r2]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2245      	movs	r2, #69	; 0x45
 8004a5e:	2101      	movs	r1, #1
 8004a60:	5499      	strb	r1, [r3, r2]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2246      	movs	r2, #70	; 0x46
 8004a66:	2101      	movs	r1, #1
 8004a68:	5499      	strb	r1, [r3, r2]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2247      	movs	r2, #71	; 0x47
 8004a6e:	2101      	movs	r1, #1
 8004a70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	223d      	movs	r2, #61	; 0x3d
 8004a76:	2101      	movs	r1, #1
 8004a78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	b002      	add	sp, #8
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004a8c:	46c0      	nop			; (mov r8, r8)
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b002      	add	sp, #8
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a9e:	230f      	movs	r3, #15
 8004aa0:	18fb      	adds	r3, r7, r3
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d108      	bne.n	8004abe <HAL_TIM_OC_Start_IT+0x2a>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	223e      	movs	r2, #62	; 0x3e
 8004ab0:	5c9b      	ldrb	r3, [r3, r2]
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	1e5a      	subs	r2, r3, #1
 8004ab8:	4193      	sbcs	r3, r2
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	e037      	b.n	8004b2e <HAL_TIM_OC_Start_IT+0x9a>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d108      	bne.n	8004ad6 <HAL_TIM_OC_Start_IT+0x42>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	223f      	movs	r2, #63	; 0x3f
 8004ac8:	5c9b      	ldrb	r3, [r3, r2]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	3b01      	subs	r3, #1
 8004ace:	1e5a      	subs	r2, r3, #1
 8004ad0:	4193      	sbcs	r3, r2
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	e02b      	b.n	8004b2e <HAL_TIM_OC_Start_IT+0x9a>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d108      	bne.n	8004aee <HAL_TIM_OC_Start_IT+0x5a>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2240      	movs	r2, #64	; 0x40
 8004ae0:	5c9b      	ldrb	r3, [r3, r2]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	1e5a      	subs	r2, r3, #1
 8004ae8:	4193      	sbcs	r3, r2
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	e01f      	b.n	8004b2e <HAL_TIM_OC_Start_IT+0x9a>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b0c      	cmp	r3, #12
 8004af2:	d108      	bne.n	8004b06 <HAL_TIM_OC_Start_IT+0x72>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2241      	movs	r2, #65	; 0x41
 8004af8:	5c9b      	ldrb	r3, [r3, r2]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	1e5a      	subs	r2, r3, #1
 8004b00:	4193      	sbcs	r3, r2
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	e013      	b.n	8004b2e <HAL_TIM_OC_Start_IT+0x9a>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b10      	cmp	r3, #16
 8004b0a:	d108      	bne.n	8004b1e <HAL_TIM_OC_Start_IT+0x8a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2242      	movs	r2, #66	; 0x42
 8004b10:	5c9b      	ldrb	r3, [r3, r2]
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	3b01      	subs	r3, #1
 8004b16:	1e5a      	subs	r2, r3, #1
 8004b18:	4193      	sbcs	r3, r2
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	e007      	b.n	8004b2e <HAL_TIM_OC_Start_IT+0x9a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2243      	movs	r2, #67	; 0x43
 8004b22:	5c9b      	ldrb	r3, [r3, r2]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	3b01      	subs	r3, #1
 8004b28:	1e5a      	subs	r2, r3, #1
 8004b2a:	4193      	sbcs	r3, r2
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e0c8      	b.n	8004cc8 <HAL_TIM_OC_Start_IT+0x234>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d104      	bne.n	8004b46 <HAL_TIM_OC_Start_IT+0xb2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	223e      	movs	r2, #62	; 0x3e
 8004b40:	2102      	movs	r1, #2
 8004b42:	5499      	strb	r1, [r3, r2]
 8004b44:	e023      	b.n	8004b8e <HAL_TIM_OC_Start_IT+0xfa>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d104      	bne.n	8004b56 <HAL_TIM_OC_Start_IT+0xc2>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	223f      	movs	r2, #63	; 0x3f
 8004b50:	2102      	movs	r1, #2
 8004b52:	5499      	strb	r1, [r3, r2]
 8004b54:	e01b      	b.n	8004b8e <HAL_TIM_OC_Start_IT+0xfa>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d104      	bne.n	8004b66 <HAL_TIM_OC_Start_IT+0xd2>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2240      	movs	r2, #64	; 0x40
 8004b60:	2102      	movs	r1, #2
 8004b62:	5499      	strb	r1, [r3, r2]
 8004b64:	e013      	b.n	8004b8e <HAL_TIM_OC_Start_IT+0xfa>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b0c      	cmp	r3, #12
 8004b6a:	d104      	bne.n	8004b76 <HAL_TIM_OC_Start_IT+0xe2>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2241      	movs	r2, #65	; 0x41
 8004b70:	2102      	movs	r1, #2
 8004b72:	5499      	strb	r1, [r3, r2]
 8004b74:	e00b      	b.n	8004b8e <HAL_TIM_OC_Start_IT+0xfa>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b10      	cmp	r3, #16
 8004b7a:	d104      	bne.n	8004b86 <HAL_TIM_OC_Start_IT+0xf2>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2242      	movs	r2, #66	; 0x42
 8004b80:	2102      	movs	r1, #2
 8004b82:	5499      	strb	r1, [r3, r2]
 8004b84:	e003      	b.n	8004b8e <HAL_TIM_OC_Start_IT+0xfa>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2243      	movs	r2, #67	; 0x43
 8004b8a:	2102      	movs	r1, #2
 8004b8c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b0c      	cmp	r3, #12
 8004b92:	d02a      	beq.n	8004bea <HAL_TIM_OC_Start_IT+0x156>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2b0c      	cmp	r3, #12
 8004b98:	d830      	bhi.n	8004bfc <HAL_TIM_OC_Start_IT+0x168>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d01b      	beq.n	8004bd8 <HAL_TIM_OC_Start_IT+0x144>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	d82a      	bhi.n	8004bfc <HAL_TIM_OC_Start_IT+0x168>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_TIM_OC_Start_IT+0x120>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d009      	beq.n	8004bc6 <HAL_TIM_OC_Start_IT+0x132>
 8004bb2:	e023      	b.n	8004bfc <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2102      	movs	r1, #2
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	60da      	str	r2, [r3, #12]
      break;
 8004bc4:	e01f      	b.n	8004c06 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2104      	movs	r1, #4
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	60da      	str	r2, [r3, #12]
      break;
 8004bd6:	e016      	b.n	8004c06 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2108      	movs	r1, #8
 8004be4:	430a      	orrs	r2, r1
 8004be6:	60da      	str	r2, [r3, #12]
      break;
 8004be8:	e00d      	b.n	8004c06 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2110      	movs	r1, #16
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	60da      	str	r2, [r3, #12]
      break;
 8004bfa:	e004      	b.n	8004c06 <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bfc:	230f      	movs	r3, #15
 8004bfe:	18fb      	adds	r3, r7, r3
 8004c00:	2201      	movs	r2, #1
 8004c02:	701a      	strb	r2, [r3, #0]
      break;
 8004c04:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004c06:	230f      	movs	r3, #15
 8004c08:	18fb      	adds	r3, r7, r3
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d158      	bne.n	8004cc2 <HAL_TIM_OC_Start_IT+0x22e>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6839      	ldr	r1, [r7, #0]
 8004c16:	2201      	movs	r2, #1
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f001 ffd1 	bl	8006bc0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a2b      	ldr	r2, [pc, #172]	; (8004cd0 <HAL_TIM_OC_Start_IT+0x23c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00e      	beq.n	8004c46 <HAL_TIM_OC_Start_IT+0x1b2>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a29      	ldr	r2, [pc, #164]	; (8004cd4 <HAL_TIM_OC_Start_IT+0x240>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d009      	beq.n	8004c46 <HAL_TIM_OC_Start_IT+0x1b2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a28      	ldr	r2, [pc, #160]	; (8004cd8 <HAL_TIM_OC_Start_IT+0x244>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d004      	beq.n	8004c46 <HAL_TIM_OC_Start_IT+0x1b2>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a26      	ldr	r2, [pc, #152]	; (8004cdc <HAL_TIM_OC_Start_IT+0x248>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d101      	bne.n	8004c4a <HAL_TIM_OC_Start_IT+0x1b6>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <HAL_TIM_OC_Start_IT+0x1b8>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d008      	beq.n	8004c62 <HAL_TIM_OC_Start_IT+0x1ce>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2180      	movs	r1, #128	; 0x80
 8004c5c:	0209      	lsls	r1, r1, #8
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1a      	ldr	r2, [pc, #104]	; (8004cd0 <HAL_TIM_OC_Start_IT+0x23c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d009      	beq.n	8004c80 <HAL_TIM_OC_Start_IT+0x1ec>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1b      	ldr	r2, [pc, #108]	; (8004ce0 <HAL_TIM_OC_Start_IT+0x24c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d004      	beq.n	8004c80 <HAL_TIM_OC_Start_IT+0x1ec>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a16      	ldr	r2, [pc, #88]	; (8004cd4 <HAL_TIM_OC_Start_IT+0x240>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d116      	bne.n	8004cae <HAL_TIM_OC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	4a17      	ldr	r2, [pc, #92]	; (8004ce4 <HAL_TIM_OC_Start_IT+0x250>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b06      	cmp	r3, #6
 8004c90:	d016      	beq.n	8004cc0 <HAL_TIM_OC_Start_IT+0x22c>
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	2380      	movs	r3, #128	; 0x80
 8004c96:	025b      	lsls	r3, r3, #9
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d011      	beq.n	8004cc0 <HAL_TIM_OC_Start_IT+0x22c>
      {
        __HAL_TIM_ENABLE(htim);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cac:	e008      	b.n	8004cc0 <HAL_TIM_OC_Start_IT+0x22c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2101      	movs	r1, #1
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	e000      	b.n	8004cc2 <HAL_TIM_OC_Start_IT+0x22e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc0:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8004cc2:	230f      	movs	r3, #15
 8004cc4:	18fb      	adds	r3, r7, r3
 8004cc6:	781b      	ldrb	r3, [r3, #0]
}
 8004cc8:	0018      	movs	r0, r3
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	b004      	add	sp, #16
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40012c00 	.word	0x40012c00
 8004cd4:	40014000 	.word	0x40014000
 8004cd8:	40014400 	.word	0x40014400
 8004cdc:	40014800 	.word	0x40014800
 8004ce0:	40000400 	.word	0x40000400
 8004ce4:	00010007 	.word	0x00010007

08004ce8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e04a      	b.n	8004d90 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	223d      	movs	r2, #61	; 0x3d
 8004cfe:	5c9b      	ldrb	r3, [r3, r2]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d107      	bne.n	8004d16 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	223c      	movs	r2, #60	; 0x3c
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	0018      	movs	r0, r3
 8004d12:	f7fc feef 	bl	8001af4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	223d      	movs	r2, #61	; 0x3d
 8004d1a:	2102      	movs	r1, #2
 8004d1c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3304      	adds	r3, #4
 8004d26:	0019      	movs	r1, r3
 8004d28:	0010      	movs	r0, r2
 8004d2a:	f001 faef 	bl	800630c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2248      	movs	r2, #72	; 0x48
 8004d32:	2101      	movs	r1, #1
 8004d34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	223e      	movs	r2, #62	; 0x3e
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	5499      	strb	r1, [r3, r2]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	223f      	movs	r2, #63	; 0x3f
 8004d42:	2101      	movs	r1, #1
 8004d44:	5499      	strb	r1, [r3, r2]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2240      	movs	r2, #64	; 0x40
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	5499      	strb	r1, [r3, r2]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2241      	movs	r2, #65	; 0x41
 8004d52:	2101      	movs	r1, #1
 8004d54:	5499      	strb	r1, [r3, r2]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2242      	movs	r2, #66	; 0x42
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	5499      	strb	r1, [r3, r2]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2243      	movs	r2, #67	; 0x43
 8004d62:	2101      	movs	r1, #1
 8004d64:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2244      	movs	r2, #68	; 0x44
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	5499      	strb	r1, [r3, r2]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2245      	movs	r2, #69	; 0x45
 8004d72:	2101      	movs	r1, #1
 8004d74:	5499      	strb	r1, [r3, r2]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2246      	movs	r2, #70	; 0x46
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	5499      	strb	r1, [r3, r2]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2247      	movs	r2, #71	; 0x47
 8004d82:	2101      	movs	r1, #1
 8004d84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	223d      	movs	r2, #61	; 0x3d
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	0018      	movs	r0, r3
 8004d92:	46bd      	mov	sp, r7
 8004d94:	b002      	add	sp, #8
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d108      	bne.n	8004dba <HAL_TIM_PWM_Start+0x22>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	223e      	movs	r2, #62	; 0x3e
 8004dac:	5c9b      	ldrb	r3, [r3, r2]
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	1e5a      	subs	r2, r3, #1
 8004db4:	4193      	sbcs	r3, r2
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	e037      	b.n	8004e2a <HAL_TIM_PWM_Start+0x92>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d108      	bne.n	8004dd2 <HAL_TIM_PWM_Start+0x3a>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	223f      	movs	r2, #63	; 0x3f
 8004dc4:	5c9b      	ldrb	r3, [r3, r2]
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	1e5a      	subs	r2, r3, #1
 8004dcc:	4193      	sbcs	r3, r2
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	e02b      	b.n	8004e2a <HAL_TIM_PWM_Start+0x92>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d108      	bne.n	8004dea <HAL_TIM_PWM_Start+0x52>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2240      	movs	r2, #64	; 0x40
 8004ddc:	5c9b      	ldrb	r3, [r3, r2]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	1e5a      	subs	r2, r3, #1
 8004de4:	4193      	sbcs	r3, r2
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	e01f      	b.n	8004e2a <HAL_TIM_PWM_Start+0x92>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b0c      	cmp	r3, #12
 8004dee:	d108      	bne.n	8004e02 <HAL_TIM_PWM_Start+0x6a>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2241      	movs	r2, #65	; 0x41
 8004df4:	5c9b      	ldrb	r3, [r3, r2]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	1e5a      	subs	r2, r3, #1
 8004dfc:	4193      	sbcs	r3, r2
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	e013      	b.n	8004e2a <HAL_TIM_PWM_Start+0x92>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b10      	cmp	r3, #16
 8004e06:	d108      	bne.n	8004e1a <HAL_TIM_PWM_Start+0x82>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2242      	movs	r2, #66	; 0x42
 8004e0c:	5c9b      	ldrb	r3, [r3, r2]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	1e5a      	subs	r2, r3, #1
 8004e14:	4193      	sbcs	r3, r2
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	e007      	b.n	8004e2a <HAL_TIM_PWM_Start+0x92>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2243      	movs	r2, #67	; 0x43
 8004e1e:	5c9b      	ldrb	r3, [r3, r2]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	1e5a      	subs	r2, r3, #1
 8004e26:	4193      	sbcs	r3, r2
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e085      	b.n	8004f3e <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d104      	bne.n	8004e42 <HAL_TIM_PWM_Start+0xaa>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	223e      	movs	r2, #62	; 0x3e
 8004e3c:	2102      	movs	r1, #2
 8004e3e:	5499      	strb	r1, [r3, r2]
 8004e40:	e023      	b.n	8004e8a <HAL_TIM_PWM_Start+0xf2>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d104      	bne.n	8004e52 <HAL_TIM_PWM_Start+0xba>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	223f      	movs	r2, #63	; 0x3f
 8004e4c:	2102      	movs	r1, #2
 8004e4e:	5499      	strb	r1, [r3, r2]
 8004e50:	e01b      	b.n	8004e8a <HAL_TIM_PWM_Start+0xf2>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d104      	bne.n	8004e62 <HAL_TIM_PWM_Start+0xca>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2240      	movs	r2, #64	; 0x40
 8004e5c:	2102      	movs	r1, #2
 8004e5e:	5499      	strb	r1, [r3, r2]
 8004e60:	e013      	b.n	8004e8a <HAL_TIM_PWM_Start+0xf2>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b0c      	cmp	r3, #12
 8004e66:	d104      	bne.n	8004e72 <HAL_TIM_PWM_Start+0xda>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2241      	movs	r2, #65	; 0x41
 8004e6c:	2102      	movs	r1, #2
 8004e6e:	5499      	strb	r1, [r3, r2]
 8004e70:	e00b      	b.n	8004e8a <HAL_TIM_PWM_Start+0xf2>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b10      	cmp	r3, #16
 8004e76:	d104      	bne.n	8004e82 <HAL_TIM_PWM_Start+0xea>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2242      	movs	r2, #66	; 0x42
 8004e7c:	2102      	movs	r1, #2
 8004e7e:	5499      	strb	r1, [r3, r2]
 8004e80:	e003      	b.n	8004e8a <HAL_TIM_PWM_Start+0xf2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2243      	movs	r2, #67	; 0x43
 8004e86:	2102      	movs	r1, #2
 8004e88:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6839      	ldr	r1, [r7, #0]
 8004e90:	2201      	movs	r2, #1
 8004e92:	0018      	movs	r0, r3
 8004e94:	f001 fe94 	bl	8006bc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a2a      	ldr	r2, [pc, #168]	; (8004f48 <HAL_TIM_PWM_Start+0x1b0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00e      	beq.n	8004ec0 <HAL_TIM_PWM_Start+0x128>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a29      	ldr	r2, [pc, #164]	; (8004f4c <HAL_TIM_PWM_Start+0x1b4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d009      	beq.n	8004ec0 <HAL_TIM_PWM_Start+0x128>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a27      	ldr	r2, [pc, #156]	; (8004f50 <HAL_TIM_PWM_Start+0x1b8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d004      	beq.n	8004ec0 <HAL_TIM_PWM_Start+0x128>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a26      	ldr	r2, [pc, #152]	; (8004f54 <HAL_TIM_PWM_Start+0x1bc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d101      	bne.n	8004ec4 <HAL_TIM_PWM_Start+0x12c>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <HAL_TIM_PWM_Start+0x12e>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d008      	beq.n	8004edc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2180      	movs	r1, #128	; 0x80
 8004ed6:	0209      	lsls	r1, r1, #8
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a19      	ldr	r2, [pc, #100]	; (8004f48 <HAL_TIM_PWM_Start+0x1b0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d009      	beq.n	8004efa <HAL_TIM_PWM_Start+0x162>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a1b      	ldr	r2, [pc, #108]	; (8004f58 <HAL_TIM_PWM_Start+0x1c0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d004      	beq.n	8004efa <HAL_TIM_PWM_Start+0x162>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a15      	ldr	r2, [pc, #84]	; (8004f4c <HAL_TIM_PWM_Start+0x1b4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d116      	bne.n	8004f28 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	4a16      	ldr	r2, [pc, #88]	; (8004f5c <HAL_TIM_PWM_Start+0x1c4>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2b06      	cmp	r3, #6
 8004f0a:	d016      	beq.n	8004f3a <HAL_TIM_PWM_Start+0x1a2>
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	2380      	movs	r3, #128	; 0x80
 8004f10:	025b      	lsls	r3, r3, #9
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d011      	beq.n	8004f3a <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2101      	movs	r1, #1
 8004f22:	430a      	orrs	r2, r1
 8004f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f26:	e008      	b.n	8004f3a <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2101      	movs	r1, #1
 8004f34:	430a      	orrs	r2, r1
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	e000      	b.n	8004f3c <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	0018      	movs	r0, r3
 8004f40:	46bd      	mov	sp, r7
 8004f42:	b004      	add	sp, #16
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	40012c00 	.word	0x40012c00
 8004f4c:	40014000 	.word	0x40014000
 8004f50:	40014400 	.word	0x40014400
 8004f54:	40014800 	.word	0x40014800
 8004f58:	40000400 	.word	0x40000400
 8004f5c:	00010007 	.word	0x00010007

08004f60 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	001a      	movs	r2, r3
 8004f6e:	1cbb      	adds	r3, r7, #2
 8004f70:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f72:	2317      	movs	r3, #23
 8004f74:	18fb      	adds	r3, r7, r3
 8004f76:	2200      	movs	r2, #0
 8004f78:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d108      	bne.n	8004f92 <HAL_TIM_PWM_Start_DMA+0x32>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	223e      	movs	r2, #62	; 0x3e
 8004f84:	5c9b      	ldrb	r3, [r3, r2]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	3b02      	subs	r3, #2
 8004f8a:	425a      	negs	r2, r3
 8004f8c:	4153      	adcs	r3, r2
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	e037      	b.n	8005002 <HAL_TIM_PWM_Start_DMA+0xa2>
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d108      	bne.n	8004faa <HAL_TIM_PWM_Start_DMA+0x4a>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	223f      	movs	r2, #63	; 0x3f
 8004f9c:	5c9b      	ldrb	r3, [r3, r2]
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	3b02      	subs	r3, #2
 8004fa2:	425a      	negs	r2, r3
 8004fa4:	4153      	adcs	r3, r2
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	e02b      	b.n	8005002 <HAL_TIM_PWM_Start_DMA+0xa2>
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d108      	bne.n	8004fc2 <HAL_TIM_PWM_Start_DMA+0x62>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2240      	movs	r2, #64	; 0x40
 8004fb4:	5c9b      	ldrb	r3, [r3, r2]
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	3b02      	subs	r3, #2
 8004fba:	425a      	negs	r2, r3
 8004fbc:	4153      	adcs	r3, r2
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	e01f      	b.n	8005002 <HAL_TIM_PWM_Start_DMA+0xa2>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b0c      	cmp	r3, #12
 8004fc6:	d108      	bne.n	8004fda <HAL_TIM_PWM_Start_DMA+0x7a>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2241      	movs	r2, #65	; 0x41
 8004fcc:	5c9b      	ldrb	r3, [r3, r2]
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	3b02      	subs	r3, #2
 8004fd2:	425a      	negs	r2, r3
 8004fd4:	4153      	adcs	r3, r2
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	e013      	b.n	8005002 <HAL_TIM_PWM_Start_DMA+0xa2>
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2b10      	cmp	r3, #16
 8004fde:	d108      	bne.n	8004ff2 <HAL_TIM_PWM_Start_DMA+0x92>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2242      	movs	r2, #66	; 0x42
 8004fe4:	5c9b      	ldrb	r3, [r3, r2]
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	3b02      	subs	r3, #2
 8004fea:	425a      	negs	r2, r3
 8004fec:	4153      	adcs	r3, r2
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	e007      	b.n	8005002 <HAL_TIM_PWM_Start_DMA+0xa2>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2243      	movs	r2, #67	; 0x43
 8004ff6:	5c9b      	ldrb	r3, [r3, r2]
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	3b02      	subs	r3, #2
 8004ffc:	425a      	negs	r2, r3
 8004ffe:	4153      	adcs	r3, r2
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8005006:	2302      	movs	r3, #2
 8005008:	e18d      	b.n	8005326 <HAL_TIM_PWM_Start_DMA+0x3c6>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d108      	bne.n	8005022 <HAL_TIM_PWM_Start_DMA+0xc2>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	223e      	movs	r2, #62	; 0x3e
 8005014:	5c9b      	ldrb	r3, [r3, r2]
 8005016:	b2db      	uxtb	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	425a      	negs	r2, r3
 800501c:	4153      	adcs	r3, r2
 800501e:	b2db      	uxtb	r3, r3
 8005020:	e037      	b.n	8005092 <HAL_TIM_PWM_Start_DMA+0x132>
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2b04      	cmp	r3, #4
 8005026:	d108      	bne.n	800503a <HAL_TIM_PWM_Start_DMA+0xda>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	223f      	movs	r2, #63	; 0x3f
 800502c:	5c9b      	ldrb	r3, [r3, r2]
 800502e:	b2db      	uxtb	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	425a      	negs	r2, r3
 8005034:	4153      	adcs	r3, r2
 8005036:	b2db      	uxtb	r3, r3
 8005038:	e02b      	b.n	8005092 <HAL_TIM_PWM_Start_DMA+0x132>
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b08      	cmp	r3, #8
 800503e:	d108      	bne.n	8005052 <HAL_TIM_PWM_Start_DMA+0xf2>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2240      	movs	r2, #64	; 0x40
 8005044:	5c9b      	ldrb	r3, [r3, r2]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	425a      	negs	r2, r3
 800504c:	4153      	adcs	r3, r2
 800504e:	b2db      	uxtb	r3, r3
 8005050:	e01f      	b.n	8005092 <HAL_TIM_PWM_Start_DMA+0x132>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b0c      	cmp	r3, #12
 8005056:	d108      	bne.n	800506a <HAL_TIM_PWM_Start_DMA+0x10a>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2241      	movs	r2, #65	; 0x41
 800505c:	5c9b      	ldrb	r3, [r3, r2]
 800505e:	b2db      	uxtb	r3, r3
 8005060:	3b01      	subs	r3, #1
 8005062:	425a      	negs	r2, r3
 8005064:	4153      	adcs	r3, r2
 8005066:	b2db      	uxtb	r3, r3
 8005068:	e013      	b.n	8005092 <HAL_TIM_PWM_Start_DMA+0x132>
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b10      	cmp	r3, #16
 800506e:	d108      	bne.n	8005082 <HAL_TIM_PWM_Start_DMA+0x122>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2242      	movs	r2, #66	; 0x42
 8005074:	5c9b      	ldrb	r3, [r3, r2]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	425a      	negs	r2, r3
 800507c:	4153      	adcs	r3, r2
 800507e:	b2db      	uxtb	r3, r3
 8005080:	e007      	b.n	8005092 <HAL_TIM_PWM_Start_DMA+0x132>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2243      	movs	r2, #67	; 0x43
 8005086:	5c9b      	ldrb	r3, [r3, r2]
 8005088:	b2db      	uxtb	r3, r3
 800508a:	3b01      	subs	r3, #1
 800508c:	425a      	negs	r2, r3
 800508e:	4153      	adcs	r3, r2
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d035      	beq.n	8005102 <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <HAL_TIM_PWM_Start_DMA+0x144>
 800509c:	1cbb      	adds	r3, r7, #2
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e13e      	b.n	8005326 <HAL_TIM_PWM_Start_DMA+0x3c6>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d104      	bne.n	80050b8 <HAL_TIM_PWM_Start_DMA+0x158>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	223e      	movs	r2, #62	; 0x3e
 80050b2:	2102      	movs	r1, #2
 80050b4:	5499      	strb	r1, [r3, r2]
 80050b6:	e026      	b.n	8005106 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d104      	bne.n	80050c8 <HAL_TIM_PWM_Start_DMA+0x168>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	223f      	movs	r2, #63	; 0x3f
 80050c2:	2102      	movs	r1, #2
 80050c4:	5499      	strb	r1, [r3, r2]
 80050c6:	e01e      	b.n	8005106 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2b08      	cmp	r3, #8
 80050cc:	d104      	bne.n	80050d8 <HAL_TIM_PWM_Start_DMA+0x178>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2240      	movs	r2, #64	; 0x40
 80050d2:	2102      	movs	r1, #2
 80050d4:	5499      	strb	r1, [r3, r2]
 80050d6:	e016      	b.n	8005106 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2b0c      	cmp	r3, #12
 80050dc:	d104      	bne.n	80050e8 <HAL_TIM_PWM_Start_DMA+0x188>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2241      	movs	r2, #65	; 0x41
 80050e2:	2102      	movs	r1, #2
 80050e4:	5499      	strb	r1, [r3, r2]
 80050e6:	e00e      	b.n	8005106 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2b10      	cmp	r3, #16
 80050ec:	d104      	bne.n	80050f8 <HAL_TIM_PWM_Start_DMA+0x198>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2242      	movs	r2, #66	; 0x42
 80050f2:	2102      	movs	r1, #2
 80050f4:	5499      	strb	r1, [r3, r2]
 80050f6:	e006      	b.n	8005106 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2243      	movs	r2, #67	; 0x43
 80050fc:	2102      	movs	r1, #2
 80050fe:	5499      	strb	r1, [r3, r2]
 8005100:	e001      	b.n	8005106 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e10f      	b.n	8005326 <HAL_TIM_PWM_Start_DMA+0x3c6>
  }

  switch (Channel)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b0c      	cmp	r3, #12
 800510a:	d100      	bne.n	800510e <HAL_TIM_PWM_Start_DMA+0x1ae>
 800510c:	e080      	b.n	8005210 <HAL_TIM_PWM_Start_DMA+0x2b0>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b0c      	cmp	r3, #12
 8005112:	d900      	bls.n	8005116 <HAL_TIM_PWM_Start_DMA+0x1b6>
 8005114:	e0a1      	b.n	800525a <HAL_TIM_PWM_Start_DMA+0x2fa>
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b08      	cmp	r3, #8
 800511a:	d054      	beq.n	80051c6 <HAL_TIM_PWM_Start_DMA+0x266>
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2b08      	cmp	r3, #8
 8005120:	d900      	bls.n	8005124 <HAL_TIM_PWM_Start_DMA+0x1c4>
 8005122:	e09a      	b.n	800525a <HAL_TIM_PWM_Start_DMA+0x2fa>
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_TIM_PWM_Start_DMA+0x1d2>
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b04      	cmp	r3, #4
 800512e:	d025      	beq.n	800517c <HAL_TIM_PWM_Start_DMA+0x21c>
 8005130:	e093      	b.n	800525a <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	4a7e      	ldr	r2, [pc, #504]	; (8005330 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8005138:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	4a7d      	ldr	r2, [pc, #500]	; (8005334 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8005140:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	4a7c      	ldr	r2, [pc, #496]	; (8005338 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005148:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3334      	adds	r3, #52	; 0x34
 8005156:	001a      	movs	r2, r3
 8005158:	1cbb      	adds	r3, r7, #2
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	f7fe f80a 	bl	8003174 <HAL_DMA_Start_IT>
 8005160:	1e03      	subs	r3, r0, #0
 8005162:	d001      	beq.n	8005168 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e0de      	b.n	8005326 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2180      	movs	r1, #128	; 0x80
 8005174:	0089      	lsls	r1, r1, #2
 8005176:	430a      	orrs	r2, r1
 8005178:	60da      	str	r2, [r3, #12]
      break;
 800517a:	e073      	b.n	8005264 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	4a6b      	ldr	r2, [pc, #428]	; (8005330 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8005182:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005188:	4a6a      	ldr	r2, [pc, #424]	; (8005334 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800518a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005190:	4a69      	ldr	r2, [pc, #420]	; (8005338 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005192:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3338      	adds	r3, #56	; 0x38
 80051a0:	001a      	movs	r2, r3
 80051a2:	1cbb      	adds	r3, r7, #2
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	f7fd ffe5 	bl	8003174 <HAL_DMA_Start_IT>
 80051aa:	1e03      	subs	r3, r0, #0
 80051ac:	d001      	beq.n	80051b2 <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e0b9      	b.n	8005326 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2180      	movs	r1, #128	; 0x80
 80051be:	00c9      	lsls	r1, r1, #3
 80051c0:	430a      	orrs	r2, r1
 80051c2:	60da      	str	r2, [r3, #12]
      break;
 80051c4:	e04e      	b.n	8005264 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	4a59      	ldr	r2, [pc, #356]	; (8005330 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 80051cc:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d2:	4a58      	ldr	r2, [pc, #352]	; (8005334 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80051d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051da:	4a57      	ldr	r2, [pc, #348]	; (8005338 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80051dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80051e2:	6879      	ldr	r1, [r7, #4]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	333c      	adds	r3, #60	; 0x3c
 80051ea:	001a      	movs	r2, r3
 80051ec:	1cbb      	adds	r3, r7, #2
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	f7fd ffc0 	bl	8003174 <HAL_DMA_Start_IT>
 80051f4:	1e03      	subs	r3, r0, #0
 80051f6:	d001      	beq.n	80051fc <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e094      	b.n	8005326 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2180      	movs	r1, #128	; 0x80
 8005208:	0109      	lsls	r1, r1, #4
 800520a:	430a      	orrs	r2, r1
 800520c:	60da      	str	r2, [r3, #12]
      break;
 800520e:	e029      	b.n	8005264 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005214:	4a46      	ldr	r2, [pc, #280]	; (8005330 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8005216:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521c:	4a45      	ldr	r2, [pc, #276]	; (8005334 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800521e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005224:	4a44      	ldr	r2, [pc, #272]	; (8005338 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005226:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3340      	adds	r3, #64	; 0x40
 8005234:	001a      	movs	r2, r3
 8005236:	1cbb      	adds	r3, r7, #2
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	f7fd ff9b 	bl	8003174 <HAL_DMA_Start_IT>
 800523e:	1e03      	subs	r3, r0, #0
 8005240:	d001      	beq.n	8005246 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e06f      	b.n	8005326 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2180      	movs	r1, #128	; 0x80
 8005252:	0149      	lsls	r1, r1, #5
 8005254:	430a      	orrs	r2, r1
 8005256:	60da      	str	r2, [r3, #12]
      break;
 8005258:	e004      	b.n	8005264 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 800525a:	2317      	movs	r3, #23
 800525c:	18fb      	adds	r3, r7, r3
 800525e:	2201      	movs	r2, #1
 8005260:	701a      	strb	r2, [r3, #0]
      break;
 8005262:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005264:	2317      	movs	r3, #23
 8005266:	18fb      	adds	r3, r7, r3
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d158      	bne.n	8005320 <HAL_TIM_PWM_Start_DMA+0x3c0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68b9      	ldr	r1, [r7, #8]
 8005274:	2201      	movs	r2, #1
 8005276:	0018      	movs	r0, r3
 8005278:	f001 fca2 	bl	8006bc0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a2e      	ldr	r2, [pc, #184]	; (800533c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d00e      	beq.n	80052a4 <HAL_TIM_PWM_Start_DMA+0x344>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a2d      	ldr	r2, [pc, #180]	; (8005340 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d009      	beq.n	80052a4 <HAL_TIM_PWM_Start_DMA+0x344>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a2b      	ldr	r2, [pc, #172]	; (8005344 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d004      	beq.n	80052a4 <HAL_TIM_PWM_Start_DMA+0x344>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a2a      	ldr	r2, [pc, #168]	; (8005348 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d101      	bne.n	80052a8 <HAL_TIM_PWM_Start_DMA+0x348>
 80052a4:	2301      	movs	r3, #1
 80052a6:	e000      	b.n	80052aa <HAL_TIM_PWM_Start_DMA+0x34a>
 80052a8:	2300      	movs	r3, #0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d008      	beq.n	80052c0 <HAL_TIM_PWM_Start_DMA+0x360>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2180      	movs	r1, #128	; 0x80
 80052ba:	0209      	lsls	r1, r1, #8
 80052bc:	430a      	orrs	r2, r1
 80052be:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a1d      	ldr	r2, [pc, #116]	; (800533c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d009      	beq.n	80052de <HAL_TIM_PWM_Start_DMA+0x37e>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a1f      	ldr	r2, [pc, #124]	; (800534c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d004      	beq.n	80052de <HAL_TIM_PWM_Start_DMA+0x37e>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a19      	ldr	r2, [pc, #100]	; (8005340 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d116      	bne.n	800530c <HAL_TIM_PWM_Start_DMA+0x3ac>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	4a1a      	ldr	r2, [pc, #104]	; (8005350 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80052e6:	4013      	ands	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	2b06      	cmp	r3, #6
 80052ee:	d016      	beq.n	800531e <HAL_TIM_PWM_Start_DMA+0x3be>
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	2380      	movs	r3, #128	; 0x80
 80052f4:	025b      	lsls	r3, r3, #9
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d011      	beq.n	800531e <HAL_TIM_PWM_Start_DMA+0x3be>
      {
        __HAL_TIM_ENABLE(htim);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2101      	movs	r1, #1
 8005306:	430a      	orrs	r2, r1
 8005308:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530a:	e008      	b.n	800531e <HAL_TIM_PWM_Start_DMA+0x3be>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2101      	movs	r1, #1
 8005318:	430a      	orrs	r2, r1
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	e000      	b.n	8005320 <HAL_TIM_PWM_Start_DMA+0x3c0>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531e:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8005320:	2317      	movs	r3, #23
 8005322:	18fb      	adds	r3, r7, r3
 8005324:	781b      	ldrb	r3, [r3, #0]
}
 8005326:	0018      	movs	r0, r3
 8005328:	46bd      	mov	sp, r7
 800532a:	b006      	add	sp, #24
 800532c:	bd80      	pop	{r7, pc}
 800532e:	46c0      	nop			; (mov r8, r8)
 8005330:	080060c5 	.word	0x080060c5
 8005334:	0800616f 	.word	0x0800616f
 8005338:	08006031 	.word	0x08006031
 800533c:	40012c00 	.word	0x40012c00
 8005340:	40014000 	.word	0x40014000
 8005344:	40014400 	.word	0x40014400
 8005348:	40014800 	.word	0x40014800
 800534c:	40000400 	.word	0x40000400
 8005350:	00010007 	.word	0x00010007

08005354 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800535e:	230f      	movs	r3, #15
 8005360:	18fb      	adds	r3, r7, r3
 8005362:	2200      	movs	r2, #0
 8005364:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b0c      	cmp	r3, #12
 800536a:	d039      	beq.n	80053e0 <HAL_TIM_PWM_Stop_DMA+0x8c>
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2b0c      	cmp	r3, #12
 8005370:	d844      	bhi.n	80053fc <HAL_TIM_PWM_Stop_DMA+0xa8>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b08      	cmp	r3, #8
 8005376:	d025      	beq.n	80053c4 <HAL_TIM_PWM_Stop_DMA+0x70>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b08      	cmp	r3, #8
 800537c:	d83e      	bhi.n	80053fc <HAL_TIM_PWM_Stop_DMA+0xa8>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_TIM_PWM_Stop_DMA+0x38>
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	2b04      	cmp	r3, #4
 8005388:	d00e      	beq.n	80053a8 <HAL_TIM_PWM_Stop_DMA+0x54>
 800538a:	e037      	b.n	80053fc <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	495c      	ldr	r1, [pc, #368]	; (8005508 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8005398:	400a      	ands	r2, r1
 800539a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	0018      	movs	r0, r3
 80053a2:	f7fd ff6d 	bl	8003280 <HAL_DMA_Abort_IT>
      break;
 80053a6:	e02e      	b.n	8005406 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4956      	ldr	r1, [pc, #344]	; (800550c <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 80053b4:	400a      	ands	r2, r1
 80053b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053bc:	0018      	movs	r0, r3
 80053be:	f7fd ff5f 	bl	8003280 <HAL_DMA_Abort_IT>
      break;
 80053c2:	e020      	b.n	8005406 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4950      	ldr	r1, [pc, #320]	; (8005510 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 80053d0:	400a      	ands	r2, r1
 80053d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	0018      	movs	r0, r3
 80053da:	f7fd ff51 	bl	8003280 <HAL_DMA_Abort_IT>
      break;
 80053de:	e012      	b.n	8005406 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	494a      	ldr	r1, [pc, #296]	; (8005514 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 80053ec:	400a      	ands	r2, r1
 80053ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f4:	0018      	movs	r0, r3
 80053f6:	f7fd ff43 	bl	8003280 <HAL_DMA_Abort_IT>
      break;
 80053fa:	e004      	b.n	8005406 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 80053fc:	230f      	movs	r3, #15
 80053fe:	18fb      	adds	r3, r7, r3
 8005400:	2201      	movs	r2, #1
 8005402:	701a      	strb	r2, [r3, #0]
      break;
 8005404:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005406:	230f      	movs	r3, #15
 8005408:	18fb      	adds	r3, r7, r3
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d000      	beq.n	8005412 <HAL_TIM_PWM_Stop_DMA+0xbe>
 8005410:	e073      	b.n	80054fa <HAL_TIM_PWM_Stop_DMA+0x1a6>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6839      	ldr	r1, [r7, #0]
 8005418:	2200      	movs	r2, #0
 800541a:	0018      	movs	r0, r3
 800541c:	f001 fbd0 	bl	8006bc0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a3c      	ldr	r2, [pc, #240]	; (8005518 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00e      	beq.n	8005448 <HAL_TIM_PWM_Stop_DMA+0xf4>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a3b      	ldr	r2, [pc, #236]	; (800551c <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d009      	beq.n	8005448 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a39      	ldr	r2, [pc, #228]	; (8005520 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <HAL_TIM_PWM_Stop_DMA+0xf4>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a38      	ldr	r2, [pc, #224]	; (8005524 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d101      	bne.n	800544c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <HAL_TIM_PWM_Stop_DMA+0xfa>
 800544c:	2300      	movs	r3, #0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d013      	beq.n	800547a <HAL_TIM_PWM_Stop_DMA+0x126>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	4a33      	ldr	r2, [pc, #204]	; (8005528 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 800545a:	4013      	ands	r3, r2
 800545c:	d10d      	bne.n	800547a <HAL_TIM_PWM_Stop_DMA+0x126>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	4a31      	ldr	r2, [pc, #196]	; (800552c <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8005466:	4013      	ands	r3, r2
 8005468:	d107      	bne.n	800547a <HAL_TIM_PWM_Stop_DMA+0x126>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	492e      	ldr	r1, [pc, #184]	; (8005530 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8005476:	400a      	ands	r2, r1
 8005478:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	4a29      	ldr	r2, [pc, #164]	; (8005528 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8005482:	4013      	ands	r3, r2
 8005484:	d10d      	bne.n	80054a2 <HAL_TIM_PWM_Stop_DMA+0x14e>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	4a27      	ldr	r2, [pc, #156]	; (800552c <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 800548e:	4013      	ands	r3, r2
 8005490:	d107      	bne.n	80054a2 <HAL_TIM_PWM_Stop_DMA+0x14e>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2101      	movs	r1, #1
 800549e:	438a      	bics	r2, r1
 80054a0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d104      	bne.n	80054b2 <HAL_TIM_PWM_Stop_DMA+0x15e>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	223e      	movs	r2, #62	; 0x3e
 80054ac:	2101      	movs	r1, #1
 80054ae:	5499      	strb	r1, [r3, r2]
 80054b0:	e023      	b.n	80054fa <HAL_TIM_PWM_Stop_DMA+0x1a6>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d104      	bne.n	80054c2 <HAL_TIM_PWM_Stop_DMA+0x16e>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	223f      	movs	r2, #63	; 0x3f
 80054bc:	2101      	movs	r1, #1
 80054be:	5499      	strb	r1, [r3, r2]
 80054c0:	e01b      	b.n	80054fa <HAL_TIM_PWM_Stop_DMA+0x1a6>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d104      	bne.n	80054d2 <HAL_TIM_PWM_Stop_DMA+0x17e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2240      	movs	r2, #64	; 0x40
 80054cc:	2101      	movs	r1, #1
 80054ce:	5499      	strb	r1, [r3, r2]
 80054d0:	e013      	b.n	80054fa <HAL_TIM_PWM_Stop_DMA+0x1a6>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b0c      	cmp	r3, #12
 80054d6:	d104      	bne.n	80054e2 <HAL_TIM_PWM_Stop_DMA+0x18e>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2241      	movs	r2, #65	; 0x41
 80054dc:	2101      	movs	r1, #1
 80054de:	5499      	strb	r1, [r3, r2]
 80054e0:	e00b      	b.n	80054fa <HAL_TIM_PWM_Stop_DMA+0x1a6>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b10      	cmp	r3, #16
 80054e6:	d104      	bne.n	80054f2 <HAL_TIM_PWM_Stop_DMA+0x19e>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2242      	movs	r2, #66	; 0x42
 80054ec:	2101      	movs	r1, #1
 80054ee:	5499      	strb	r1, [r3, r2]
 80054f0:	e003      	b.n	80054fa <HAL_TIM_PWM_Stop_DMA+0x1a6>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2243      	movs	r2, #67	; 0x43
 80054f6:	2101      	movs	r1, #1
 80054f8:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80054fa:	230f      	movs	r3, #15
 80054fc:	18fb      	adds	r3, r7, r3
 80054fe:	781b      	ldrb	r3, [r3, #0]
}
 8005500:	0018      	movs	r0, r3
 8005502:	46bd      	mov	sp, r7
 8005504:	b004      	add	sp, #16
 8005506:	bd80      	pop	{r7, pc}
 8005508:	fffffdff 	.word	0xfffffdff
 800550c:	fffffbff 	.word	0xfffffbff
 8005510:	fffff7ff 	.word	0xfffff7ff
 8005514:	ffffefff 	.word	0xffffefff
 8005518:	40012c00 	.word	0x40012c00
 800551c:	40014000 	.word	0x40014000
 8005520:	40014400 	.word	0x40014400
 8005524:	40014800 	.word	0x40014800
 8005528:	00001111 	.word	0x00001111
 800552c:	00000444 	.word	0x00000444
 8005530:	ffff7fff 	.word	0xffff7fff

08005534 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e04a      	b.n	80055dc <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	223d      	movs	r2, #61	; 0x3d
 800554a:	5c9b      	ldrb	r3, [r3, r2]
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d107      	bne.n	8005562 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	223c      	movs	r2, #60	; 0x3c
 8005556:	2100      	movs	r1, #0
 8005558:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	0018      	movs	r0, r3
 800555e:	f7fc fa39 	bl	80019d4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	223d      	movs	r2, #61	; 0x3d
 8005566:	2102      	movs	r1, #2
 8005568:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3304      	adds	r3, #4
 8005572:	0019      	movs	r1, r3
 8005574:	0010      	movs	r0, r2
 8005576:	f000 fec9 	bl	800630c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2248      	movs	r2, #72	; 0x48
 800557e:	2101      	movs	r1, #1
 8005580:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	223e      	movs	r2, #62	; 0x3e
 8005586:	2101      	movs	r1, #1
 8005588:	5499      	strb	r1, [r3, r2]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	223f      	movs	r2, #63	; 0x3f
 800558e:	2101      	movs	r1, #1
 8005590:	5499      	strb	r1, [r3, r2]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2240      	movs	r2, #64	; 0x40
 8005596:	2101      	movs	r1, #1
 8005598:	5499      	strb	r1, [r3, r2]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2241      	movs	r2, #65	; 0x41
 800559e:	2101      	movs	r1, #1
 80055a0:	5499      	strb	r1, [r3, r2]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2242      	movs	r2, #66	; 0x42
 80055a6:	2101      	movs	r1, #1
 80055a8:	5499      	strb	r1, [r3, r2]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2243      	movs	r2, #67	; 0x43
 80055ae:	2101      	movs	r1, #1
 80055b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2244      	movs	r2, #68	; 0x44
 80055b6:	2101      	movs	r1, #1
 80055b8:	5499      	strb	r1, [r3, r2]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2245      	movs	r2, #69	; 0x45
 80055be:	2101      	movs	r1, #1
 80055c0:	5499      	strb	r1, [r3, r2]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2246      	movs	r2, #70	; 0x46
 80055c6:	2101      	movs	r1, #1
 80055c8:	5499      	strb	r1, [r3, r2]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2247      	movs	r2, #71	; 0x47
 80055ce:	2101      	movs	r1, #1
 80055d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	223d      	movs	r2, #61	; 0x3d
 80055d6:	2101      	movs	r1, #1
 80055d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	0018      	movs	r0, r3
 80055de:	46bd      	mov	sp, r7
 80055e0:	b002      	add	sp, #8
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	001a      	movs	r2, r3
 80055f2:	1cbb      	adds	r3, r7, #2
 80055f4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055f6:	2317      	movs	r3, #23
 80055f8:	18fb      	adds	r3, r7, r3
 80055fa:	2200      	movs	r2, #0
 80055fc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d104      	bne.n	800560e <HAL_TIM_IC_Start_DMA+0x2a>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	223e      	movs	r2, #62	; 0x3e
 8005608:	5c9b      	ldrb	r3, [r3, r2]
 800560a:	b2db      	uxtb	r3, r3
 800560c:	e023      	b.n	8005656 <HAL_TIM_IC_Start_DMA+0x72>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2b04      	cmp	r3, #4
 8005612:	d104      	bne.n	800561e <HAL_TIM_IC_Start_DMA+0x3a>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	223f      	movs	r2, #63	; 0x3f
 8005618:	5c9b      	ldrb	r3, [r3, r2]
 800561a:	b2db      	uxtb	r3, r3
 800561c:	e01b      	b.n	8005656 <HAL_TIM_IC_Start_DMA+0x72>
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	2b08      	cmp	r3, #8
 8005622:	d104      	bne.n	800562e <HAL_TIM_IC_Start_DMA+0x4a>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2240      	movs	r2, #64	; 0x40
 8005628:	5c9b      	ldrb	r3, [r3, r2]
 800562a:	b2db      	uxtb	r3, r3
 800562c:	e013      	b.n	8005656 <HAL_TIM_IC_Start_DMA+0x72>
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b0c      	cmp	r3, #12
 8005632:	d104      	bne.n	800563e <HAL_TIM_IC_Start_DMA+0x5a>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2241      	movs	r2, #65	; 0x41
 8005638:	5c9b      	ldrb	r3, [r3, r2]
 800563a:	b2db      	uxtb	r3, r3
 800563c:	e00b      	b.n	8005656 <HAL_TIM_IC_Start_DMA+0x72>
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b10      	cmp	r3, #16
 8005642:	d104      	bne.n	800564e <HAL_TIM_IC_Start_DMA+0x6a>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2242      	movs	r2, #66	; 0x42
 8005648:	5c9b      	ldrb	r3, [r3, r2]
 800564a:	b2db      	uxtb	r3, r3
 800564c:	e003      	b.n	8005656 <HAL_TIM_IC_Start_DMA+0x72>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2243      	movs	r2, #67	; 0x43
 8005652:	5c9b      	ldrb	r3, [r3, r2]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2216      	movs	r2, #22
 8005658:	18ba      	adds	r2, r7, r2
 800565a:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d104      	bne.n	800566c <HAL_TIM_IC_Start_DMA+0x88>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2244      	movs	r2, #68	; 0x44
 8005666:	5c9b      	ldrb	r3, [r3, r2]
 8005668:	b2db      	uxtb	r3, r3
 800566a:	e013      	b.n	8005694 <HAL_TIM_IC_Start_DMA+0xb0>
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b04      	cmp	r3, #4
 8005670:	d104      	bne.n	800567c <HAL_TIM_IC_Start_DMA+0x98>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2245      	movs	r2, #69	; 0x45
 8005676:	5c9b      	ldrb	r3, [r3, r2]
 8005678:	b2db      	uxtb	r3, r3
 800567a:	e00b      	b.n	8005694 <HAL_TIM_IC_Start_DMA+0xb0>
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b08      	cmp	r3, #8
 8005680:	d104      	bne.n	800568c <HAL_TIM_IC_Start_DMA+0xa8>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2246      	movs	r2, #70	; 0x46
 8005686:	5c9b      	ldrb	r3, [r3, r2]
 8005688:	b2db      	uxtb	r3, r3
 800568a:	e003      	b.n	8005694 <HAL_TIM_IC_Start_DMA+0xb0>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2247      	movs	r2, #71	; 0x47
 8005690:	5c9b      	ldrb	r3, [r3, r2]
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2115      	movs	r1, #21
 8005696:	187a      	adds	r2, r7, r1
 8005698:	7013      	strb	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800569a:	2316      	movs	r3, #22
 800569c:	18fb      	adds	r3, r7, r3
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d003      	beq.n	80056ac <HAL_TIM_IC_Start_DMA+0xc8>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80056a4:	187b      	adds	r3, r7, r1
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d101      	bne.n	80056b0 <HAL_TIM_IC_Start_DMA+0xcc>
  {
    return HAL_BUSY;
 80056ac:	2302      	movs	r3, #2
 80056ae:	e146      	b.n	800593e <HAL_TIM_IC_Start_DMA+0x35a>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80056b0:	2316      	movs	r3, #22
 80056b2:	18fb      	adds	r3, r7, r3
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d156      	bne.n	8005768 <HAL_TIM_IC_Start_DMA+0x184>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80056ba:	2315      	movs	r3, #21
 80056bc:	18fb      	adds	r3, r7, r3
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d151      	bne.n	8005768 <HAL_TIM_IC_Start_DMA+0x184>
  {
    if ((pData == NULL) || (Length == 0U))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_TIM_IC_Start_DMA+0xee>
 80056ca:	1cbb      	adds	r3, r7, #2
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_TIM_IC_Start_DMA+0xf2>
    {
      return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e133      	b.n	800593e <HAL_TIM_IC_Start_DMA+0x35a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d104      	bne.n	80056e6 <HAL_TIM_IC_Start_DMA+0x102>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	223e      	movs	r2, #62	; 0x3e
 80056e0:	2102      	movs	r1, #2
 80056e2:	5499      	strb	r1, [r3, r2]
 80056e4:	e023      	b.n	800572e <HAL_TIM_IC_Start_DMA+0x14a>
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d104      	bne.n	80056f6 <HAL_TIM_IC_Start_DMA+0x112>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	223f      	movs	r2, #63	; 0x3f
 80056f0:	2102      	movs	r1, #2
 80056f2:	5499      	strb	r1, [r3, r2]
 80056f4:	e01b      	b.n	800572e <HAL_TIM_IC_Start_DMA+0x14a>
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d104      	bne.n	8005706 <HAL_TIM_IC_Start_DMA+0x122>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2240      	movs	r2, #64	; 0x40
 8005700:	2102      	movs	r1, #2
 8005702:	5499      	strb	r1, [r3, r2]
 8005704:	e013      	b.n	800572e <HAL_TIM_IC_Start_DMA+0x14a>
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b0c      	cmp	r3, #12
 800570a:	d104      	bne.n	8005716 <HAL_TIM_IC_Start_DMA+0x132>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2241      	movs	r2, #65	; 0x41
 8005710:	2102      	movs	r1, #2
 8005712:	5499      	strb	r1, [r3, r2]
 8005714:	e00b      	b.n	800572e <HAL_TIM_IC_Start_DMA+0x14a>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b10      	cmp	r3, #16
 800571a:	d104      	bne.n	8005726 <HAL_TIM_IC_Start_DMA+0x142>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2242      	movs	r2, #66	; 0x42
 8005720:	2102      	movs	r1, #2
 8005722:	5499      	strb	r1, [r3, r2]
 8005724:	e003      	b.n	800572e <HAL_TIM_IC_Start_DMA+0x14a>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2243      	movs	r2, #67	; 0x43
 800572a:	2102      	movs	r1, #2
 800572c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d104      	bne.n	800573e <HAL_TIM_IC_Start_DMA+0x15a>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2244      	movs	r2, #68	; 0x44
 8005738:	2102      	movs	r1, #2
 800573a:	5499      	strb	r1, [r3, r2]
    if ((pData == NULL) || (Length == 0U))
 800573c:	e016      	b.n	800576c <HAL_TIM_IC_Start_DMA+0x188>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b04      	cmp	r3, #4
 8005742:	d104      	bne.n	800574e <HAL_TIM_IC_Start_DMA+0x16a>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2245      	movs	r2, #69	; 0x45
 8005748:	2102      	movs	r1, #2
 800574a:	5499      	strb	r1, [r3, r2]
    if ((pData == NULL) || (Length == 0U))
 800574c:	e00e      	b.n	800576c <HAL_TIM_IC_Start_DMA+0x188>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b08      	cmp	r3, #8
 8005752:	d104      	bne.n	800575e <HAL_TIM_IC_Start_DMA+0x17a>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2246      	movs	r2, #70	; 0x46
 8005758:	2102      	movs	r1, #2
 800575a:	5499      	strb	r1, [r3, r2]
    if ((pData == NULL) || (Length == 0U))
 800575c:	e006      	b.n	800576c <HAL_TIM_IC_Start_DMA+0x188>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2247      	movs	r2, #71	; 0x47
 8005762:	2102      	movs	r1, #2
 8005764:	5499      	strb	r1, [r3, r2]
    if ((pData == NULL) || (Length == 0U))
 8005766:	e001      	b.n	800576c <HAL_TIM_IC_Start_DMA+0x188>
    }
  }
  else
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e0e8      	b.n	800593e <HAL_TIM_IC_Start_DMA+0x35a>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	2201      	movs	r2, #1
 8005774:	0018      	movs	r0, r3
 8005776:	f001 fa23 	bl	8006bc0 <TIM_CCxChannelCmd>

  switch (Channel)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b0c      	cmp	r3, #12
 800577e:	d100      	bne.n	8005782 <HAL_TIM_IC_Start_DMA+0x19e>
 8005780:	e080      	b.n	8005884 <HAL_TIM_IC_Start_DMA+0x2a0>
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b0c      	cmp	r3, #12
 8005786:	d900      	bls.n	800578a <HAL_TIM_IC_Start_DMA+0x1a6>
 8005788:	e0a1      	b.n	80058ce <HAL_TIM_IC_Start_DMA+0x2ea>
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2b08      	cmp	r3, #8
 800578e:	d054      	beq.n	800583a <HAL_TIM_IC_Start_DMA+0x256>
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2b08      	cmp	r3, #8
 8005794:	d900      	bls.n	8005798 <HAL_TIM_IC_Start_DMA+0x1b4>
 8005796:	e09a      	b.n	80058ce <HAL_TIM_IC_Start_DMA+0x2ea>
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_TIM_IC_Start_DMA+0x1c2>
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	2b04      	cmp	r3, #4
 80057a2:	d025      	beq.n	80057f0 <HAL_TIM_IC_Start_DMA+0x20c>
 80057a4:	e093      	b.n	80058ce <HAL_TIM_IC_Start_DMA+0x2ea>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	4a67      	ldr	r2, [pc, #412]	; (8005948 <HAL_TIM_IC_Start_DMA+0x364>)
 80057ac:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	4a66      	ldr	r2, [pc, #408]	; (800594c <HAL_TIM_IC_Start_DMA+0x368>)
 80057b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	4a65      	ldr	r2, [pc, #404]	; (8005950 <HAL_TIM_IC_Start_DMA+0x36c>)
 80057bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3334      	adds	r3, #52	; 0x34
 80057c8:	0019      	movs	r1, r3
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	1cbb      	adds	r3, r7, #2
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	f7fd fcd0 	bl	8003174 <HAL_DMA_Start_IT>
 80057d4:	1e03      	subs	r3, r0, #0
 80057d6:	d001      	beq.n	80057dc <HAL_TIM_IC_Start_DMA+0x1f8>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e0b0      	b.n	800593e <HAL_TIM_IC_Start_DMA+0x35a>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2180      	movs	r1, #128	; 0x80
 80057e8:	0089      	lsls	r1, r1, #2
 80057ea:	430a      	orrs	r2, r1
 80057ec:	60da      	str	r2, [r3, #12]
      break;
 80057ee:	e073      	b.n	80058d8 <HAL_TIM_IC_Start_DMA+0x2f4>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f4:	4a54      	ldr	r2, [pc, #336]	; (8005948 <HAL_TIM_IC_Start_DMA+0x364>)
 80057f6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fc:	4a53      	ldr	r2, [pc, #332]	; (800594c <HAL_TIM_IC_Start_DMA+0x368>)
 80057fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005804:	4a52      	ldr	r2, [pc, #328]	; (8005950 <HAL_TIM_IC_Start_DMA+0x36c>)
 8005806:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	3338      	adds	r3, #56	; 0x38
 8005812:	0019      	movs	r1, r3
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	1cbb      	adds	r3, r7, #2
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	f7fd fcab 	bl	8003174 <HAL_DMA_Start_IT>
 800581e:	1e03      	subs	r3, r0, #0
 8005820:	d001      	beq.n	8005826 <HAL_TIM_IC_Start_DMA+0x242>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e08b      	b.n	800593e <HAL_TIM_IC_Start_DMA+0x35a>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2180      	movs	r1, #128	; 0x80
 8005832:	00c9      	lsls	r1, r1, #3
 8005834:	430a      	orrs	r2, r1
 8005836:	60da      	str	r2, [r3, #12]
      break;
 8005838:	e04e      	b.n	80058d8 <HAL_TIM_IC_Start_DMA+0x2f4>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583e:	4a42      	ldr	r2, [pc, #264]	; (8005948 <HAL_TIM_IC_Start_DMA+0x364>)
 8005840:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005846:	4a41      	ldr	r2, [pc, #260]	; (800594c <HAL_TIM_IC_Start_DMA+0x368>)
 8005848:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584e:	4a40      	ldr	r2, [pc, #256]	; (8005950 <HAL_TIM_IC_Start_DMA+0x36c>)
 8005850:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	333c      	adds	r3, #60	; 0x3c
 800585c:	0019      	movs	r1, r3
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	1cbb      	adds	r3, r7, #2
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	f7fd fc86 	bl	8003174 <HAL_DMA_Start_IT>
 8005868:	1e03      	subs	r3, r0, #0
 800586a:	d001      	beq.n	8005870 <HAL_TIM_IC_Start_DMA+0x28c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e066      	b.n	800593e <HAL_TIM_IC_Start_DMA+0x35a>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2180      	movs	r1, #128	; 0x80
 800587c:	0109      	lsls	r1, r1, #4
 800587e:	430a      	orrs	r2, r1
 8005880:	60da      	str	r2, [r3, #12]
      break;
 8005882:	e029      	b.n	80058d8 <HAL_TIM_IC_Start_DMA+0x2f4>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005888:	4a2f      	ldr	r2, [pc, #188]	; (8005948 <HAL_TIM_IC_Start_DMA+0x364>)
 800588a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005890:	4a2e      	ldr	r2, [pc, #184]	; (800594c <HAL_TIM_IC_Start_DMA+0x368>)
 8005892:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005898:	4a2d      	ldr	r2, [pc, #180]	; (8005950 <HAL_TIM_IC_Start_DMA+0x36c>)
 800589a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3340      	adds	r3, #64	; 0x40
 80058a6:	0019      	movs	r1, r3
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	1cbb      	adds	r3, r7, #2
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	f7fd fc61 	bl	8003174 <HAL_DMA_Start_IT>
 80058b2:	1e03      	subs	r3, r0, #0
 80058b4:	d001      	beq.n	80058ba <HAL_TIM_IC_Start_DMA+0x2d6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e041      	b.n	800593e <HAL_TIM_IC_Start_DMA+0x35a>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2180      	movs	r1, #128	; 0x80
 80058c6:	0149      	lsls	r1, r1, #5
 80058c8:	430a      	orrs	r2, r1
 80058ca:	60da      	str	r2, [r3, #12]
      break;
 80058cc:	e004      	b.n	80058d8 <HAL_TIM_IC_Start_DMA+0x2f4>
    }

    default:
      status = HAL_ERROR;
 80058ce:	2317      	movs	r3, #23
 80058d0:	18fb      	adds	r3, r7, r3
 80058d2:	2201      	movs	r2, #1
 80058d4:	701a      	strb	r2, [r3, #0]
      break;
 80058d6:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a1d      	ldr	r2, [pc, #116]	; (8005954 <HAL_TIM_IC_Start_DMA+0x370>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d009      	beq.n	80058f6 <HAL_TIM_IC_Start_DMA+0x312>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a1c      	ldr	r2, [pc, #112]	; (8005958 <HAL_TIM_IC_Start_DMA+0x374>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d004      	beq.n	80058f6 <HAL_TIM_IC_Start_DMA+0x312>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a1a      	ldr	r2, [pc, #104]	; (800595c <HAL_TIM_IC_Start_DMA+0x378>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d116      	bne.n	8005924 <HAL_TIM_IC_Start_DMA+0x340>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	4a18      	ldr	r2, [pc, #96]	; (8005960 <HAL_TIM_IC_Start_DMA+0x37c>)
 80058fe:	4013      	ands	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	2b06      	cmp	r3, #6
 8005906:	d016      	beq.n	8005936 <HAL_TIM_IC_Start_DMA+0x352>
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	2380      	movs	r3, #128	; 0x80
 800590c:	025b      	lsls	r3, r3, #9
 800590e:	429a      	cmp	r2, r3
 8005910:	d011      	beq.n	8005936 <HAL_TIM_IC_Start_DMA+0x352>
    {
      __HAL_TIM_ENABLE(htim);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2101      	movs	r1, #1
 800591e:	430a      	orrs	r2, r1
 8005920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005922:	e008      	b.n	8005936 <HAL_TIM_IC_Start_DMA+0x352>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2101      	movs	r1, #1
 8005930:	430a      	orrs	r2, r1
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	e000      	b.n	8005938 <HAL_TIM_IC_Start_DMA+0x354>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005936:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return status;
 8005938:	2317      	movs	r3, #23
 800593a:	18fb      	adds	r3, r7, r3
 800593c:	781b      	ldrb	r3, [r3, #0]
}
 800593e:	0018      	movs	r0, r3
 8005940:	46bd      	mov	sp, r7
 8005942:	b006      	add	sp, #24
 8005944:	bd80      	pop	{r7, pc}
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	080061d9 	.word	0x080061d9
 800594c:	080062a3 	.word	0x080062a3
 8005950:	08006031 	.word	0x08006031
 8005954:	40012c00 	.word	0x40012c00
 8005958:	40000400 	.word	0x40000400
 800595c:	40014000 	.word	0x40014000
 8005960:	00010007 	.word	0x00010007

08005964 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	2202      	movs	r2, #2
 8005974:	4013      	ands	r3, r2
 8005976:	2b02      	cmp	r3, #2
 8005978:	d124      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	2202      	movs	r2, #2
 8005982:	4013      	ands	r3, r2
 8005984:	2b02      	cmp	r3, #2
 8005986:	d11d      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2203      	movs	r2, #3
 800598e:	4252      	negs	r2, r2
 8005990:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	2203      	movs	r2, #3
 80059a0:	4013      	ands	r3, r2
 80059a2:	d004      	beq.n	80059ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	0018      	movs	r0, r3
 80059a8:	f001 fd4c 	bl	8007444 <HAL_TIM_IC_CaptureCallback>
 80059ac:	e007      	b.n	80059be <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	0018      	movs	r0, r3
 80059b2:	f001 fbd1 	bl	8007158 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	0018      	movs	r0, r3
 80059ba:	f000 fb19 	bl	8005ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	2204      	movs	r2, #4
 80059cc:	4013      	ands	r3, r2
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d125      	bne.n	8005a1e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	2204      	movs	r2, #4
 80059da:	4013      	ands	r3, r2
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d11e      	bne.n	8005a1e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2205      	movs	r2, #5
 80059e6:	4252      	negs	r2, r2
 80059e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2202      	movs	r2, #2
 80059ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699a      	ldr	r2, [r3, #24]
 80059f6:	23c0      	movs	r3, #192	; 0xc0
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4013      	ands	r3, r2
 80059fc:	d004      	beq.n	8005a08 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	0018      	movs	r0, r3
 8005a02:	f001 fd1f 	bl	8007444 <HAL_TIM_IC_CaptureCallback>
 8005a06:	e007      	b.n	8005a18 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	f001 fba4 	bl	8007158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	0018      	movs	r0, r3
 8005a14:	f000 faec 	bl	8005ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2208      	movs	r2, #8
 8005a26:	4013      	ands	r3, r2
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d124      	bne.n	8005a76 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	2208      	movs	r2, #8
 8005a34:	4013      	ands	r3, r2
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d11d      	bne.n	8005a76 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2209      	movs	r2, #9
 8005a40:	4252      	negs	r2, r2
 8005a42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2204      	movs	r2, #4
 8005a48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	2203      	movs	r2, #3
 8005a52:	4013      	ands	r3, r2
 8005a54:	d004      	beq.n	8005a60 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	0018      	movs	r0, r3
 8005a5a:	f001 fcf3 	bl	8007444 <HAL_TIM_IC_CaptureCallback>
 8005a5e:	e007      	b.n	8005a70 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	0018      	movs	r0, r3
 8005a64:	f001 fb78 	bl	8007158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f000 fac0 	bl	8005ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	2210      	movs	r2, #16
 8005a7e:	4013      	ands	r3, r2
 8005a80:	2b10      	cmp	r3, #16
 8005a82:	d125      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	2210      	movs	r2, #16
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	2b10      	cmp	r3, #16
 8005a90:	d11e      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2211      	movs	r2, #17
 8005a98:	4252      	negs	r2, r2
 8005a9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2208      	movs	r2, #8
 8005aa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	69da      	ldr	r2, [r3, #28]
 8005aa8:	23c0      	movs	r3, #192	; 0xc0
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4013      	ands	r3, r2
 8005aae:	d004      	beq.n	8005aba <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f001 fcc6 	bl	8007444 <HAL_TIM_IC_CaptureCallback>
 8005ab8:	e007      	b.n	8005aca <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	0018      	movs	r0, r3
 8005abe:	f001 fb4b 	bl	8007158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f000 fa93 	bl	8005ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	4013      	ands	r3, r2
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d10f      	bne.n	8005afe <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d108      	bne.n	8005afe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2202      	movs	r2, #2
 8005af2:	4252      	negs	r2, r2
 8005af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	0018      	movs	r0, r3
 8005afa:	f000 fa69 	bl	8005fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	2280      	movs	r2, #128	; 0x80
 8005b06:	4013      	ands	r3, r2
 8005b08:	2b80      	cmp	r3, #128	; 0x80
 8005b0a:	d10f      	bne.n	8005b2c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	2280      	movs	r2, #128	; 0x80
 8005b14:	4013      	ands	r3, r2
 8005b16:	2b80      	cmp	r3, #128	; 0x80
 8005b18:	d108      	bne.n	8005b2c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2281      	movs	r2, #129	; 0x81
 8005b20:	4252      	negs	r2, r2
 8005b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	0018      	movs	r0, r3
 8005b28:	f001 f984 	bl	8006e34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691a      	ldr	r2, [r3, #16]
 8005b32:	2380      	movs	r3, #128	; 0x80
 8005b34:	005b      	lsls	r3, r3, #1
 8005b36:	401a      	ands	r2, r3
 8005b38:	2380      	movs	r3, #128	; 0x80
 8005b3a:	005b      	lsls	r3, r3, #1
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d10e      	bne.n	8005b5e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	2280      	movs	r2, #128	; 0x80
 8005b48:	4013      	ands	r3, r2
 8005b4a:	2b80      	cmp	r3, #128	; 0x80
 8005b4c:	d107      	bne.n	8005b5e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1c      	ldr	r2, [pc, #112]	; (8005bc4 <HAL_TIM_IRQHandler+0x260>)
 8005b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	0018      	movs	r0, r3
 8005b5a:	f001 f973 	bl	8006e44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	2240      	movs	r2, #64	; 0x40
 8005b66:	4013      	ands	r3, r2
 8005b68:	2b40      	cmp	r3, #64	; 0x40
 8005b6a:	d10f      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	2240      	movs	r2, #64	; 0x40
 8005b74:	4013      	ands	r3, r2
 8005b76:	2b40      	cmp	r3, #64	; 0x40
 8005b78:	d108      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2241      	movs	r2, #65	; 0x41
 8005b80:	4252      	negs	r2, r2
 8005b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	0018      	movs	r0, r3
 8005b88:	f000 fa42 	bl	8006010 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	2220      	movs	r2, #32
 8005b94:	4013      	ands	r3, r2
 8005b96:	2b20      	cmp	r3, #32
 8005b98:	d10f      	bne.n	8005bba <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	2b20      	cmp	r3, #32
 8005ba6:	d108      	bne.n	8005bba <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2221      	movs	r2, #33	; 0x21
 8005bae:	4252      	negs	r2, r2
 8005bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f001 f935 	bl	8006e24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	b002      	add	sp, #8
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	46c0      	nop			; (mov r8, r8)
 8005bc4:	fffffeff 	.word	0xfffffeff

08005bc8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd4:	2317      	movs	r3, #23
 8005bd6:	18fb      	adds	r3, r7, r3
 8005bd8:	2200      	movs	r2, #0
 8005bda:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	223c      	movs	r2, #60	; 0x3c
 8005be0:	5c9b      	ldrb	r3, [r3, r2]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d101      	bne.n	8005bea <HAL_TIM_OC_ConfigChannel+0x22>
 8005be6:	2302      	movs	r3, #2
 8005be8:	e048      	b.n	8005c7c <HAL_TIM_OC_ConfigChannel+0xb4>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	223c      	movs	r2, #60	; 0x3c
 8005bee:	2101      	movs	r1, #1
 8005bf0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b14      	cmp	r3, #20
 8005bf6:	d835      	bhi.n	8005c64 <HAL_TIM_OC_ConfigChannel+0x9c>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	009a      	lsls	r2, r3, #2
 8005bfc:	4b21      	ldr	r3, [pc, #132]	; (8005c84 <HAL_TIM_OC_ConfigChannel+0xbc>)
 8005bfe:	18d3      	adds	r3, r2, r3
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	0011      	movs	r1, r2
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f000 fbf3 	bl	80063f8 <TIM_OC1_SetConfig>
      break;
 8005c12:	e02c      	b.n	8005c6e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	0011      	movs	r1, r2
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	f000 fc75 	bl	800650c <TIM_OC2_SetConfig>
      break;
 8005c22:	e024      	b.n	8005c6e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	0011      	movs	r1, r2
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f000 fcf1 	bl	8006614 <TIM_OC3_SetConfig>
      break;
 8005c32:	e01c      	b.n	8005c6e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	0011      	movs	r1, r2
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	f000 fd71 	bl	8006724 <TIM_OC4_SetConfig>
      break;
 8005c42:	e014      	b.n	8005c6e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	0011      	movs	r1, r2
 8005c4c:	0018      	movs	r0, r3
 8005c4e:	f000 fdd3 	bl	80067f8 <TIM_OC5_SetConfig>
      break;
 8005c52:	e00c      	b.n	8005c6e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	0011      	movs	r1, r2
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	f000 fe2b 	bl	80068b8 <TIM_OC6_SetConfig>
      break;
 8005c62:	e004      	b.n	8005c6e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005c64:	2317      	movs	r3, #23
 8005c66:	18fb      	adds	r3, r7, r3
 8005c68:	2201      	movs	r2, #1
 8005c6a:	701a      	strb	r2, [r3, #0]
      break;
 8005c6c:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	223c      	movs	r2, #60	; 0x3c
 8005c72:	2100      	movs	r1, #0
 8005c74:	5499      	strb	r1, [r3, r2]

  return status;
 8005c76:	2317      	movs	r3, #23
 8005c78:	18fb      	adds	r3, r7, r3
 8005c7a:	781b      	ldrb	r3, [r3, #0]
}
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	b006      	add	sp, #24
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	08007d8c 	.word	0x08007d8c

08005c88 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c94:	2317      	movs	r3, #23
 8005c96:	18fb      	adds	r3, r7, r3
 8005c98:	2200      	movs	r2, #0
 8005c9a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	223c      	movs	r2, #60	; 0x3c
 8005ca0:	5c9b      	ldrb	r3, [r3, r2]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d101      	bne.n	8005caa <HAL_TIM_IC_ConfigChannel+0x22>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	e08c      	b.n	8005dc4 <HAL_TIM_IC_ConfigChannel+0x13c>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	223c      	movs	r2, #60	; 0x3c
 8005cae:	2101      	movs	r1, #1
 8005cb0:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d11b      	bne.n	8005cf0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6818      	ldr	r0, [r3, #0]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	6819      	ldr	r1, [r3, #0]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f000 fe5a 	bl	8006980 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699a      	ldr	r2, [r3, #24]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	210c      	movs	r1, #12
 8005cd8:	438a      	bics	r2, r1
 8005cda:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6999      	ldr	r1, [r3, #24]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	619a      	str	r2, [r3, #24]
 8005cee:	e062      	b.n	8005db6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b04      	cmp	r3, #4
 8005cf4:	d11c      	bne.n	8005d30 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6818      	ldr	r0, [r3, #0]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	6819      	ldr	r1, [r3, #0]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f000 fe93 	bl	8006a30 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	699a      	ldr	r2, [r3, #24]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	492d      	ldr	r1, [pc, #180]	; (8005dcc <HAL_TIM_IC_ConfigChannel+0x144>)
 8005d16:	400a      	ands	r2, r1
 8005d18:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6999      	ldr	r1, [r3, #24]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	021a      	lsls	r2, r3, #8
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	619a      	str	r2, [r3, #24]
 8005d2e:	e042      	b.n	8005db6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b08      	cmp	r3, #8
 8005d34:	d11b      	bne.n	8005d6e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6818      	ldr	r0, [r3, #0]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	6819      	ldr	r1, [r3, #0]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f000 feb5 	bl	8006ab4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69da      	ldr	r2, [r3, #28]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	210c      	movs	r1, #12
 8005d56:	438a      	bics	r2, r1
 8005d58:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69d9      	ldr	r1, [r3, #28]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	61da      	str	r2, [r3, #28]
 8005d6c:	e023      	b.n	8005db6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b0c      	cmp	r3, #12
 8005d72:	d11c      	bne.n	8005dae <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6818      	ldr	r0, [r3, #0]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	6819      	ldr	r1, [r3, #0]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f000 fed6 	bl	8006b34 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	69da      	ldr	r2, [r3, #28]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	490e      	ldr	r1, [pc, #56]	; (8005dcc <HAL_TIM_IC_ConfigChannel+0x144>)
 8005d94:	400a      	ands	r2, r1
 8005d96:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	69d9      	ldr	r1, [r3, #28]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	021a      	lsls	r2, r3, #8
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	61da      	str	r2, [r3, #28]
 8005dac:	e003      	b.n	8005db6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8005dae:	2317      	movs	r3, #23
 8005db0:	18fb      	adds	r3, r7, r3
 8005db2:	2201      	movs	r2, #1
 8005db4:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	223c      	movs	r2, #60	; 0x3c
 8005dba:	2100      	movs	r1, #0
 8005dbc:	5499      	strb	r1, [r3, r2]

  return status;
 8005dbe:	2317      	movs	r3, #23
 8005dc0:	18fb      	adds	r3, r7, r3
 8005dc2:	781b      	ldrb	r3, [r3, #0]
}
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	b006      	add	sp, #24
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	fffff3ff 	.word	0xfffff3ff

08005dd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ddc:	2317      	movs	r3, #23
 8005dde:	18fb      	adds	r3, r7, r3
 8005de0:	2200      	movs	r2, #0
 8005de2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	223c      	movs	r2, #60	; 0x3c
 8005de8:	5c9b      	ldrb	r3, [r3, r2]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d101      	bne.n	8005df2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005dee:	2302      	movs	r3, #2
 8005df0:	e0e5      	b.n	8005fbe <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	223c      	movs	r2, #60	; 0x3c
 8005df6:	2101      	movs	r1, #1
 8005df8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b14      	cmp	r3, #20
 8005dfe:	d900      	bls.n	8005e02 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005e00:	e0d1      	b.n	8005fa6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	009a      	lsls	r2, r3, #2
 8005e06:	4b70      	ldr	r3, [pc, #448]	; (8005fc8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005e08:	18d3      	adds	r3, r2, r3
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	0011      	movs	r1, r2
 8005e16:	0018      	movs	r0, r3
 8005e18:	f000 faee 	bl	80063f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699a      	ldr	r2, [r3, #24]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2108      	movs	r1, #8
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699a      	ldr	r2, [r3, #24]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2104      	movs	r1, #4
 8005e38:	438a      	bics	r2, r1
 8005e3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6999      	ldr	r1, [r3, #24]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	691a      	ldr	r2, [r3, #16]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	619a      	str	r2, [r3, #24]
      break;
 8005e4e:	e0af      	b.n	8005fb0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	0011      	movs	r1, r2
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f000 fb57 	bl	800650c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	699a      	ldr	r2, [r3, #24]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2180      	movs	r1, #128	; 0x80
 8005e6a:	0109      	lsls	r1, r1, #4
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	699a      	ldr	r2, [r3, #24]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4954      	ldr	r1, [pc, #336]	; (8005fcc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005e7c:	400a      	ands	r2, r1
 8005e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6999      	ldr	r1, [r3, #24]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	021a      	lsls	r2, r3, #8
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	619a      	str	r2, [r3, #24]
      break;
 8005e94:	e08c      	b.n	8005fb0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	0011      	movs	r1, r2
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f000 fbb8 	bl	8006614 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	69da      	ldr	r2, [r3, #28]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2108      	movs	r1, #8
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	69da      	ldr	r2, [r3, #28]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2104      	movs	r1, #4
 8005ec0:	438a      	bics	r2, r1
 8005ec2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	69d9      	ldr	r1, [r3, #28]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	691a      	ldr	r2, [r3, #16]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	61da      	str	r2, [r3, #28]
      break;
 8005ed6:	e06b      	b.n	8005fb0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	0011      	movs	r1, r2
 8005ee0:	0018      	movs	r0, r3
 8005ee2:	f000 fc1f 	bl	8006724 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69da      	ldr	r2, [r3, #28]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2180      	movs	r1, #128	; 0x80
 8005ef2:	0109      	lsls	r1, r1, #4
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	69da      	ldr	r2, [r3, #28]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4932      	ldr	r1, [pc, #200]	; (8005fcc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005f04:	400a      	ands	r2, r1
 8005f06:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	69d9      	ldr	r1, [r3, #28]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	021a      	lsls	r2, r3, #8
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	61da      	str	r2, [r3, #28]
      break;
 8005f1c:	e048      	b.n	8005fb0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	0011      	movs	r1, r2
 8005f26:	0018      	movs	r0, r3
 8005f28:	f000 fc66 	bl	80067f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2108      	movs	r1, #8
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2104      	movs	r1, #4
 8005f48:	438a      	bics	r2, r1
 8005f4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	691a      	ldr	r2, [r3, #16]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f5e:	e027      	b.n	8005fb0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	0011      	movs	r1, r2
 8005f68:	0018      	movs	r0, r3
 8005f6a:	f000 fca5 	bl	80068b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2180      	movs	r1, #128	; 0x80
 8005f7a:	0109      	lsls	r1, r1, #4
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4910      	ldr	r1, [pc, #64]	; (8005fcc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005f8c:	400a      	ands	r2, r1
 8005f8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	021a      	lsls	r2, r3, #8
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005fa4:	e004      	b.n	8005fb0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005fa6:	2317      	movs	r3, #23
 8005fa8:	18fb      	adds	r3, r7, r3
 8005faa:	2201      	movs	r2, #1
 8005fac:	701a      	strb	r2, [r3, #0]
      break;
 8005fae:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	223c      	movs	r2, #60	; 0x3c
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	5499      	strb	r1, [r3, r2]

  return status;
 8005fb8:	2317      	movs	r3, #23
 8005fba:	18fb      	adds	r3, r7, r3
 8005fbc:	781b      	ldrb	r3, [r3, #0]
}
 8005fbe:	0018      	movs	r0, r3
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	b006      	add	sp, #24
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	46c0      	nop			; (mov r8, r8)
 8005fc8:	08007de0 	.word	0x08007de0
 8005fcc:	fffffbff 	.word	0xfffffbff

08005fd0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005fd8:	46c0      	nop			; (mov r8, r8)
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	b002      	add	sp, #8
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005fe8:	46c0      	nop			; (mov r8, r8)
 8005fea:	46bd      	mov	sp, r7
 8005fec:	b002      	add	sp, #8
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ff8:	46c0      	nop			; (mov r8, r8)
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	b002      	add	sp, #8
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006008:	46c0      	nop			; (mov r8, r8)
 800600a:	46bd      	mov	sp, r7
 800600c:	b002      	add	sp, #8
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006018:	46c0      	nop			; (mov r8, r8)
 800601a:	46bd      	mov	sp, r7
 800601c:	b002      	add	sp, #8
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006028:	46c0      	nop			; (mov r8, r8)
 800602a:	46bd      	mov	sp, r7
 800602c:	b002      	add	sp, #8
 800602e:	bd80      	pop	{r7, pc}

08006030 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	429a      	cmp	r2, r3
 8006046:	d107      	bne.n	8006058 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2201      	movs	r2, #1
 800604c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	223e      	movs	r2, #62	; 0x3e
 8006052:	2101      	movs	r1, #1
 8006054:	5499      	strb	r1, [r3, r2]
 8006056:	e02a      	b.n	80060ae <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	429a      	cmp	r2, r3
 8006060:	d107      	bne.n	8006072 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2202      	movs	r2, #2
 8006066:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	223f      	movs	r2, #63	; 0x3f
 800606c:	2101      	movs	r1, #1
 800606e:	5499      	strb	r1, [r3, r2]
 8006070:	e01d      	b.n	80060ae <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	429a      	cmp	r2, r3
 800607a:	d107      	bne.n	800608c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2204      	movs	r2, #4
 8006080:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2240      	movs	r2, #64	; 0x40
 8006086:	2101      	movs	r1, #1
 8006088:	5499      	strb	r1, [r3, r2]
 800608a:	e010      	b.n	80060ae <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	429a      	cmp	r2, r3
 8006094:	d107      	bne.n	80060a6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2208      	movs	r2, #8
 800609a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2241      	movs	r2, #65	; 0x41
 80060a0:	2101      	movs	r1, #1
 80060a2:	5499      	strb	r1, [r3, r2]
 80060a4:	e003      	b.n	80060ae <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	223d      	movs	r2, #61	; 0x3d
 80060aa:	2101      	movs	r1, #1
 80060ac:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	0018      	movs	r0, r3
 80060b2:	f7ff ffb5 	bl	8006020 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	771a      	strb	r2, [r3, #28]
}
 80060bc:	46c0      	nop			; (mov r8, r8)
 80060be:	46bd      	mov	sp, r7
 80060c0:	b004      	add	sp, #16
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d10b      	bne.n	80060f4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2201      	movs	r2, #1
 80060e0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d136      	bne.n	8006158 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	223e      	movs	r2, #62	; 0x3e
 80060ee:	2101      	movs	r1, #1
 80060f0:	5499      	strb	r1, [r3, r2]
 80060f2:	e031      	b.n	8006158 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d10b      	bne.n	8006116 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2202      	movs	r2, #2
 8006102:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d125      	bne.n	8006158 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	223f      	movs	r2, #63	; 0x3f
 8006110:	2101      	movs	r1, #1
 8006112:	5499      	strb	r1, [r3, r2]
 8006114:	e020      	b.n	8006158 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	429a      	cmp	r2, r3
 800611e:	d10b      	bne.n	8006138 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2204      	movs	r2, #4
 8006124:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d114      	bne.n	8006158 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2240      	movs	r2, #64	; 0x40
 8006132:	2101      	movs	r1, #1
 8006134:	5499      	strb	r1, [r3, r2]
 8006136:	e00f      	b.n	8006158 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	429a      	cmp	r2, r3
 8006140:	d10a      	bne.n	8006158 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2208      	movs	r2, #8
 8006146:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d103      	bne.n	8006158 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2241      	movs	r2, #65	; 0x41
 8006154:	2101      	movs	r1, #1
 8006156:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	0018      	movs	r0, r3
 800615c:	f7ff ff48 	bl	8005ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	771a      	strb	r2, [r3, #28]
}
 8006166:	46c0      	nop			; (mov r8, r8)
 8006168:	46bd      	mov	sp, r7
 800616a:	b004      	add	sp, #16
 800616c:	bd80      	pop	{r7, pc}

0800616e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	429a      	cmp	r2, r3
 8006184:	d103      	bne.n	800618e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	771a      	strb	r2, [r3, #28]
 800618c:	e019      	b.n	80061c2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	429a      	cmp	r2, r3
 8006196:	d103      	bne.n	80061a0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2202      	movs	r2, #2
 800619c:	771a      	strb	r2, [r3, #28]
 800619e:	e010      	b.n	80061c2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d103      	bne.n	80061b2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2204      	movs	r2, #4
 80061ae:	771a      	strb	r2, [r3, #28]
 80061b0:	e007      	b.n	80061c2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d102      	bne.n	80061c2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2208      	movs	r2, #8
 80061c0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	0018      	movs	r0, r3
 80061c6:	f7ff ff1b 	bl	8006000 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	771a      	strb	r2, [r3, #28]
}
 80061d0:	46c0      	nop			; (mov r8, r8)
 80061d2:	46bd      	mov	sp, r7
 80061d4:	b004      	add	sp, #16
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d10f      	bne.n	8006210 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2201      	movs	r2, #1
 80061f4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d146      	bne.n	800628c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	223e      	movs	r2, #62	; 0x3e
 8006202:	2101      	movs	r1, #1
 8006204:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2244      	movs	r2, #68	; 0x44
 800620a:	2101      	movs	r1, #1
 800620c:	5499      	strb	r1, [r3, r2]
 800620e:	e03d      	b.n	800628c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	429a      	cmp	r2, r3
 8006218:	d10f      	bne.n	800623a <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2202      	movs	r2, #2
 800621e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d131      	bne.n	800628c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	223f      	movs	r2, #63	; 0x3f
 800622c:	2101      	movs	r1, #1
 800622e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2245      	movs	r2, #69	; 0x45
 8006234:	2101      	movs	r1, #1
 8006236:	5499      	strb	r1, [r3, r2]
 8006238:	e028      	b.n	800628c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	429a      	cmp	r2, r3
 8006242:	d10f      	bne.n	8006264 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2204      	movs	r2, #4
 8006248:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d11c      	bne.n	800628c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2240      	movs	r2, #64	; 0x40
 8006256:	2101      	movs	r1, #1
 8006258:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2246      	movs	r2, #70	; 0x46
 800625e:	2101      	movs	r1, #1
 8006260:	5499      	strb	r1, [r3, r2]
 8006262:	e013      	b.n	800628c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	429a      	cmp	r2, r3
 800626c:	d10e      	bne.n	800628c <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2208      	movs	r2, #8
 8006272:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d107      	bne.n	800628c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2241      	movs	r2, #65	; 0x41
 8006280:	2101      	movs	r1, #1
 8006282:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2247      	movs	r2, #71	; 0x47
 8006288:	2101      	movs	r1, #1
 800628a:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	0018      	movs	r0, r3
 8006290:	f001 f8d8 	bl	8007444 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	771a      	strb	r2, [r3, #28]
}
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	46bd      	mov	sp, r7
 800629e:	b004      	add	sp, #16
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d103      	bne.n	80062c2 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2201      	movs	r2, #1
 80062be:	771a      	strb	r2, [r3, #28]
 80062c0:	e019      	b.n	80062f6 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d103      	bne.n	80062d4 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2202      	movs	r2, #2
 80062d0:	771a      	strb	r2, [r3, #28]
 80062d2:	e010      	b.n	80062f6 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d103      	bne.n	80062e6 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2204      	movs	r2, #4
 80062e2:	771a      	strb	r2, [r3, #28]
 80062e4:	e007      	b.n	80062f6 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d102      	bne.n	80062f6 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2208      	movs	r2, #8
 80062f4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	0018      	movs	r0, r3
 80062fa:	f7ff fe71 	bl	8005fe0 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	771a      	strb	r2, [r3, #28]
}
 8006304:	46c0      	nop			; (mov r8, r8)
 8006306:	46bd      	mov	sp, r7
 8006308:	b004      	add	sp, #16
 800630a:	bd80      	pop	{r7, pc}

0800630c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a2f      	ldr	r2, [pc, #188]	; (80063dc <TIM_Base_SetConfig+0xd0>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d003      	beq.n	800632c <TIM_Base_SetConfig+0x20>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a2e      	ldr	r2, [pc, #184]	; (80063e0 <TIM_Base_SetConfig+0xd4>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d108      	bne.n	800633e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2270      	movs	r2, #112	; 0x70
 8006330:	4393      	bics	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a26      	ldr	r2, [pc, #152]	; (80063dc <TIM_Base_SetConfig+0xd0>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d013      	beq.n	800636e <TIM_Base_SetConfig+0x62>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a25      	ldr	r2, [pc, #148]	; (80063e0 <TIM_Base_SetConfig+0xd4>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00f      	beq.n	800636e <TIM_Base_SetConfig+0x62>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a24      	ldr	r2, [pc, #144]	; (80063e4 <TIM_Base_SetConfig+0xd8>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d00b      	beq.n	800636e <TIM_Base_SetConfig+0x62>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a23      	ldr	r2, [pc, #140]	; (80063e8 <TIM_Base_SetConfig+0xdc>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d007      	beq.n	800636e <TIM_Base_SetConfig+0x62>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a22      	ldr	r2, [pc, #136]	; (80063ec <TIM_Base_SetConfig+0xe0>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d003      	beq.n	800636e <TIM_Base_SetConfig+0x62>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a21      	ldr	r2, [pc, #132]	; (80063f0 <TIM_Base_SetConfig+0xe4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d108      	bne.n	8006380 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4a20      	ldr	r2, [pc, #128]	; (80063f4 <TIM_Base_SetConfig+0xe8>)
 8006372:	4013      	ands	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	4313      	orrs	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2280      	movs	r2, #128	; 0x80
 8006384:	4393      	bics	r3, r2
 8006386:	001a      	movs	r2, r3
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	689a      	ldr	r2, [r3, #8]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a0c      	ldr	r2, [pc, #48]	; (80063dc <TIM_Base_SetConfig+0xd0>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d00b      	beq.n	80063c6 <TIM_Base_SetConfig+0xba>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a0d      	ldr	r2, [pc, #52]	; (80063e8 <TIM_Base_SetConfig+0xdc>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d007      	beq.n	80063c6 <TIM_Base_SetConfig+0xba>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a0c      	ldr	r2, [pc, #48]	; (80063ec <TIM_Base_SetConfig+0xe0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d003      	beq.n	80063c6 <TIM_Base_SetConfig+0xba>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a0b      	ldr	r2, [pc, #44]	; (80063f0 <TIM_Base_SetConfig+0xe4>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d103      	bne.n	80063ce <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	691a      	ldr	r2, [r3, #16]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	615a      	str	r2, [r3, #20]
}
 80063d4:	46c0      	nop			; (mov r8, r8)
 80063d6:	46bd      	mov	sp, r7
 80063d8:	b004      	add	sp, #16
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	40012c00 	.word	0x40012c00
 80063e0:	40000400 	.word	0x40000400
 80063e4:	40002000 	.word	0x40002000
 80063e8:	40014000 	.word	0x40014000
 80063ec:	40014400 	.word	0x40014400
 80063f0:	40014800 	.word	0x40014800
 80063f4:	fffffcff 	.word	0xfffffcff

080063f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	2201      	movs	r2, #1
 8006408:	4393      	bics	r3, r2
 800640a:	001a      	movs	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4a32      	ldr	r2, [pc, #200]	; (80064f0 <TIM_OC1_SetConfig+0xf8>)
 8006426:	4013      	ands	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2203      	movs	r2, #3
 800642e:	4393      	bics	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	4313      	orrs	r3, r2
 800643a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	2202      	movs	r2, #2
 8006440:	4393      	bics	r3, r2
 8006442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a28      	ldr	r2, [pc, #160]	; (80064f4 <TIM_OC1_SetConfig+0xfc>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00b      	beq.n	800646e <TIM_OC1_SetConfig+0x76>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a27      	ldr	r2, [pc, #156]	; (80064f8 <TIM_OC1_SetConfig+0x100>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d007      	beq.n	800646e <TIM_OC1_SetConfig+0x76>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a26      	ldr	r2, [pc, #152]	; (80064fc <TIM_OC1_SetConfig+0x104>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d003      	beq.n	800646e <TIM_OC1_SetConfig+0x76>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a25      	ldr	r2, [pc, #148]	; (8006500 <TIM_OC1_SetConfig+0x108>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d10c      	bne.n	8006488 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2208      	movs	r2, #8
 8006472:	4393      	bics	r3, r2
 8006474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	4313      	orrs	r3, r2
 800647e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	2204      	movs	r2, #4
 8006484:	4393      	bics	r3, r2
 8006486:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a1a      	ldr	r2, [pc, #104]	; (80064f4 <TIM_OC1_SetConfig+0xfc>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00b      	beq.n	80064a8 <TIM_OC1_SetConfig+0xb0>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a19      	ldr	r2, [pc, #100]	; (80064f8 <TIM_OC1_SetConfig+0x100>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d007      	beq.n	80064a8 <TIM_OC1_SetConfig+0xb0>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a18      	ldr	r2, [pc, #96]	; (80064fc <TIM_OC1_SetConfig+0x104>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d003      	beq.n	80064a8 <TIM_OC1_SetConfig+0xb0>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a17      	ldr	r2, [pc, #92]	; (8006500 <TIM_OC1_SetConfig+0x108>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d111      	bne.n	80064cc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	4a16      	ldr	r2, [pc, #88]	; (8006504 <TIM_OC1_SetConfig+0x10c>)
 80064ac:	4013      	ands	r3, r2
 80064ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	4a15      	ldr	r2, [pc, #84]	; (8006508 <TIM_OC1_SetConfig+0x110>)
 80064b4:	4013      	ands	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	4313      	orrs	r3, r2
 80064c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	621a      	str	r2, [r3, #32]
}
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	46bd      	mov	sp, r7
 80064ea:	b006      	add	sp, #24
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	fffeff8f 	.word	0xfffeff8f
 80064f4:	40012c00 	.word	0x40012c00
 80064f8:	40014000 	.word	0x40014000
 80064fc:	40014400 	.word	0x40014400
 8006500:	40014800 	.word	0x40014800
 8006504:	fffffeff 	.word	0xfffffeff
 8006508:	fffffdff 	.word	0xfffffdff

0800650c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	2210      	movs	r2, #16
 800651c:	4393      	bics	r3, r2
 800651e:	001a      	movs	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4a2e      	ldr	r2, [pc, #184]	; (80065f4 <TIM_OC2_SetConfig+0xe8>)
 800653a:	4013      	ands	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4a2d      	ldr	r2, [pc, #180]	; (80065f8 <TIM_OC2_SetConfig+0xec>)
 8006542:	4013      	ands	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	021b      	lsls	r3, r3, #8
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4313      	orrs	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2220      	movs	r2, #32
 8006556:	4393      	bics	r3, r2
 8006558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	011b      	lsls	r3, r3, #4
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a24      	ldr	r2, [pc, #144]	; (80065fc <TIM_OC2_SetConfig+0xf0>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d10d      	bne.n	800658a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2280      	movs	r2, #128	; 0x80
 8006572:	4393      	bics	r3, r2
 8006574:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	011b      	lsls	r3, r3, #4
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	4313      	orrs	r3, r2
 8006580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2240      	movs	r2, #64	; 0x40
 8006586:	4393      	bics	r3, r2
 8006588:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a1b      	ldr	r2, [pc, #108]	; (80065fc <TIM_OC2_SetConfig+0xf0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00b      	beq.n	80065aa <TIM_OC2_SetConfig+0x9e>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a1a      	ldr	r2, [pc, #104]	; (8006600 <TIM_OC2_SetConfig+0xf4>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d007      	beq.n	80065aa <TIM_OC2_SetConfig+0x9e>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a19      	ldr	r2, [pc, #100]	; (8006604 <TIM_OC2_SetConfig+0xf8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d003      	beq.n	80065aa <TIM_OC2_SetConfig+0x9e>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a18      	ldr	r2, [pc, #96]	; (8006608 <TIM_OC2_SetConfig+0xfc>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d113      	bne.n	80065d2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	4a17      	ldr	r2, [pc, #92]	; (800660c <TIM_OC2_SetConfig+0x100>)
 80065ae:	4013      	ands	r3, r2
 80065b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	4a16      	ldr	r2, [pc, #88]	; (8006610 <TIM_OC2_SetConfig+0x104>)
 80065b6:	4013      	ands	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	621a      	str	r2, [r3, #32]
}
 80065ec:	46c0      	nop			; (mov r8, r8)
 80065ee:	46bd      	mov	sp, r7
 80065f0:	b006      	add	sp, #24
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	feff8fff 	.word	0xfeff8fff
 80065f8:	fffffcff 	.word	0xfffffcff
 80065fc:	40012c00 	.word	0x40012c00
 8006600:	40014000 	.word	0x40014000
 8006604:	40014400 	.word	0x40014400
 8006608:	40014800 	.word	0x40014800
 800660c:	fffffbff 	.word	0xfffffbff
 8006610:	fffff7ff 	.word	0xfffff7ff

08006614 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	4a35      	ldr	r2, [pc, #212]	; (80066f8 <TIM_OC3_SetConfig+0xe4>)
 8006624:	401a      	ands	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4a2f      	ldr	r2, [pc, #188]	; (80066fc <TIM_OC3_SetConfig+0xe8>)
 8006640:	4013      	ands	r3, r2
 8006642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2203      	movs	r2, #3
 8006648:	4393      	bics	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	4313      	orrs	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	4a29      	ldr	r2, [pc, #164]	; (8006700 <TIM_OC3_SetConfig+0xec>)
 800665a:	4013      	ands	r3, r2
 800665c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	021b      	lsls	r3, r3, #8
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	4313      	orrs	r3, r2
 8006668:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a25      	ldr	r2, [pc, #148]	; (8006704 <TIM_OC3_SetConfig+0xf0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d10d      	bne.n	800668e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	4a24      	ldr	r2, [pc, #144]	; (8006708 <TIM_OC3_SetConfig+0xf4>)
 8006676:	4013      	ands	r3, r2
 8006678:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	021b      	lsls	r3, r3, #8
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	4313      	orrs	r3, r2
 8006684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	4a20      	ldr	r2, [pc, #128]	; (800670c <TIM_OC3_SetConfig+0xf8>)
 800668a:	4013      	ands	r3, r2
 800668c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a1c      	ldr	r2, [pc, #112]	; (8006704 <TIM_OC3_SetConfig+0xf0>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00b      	beq.n	80066ae <TIM_OC3_SetConfig+0x9a>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a1d      	ldr	r2, [pc, #116]	; (8006710 <TIM_OC3_SetConfig+0xfc>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d007      	beq.n	80066ae <TIM_OC3_SetConfig+0x9a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a1c      	ldr	r2, [pc, #112]	; (8006714 <TIM_OC3_SetConfig+0x100>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d003      	beq.n	80066ae <TIM_OC3_SetConfig+0x9a>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a1b      	ldr	r2, [pc, #108]	; (8006718 <TIM_OC3_SetConfig+0x104>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d113      	bne.n	80066d6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	4a1a      	ldr	r2, [pc, #104]	; (800671c <TIM_OC3_SetConfig+0x108>)
 80066b2:	4013      	ands	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	4a19      	ldr	r2, [pc, #100]	; (8006720 <TIM_OC3_SetConfig+0x10c>)
 80066ba:	4013      	ands	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	011b      	lsls	r3, r3, #4
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	621a      	str	r2, [r3, #32]
}
 80066f0:	46c0      	nop			; (mov r8, r8)
 80066f2:	46bd      	mov	sp, r7
 80066f4:	b006      	add	sp, #24
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	fffffeff 	.word	0xfffffeff
 80066fc:	fffeff8f 	.word	0xfffeff8f
 8006700:	fffffdff 	.word	0xfffffdff
 8006704:	40012c00 	.word	0x40012c00
 8006708:	fffff7ff 	.word	0xfffff7ff
 800670c:	fffffbff 	.word	0xfffffbff
 8006710:	40014000 	.word	0x40014000
 8006714:	40014400 	.word	0x40014400
 8006718:	40014800 	.word	0x40014800
 800671c:	ffffefff 	.word	0xffffefff
 8006720:	ffffdfff 	.word	0xffffdfff

08006724 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	4a28      	ldr	r2, [pc, #160]	; (80067d4 <TIM_OC4_SetConfig+0xb0>)
 8006734:	401a      	ands	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4a22      	ldr	r2, [pc, #136]	; (80067d8 <TIM_OC4_SetConfig+0xb4>)
 8006750:	4013      	ands	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4a21      	ldr	r2, [pc, #132]	; (80067dc <TIM_OC4_SetConfig+0xb8>)
 8006758:	4013      	ands	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	021b      	lsls	r3, r3, #8
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	4a1d      	ldr	r2, [pc, #116]	; (80067e0 <TIM_OC4_SetConfig+0xbc>)
 800676c:	4013      	ands	r3, r2
 800676e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	031b      	lsls	r3, r3, #12
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	4313      	orrs	r3, r2
 800677a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a19      	ldr	r2, [pc, #100]	; (80067e4 <TIM_OC4_SetConfig+0xc0>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d00b      	beq.n	800679c <TIM_OC4_SetConfig+0x78>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a18      	ldr	r2, [pc, #96]	; (80067e8 <TIM_OC4_SetConfig+0xc4>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d007      	beq.n	800679c <TIM_OC4_SetConfig+0x78>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a17      	ldr	r2, [pc, #92]	; (80067ec <TIM_OC4_SetConfig+0xc8>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d003      	beq.n	800679c <TIM_OC4_SetConfig+0x78>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a16      	ldr	r2, [pc, #88]	; (80067f0 <TIM_OC4_SetConfig+0xcc>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d109      	bne.n	80067b0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	4a15      	ldr	r2, [pc, #84]	; (80067f4 <TIM_OC4_SetConfig+0xd0>)
 80067a0:	4013      	ands	r3, r2
 80067a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	019b      	lsls	r3, r3, #6
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	621a      	str	r2, [r3, #32]
}
 80067ca:	46c0      	nop			; (mov r8, r8)
 80067cc:	46bd      	mov	sp, r7
 80067ce:	b006      	add	sp, #24
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	46c0      	nop			; (mov r8, r8)
 80067d4:	ffffefff 	.word	0xffffefff
 80067d8:	feff8fff 	.word	0xfeff8fff
 80067dc:	fffffcff 	.word	0xfffffcff
 80067e0:	ffffdfff 	.word	0xffffdfff
 80067e4:	40012c00 	.word	0x40012c00
 80067e8:	40014000 	.word	0x40014000
 80067ec:	40014400 	.word	0x40014400
 80067f0:	40014800 	.word	0x40014800
 80067f4:	ffffbfff 	.word	0xffffbfff

080067f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	4a25      	ldr	r2, [pc, #148]	; (800689c <TIM_OC5_SetConfig+0xa4>)
 8006808:	401a      	ands	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4a1f      	ldr	r2, [pc, #124]	; (80068a0 <TIM_OC5_SetConfig+0xa8>)
 8006824:	4013      	ands	r3, r2
 8006826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	4a1b      	ldr	r2, [pc, #108]	; (80068a4 <TIM_OC5_SetConfig+0xac>)
 8006836:	4013      	ands	r3, r2
 8006838:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	041b      	lsls	r3, r3, #16
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	4313      	orrs	r3, r2
 8006844:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a17      	ldr	r2, [pc, #92]	; (80068a8 <TIM_OC5_SetConfig+0xb0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d00b      	beq.n	8006866 <TIM_OC5_SetConfig+0x6e>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a16      	ldr	r2, [pc, #88]	; (80068ac <TIM_OC5_SetConfig+0xb4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d007      	beq.n	8006866 <TIM_OC5_SetConfig+0x6e>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a15      	ldr	r2, [pc, #84]	; (80068b0 <TIM_OC5_SetConfig+0xb8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d003      	beq.n	8006866 <TIM_OC5_SetConfig+0x6e>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a14      	ldr	r2, [pc, #80]	; (80068b4 <TIM_OC5_SetConfig+0xbc>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d109      	bne.n	800687a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	4a0c      	ldr	r2, [pc, #48]	; (800689c <TIM_OC5_SetConfig+0xa4>)
 800686a:	4013      	ands	r3, r2
 800686c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	021b      	lsls	r3, r3, #8
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	4313      	orrs	r3, r2
 8006878:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	621a      	str	r2, [r3, #32]
}
 8006894:	46c0      	nop			; (mov r8, r8)
 8006896:	46bd      	mov	sp, r7
 8006898:	b006      	add	sp, #24
 800689a:	bd80      	pop	{r7, pc}
 800689c:	fffeffff 	.word	0xfffeffff
 80068a0:	fffeff8f 	.word	0xfffeff8f
 80068a4:	fffdffff 	.word	0xfffdffff
 80068a8:	40012c00 	.word	0x40012c00
 80068ac:	40014000 	.word	0x40014000
 80068b0:	40014400 	.word	0x40014400
 80068b4:	40014800 	.word	0x40014800

080068b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	4a26      	ldr	r2, [pc, #152]	; (8006960 <TIM_OC6_SetConfig+0xa8>)
 80068c8:	401a      	ands	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4a20      	ldr	r2, [pc, #128]	; (8006964 <TIM_OC6_SetConfig+0xac>)
 80068e4:	4013      	ands	r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	021b      	lsls	r3, r3, #8
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	4a1c      	ldr	r2, [pc, #112]	; (8006968 <TIM_OC6_SetConfig+0xb0>)
 80068f8:	4013      	ands	r3, r2
 80068fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	051b      	lsls	r3, r3, #20
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	4313      	orrs	r3, r2
 8006906:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a18      	ldr	r2, [pc, #96]	; (800696c <TIM_OC6_SetConfig+0xb4>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d00b      	beq.n	8006928 <TIM_OC6_SetConfig+0x70>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a17      	ldr	r2, [pc, #92]	; (8006970 <TIM_OC6_SetConfig+0xb8>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d007      	beq.n	8006928 <TIM_OC6_SetConfig+0x70>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a16      	ldr	r2, [pc, #88]	; (8006974 <TIM_OC6_SetConfig+0xbc>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d003      	beq.n	8006928 <TIM_OC6_SetConfig+0x70>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a15      	ldr	r2, [pc, #84]	; (8006978 <TIM_OC6_SetConfig+0xc0>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d109      	bne.n	800693c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	4a14      	ldr	r2, [pc, #80]	; (800697c <TIM_OC6_SetConfig+0xc4>)
 800692c:	4013      	ands	r3, r2
 800692e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	029b      	lsls	r3, r3, #10
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	621a      	str	r2, [r3, #32]
}
 8006956:	46c0      	nop			; (mov r8, r8)
 8006958:	46bd      	mov	sp, r7
 800695a:	b006      	add	sp, #24
 800695c:	bd80      	pop	{r7, pc}
 800695e:	46c0      	nop			; (mov r8, r8)
 8006960:	ffefffff 	.word	0xffefffff
 8006964:	feff8fff 	.word	0xfeff8fff
 8006968:	ffdfffff 	.word	0xffdfffff
 800696c:	40012c00 	.word	0x40012c00
 8006970:	40014000 	.word	0x40014000
 8006974:	40014400 	.word	0x40014400
 8006978:	40014800 	.word	0x40014800
 800697c:	fffbffff 	.word	0xfffbffff

08006980 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
 800698c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	2201      	movs	r2, #1
 8006994:	4393      	bics	r3, r2
 8006996:	001a      	movs	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4a1e      	ldr	r2, [pc, #120]	; (8006a24 <TIM_TI1_SetConfig+0xa4>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d007      	beq.n	80069c0 <TIM_TI1_SetConfig+0x40>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4a1d      	ldr	r2, [pc, #116]	; (8006a28 <TIM_TI1_SetConfig+0xa8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d003      	beq.n	80069c0 <TIM_TI1_SetConfig+0x40>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4a1c      	ldr	r2, [pc, #112]	; (8006a2c <TIM_TI1_SetConfig+0xac>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d101      	bne.n	80069c4 <TIM_TI1_SetConfig+0x44>
 80069c0:	2301      	movs	r3, #1
 80069c2:	e000      	b.n	80069c6 <TIM_TI1_SetConfig+0x46>
 80069c4:	2300      	movs	r3, #0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d008      	beq.n	80069dc <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2203      	movs	r2, #3
 80069ce:	4393      	bics	r3, r2
 80069d0:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]
 80069da:	e003      	b.n	80069e4 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	2201      	movs	r2, #1
 80069e0:	4313      	orrs	r3, r2
 80069e2:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	22f0      	movs	r2, #240	; 0xf0
 80069e8:	4393      	bics	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	011b      	lsls	r3, r3, #4
 80069f0:	22ff      	movs	r2, #255	; 0xff
 80069f2:	4013      	ands	r3, r2
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	220a      	movs	r2, #10
 80069fe:	4393      	bics	r3, r2
 8006a00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	220a      	movs	r2, #10
 8006a06:	4013      	ands	r3, r2
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	621a      	str	r2, [r3, #32]
}
 8006a1a:	46c0      	nop			; (mov r8, r8)
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	b006      	add	sp, #24
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	46c0      	nop			; (mov r8, r8)
 8006a24:	40012c00 	.word	0x40012c00
 8006a28:	40000400 	.word	0x40000400
 8006a2c:	40014000 	.word	0x40014000

08006a30 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
 8006a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	2210      	movs	r2, #16
 8006a44:	4393      	bics	r3, r2
 8006a46:	001a      	movs	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	4a14      	ldr	r2, [pc, #80]	; (8006aac <TIM_TI2_SetConfig+0x7c>)
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	021b      	lsls	r3, r3, #8
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	4a10      	ldr	r2, [pc, #64]	; (8006ab0 <TIM_TI2_SetConfig+0x80>)
 8006a6e:	4013      	ands	r3, r2
 8006a70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	031b      	lsls	r3, r3, #12
 8006a76:	041b      	lsls	r3, r3, #16
 8006a78:	0c1b      	lsrs	r3, r3, #16
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	22a0      	movs	r2, #160	; 0xa0
 8006a84:	4393      	bics	r3, r2
 8006a86:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	011b      	lsls	r3, r3, #4
 8006a8c:	22a0      	movs	r2, #160	; 0xa0
 8006a8e:	4013      	ands	r3, r2
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	621a      	str	r2, [r3, #32]
}
 8006aa2:	46c0      	nop			; (mov r8, r8)
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	b006      	add	sp, #24
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	46c0      	nop			; (mov r8, r8)
 8006aac:	fffffcff 	.word	0xfffffcff
 8006ab0:	ffff0fff 	.word	0xffff0fff

08006ab4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
 8006ac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	4a19      	ldr	r2, [pc, #100]	; (8006b2c <TIM_TI3_SetConfig+0x78>)
 8006ac8:	401a      	ands	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	2203      	movs	r2, #3
 8006ade:	4393      	bics	r3, r2
 8006ae0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	22f0      	movs	r2, #240	; 0xf0
 8006aee:	4393      	bics	r3, r2
 8006af0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	011b      	lsls	r3, r3, #4
 8006af6:	22ff      	movs	r2, #255	; 0xff
 8006af8:	4013      	ands	r3, r2
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	4a0b      	ldr	r2, [pc, #44]	; (8006b30 <TIM_TI3_SetConfig+0x7c>)
 8006b04:	4013      	ands	r3, r2
 8006b06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	021a      	lsls	r2, r3, #8
 8006b0c:	23a0      	movs	r3, #160	; 0xa0
 8006b0e:	011b      	lsls	r3, r3, #4
 8006b10:	4013      	ands	r3, r2
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	621a      	str	r2, [r3, #32]
}
 8006b24:	46c0      	nop			; (mov r8, r8)
 8006b26:	46bd      	mov	sp, r7
 8006b28:	b006      	add	sp, #24
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	fffffeff 	.word	0xfffffeff
 8006b30:	fffff5ff 	.word	0xfffff5ff

08006b34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
 8006b40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	4a1a      	ldr	r2, [pc, #104]	; (8006bb0 <TIM_TI4_SetConfig+0x7c>)
 8006b48:	401a      	ands	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	4a15      	ldr	r2, [pc, #84]	; (8006bb4 <TIM_TI4_SetConfig+0x80>)
 8006b5e:	4013      	ands	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	021b      	lsls	r3, r3, #8
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	4a12      	ldr	r2, [pc, #72]	; (8006bb8 <TIM_TI4_SetConfig+0x84>)
 8006b70:	4013      	ands	r3, r2
 8006b72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	031b      	lsls	r3, r3, #12
 8006b78:	041b      	lsls	r3, r3, #16
 8006b7a:	0c1b      	lsrs	r3, r3, #16
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	4a0d      	ldr	r2, [pc, #52]	; (8006bbc <TIM_TI4_SetConfig+0x88>)
 8006b86:	4013      	ands	r3, r2
 8006b88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	031a      	lsls	r2, r3, #12
 8006b8e:	23a0      	movs	r3, #160	; 0xa0
 8006b90:	021b      	lsls	r3, r3, #8
 8006b92:	4013      	ands	r3, r2
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	621a      	str	r2, [r3, #32]
}
 8006ba6:	46c0      	nop			; (mov r8, r8)
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	b006      	add	sp, #24
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	46c0      	nop			; (mov r8, r8)
 8006bb0:	ffffefff 	.word	0xffffefff
 8006bb4:	fffffcff 	.word	0xfffffcff
 8006bb8:	ffff0fff 	.word	0xffff0fff
 8006bbc:	ffff5fff 	.word	0xffff5fff

08006bc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	221f      	movs	r2, #31
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	409a      	lsls	r2, r3
 8006bd6:	0013      	movs	r3, r2
 8006bd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	43d2      	mvns	r2, r2
 8006be2:	401a      	ands	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a1a      	ldr	r2, [r3, #32]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	211f      	movs	r1, #31
 8006bf0:	400b      	ands	r3, r1
 8006bf2:	6879      	ldr	r1, [r7, #4]
 8006bf4:	4099      	lsls	r1, r3
 8006bf6:	000b      	movs	r3, r1
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	621a      	str	r2, [r3, #32]
}
 8006bfe:	46c0      	nop			; (mov r8, r8)
 8006c00:	46bd      	mov	sp, r7
 8006c02:	b006      	add	sp, #24
 8006c04:	bd80      	pop	{r7, pc}
	...

08006c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	223c      	movs	r2, #60	; 0x3c
 8006c16:	5c9b      	ldrb	r3, [r3, r2]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d101      	bne.n	8006c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	e04f      	b.n	8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	223c      	movs	r2, #60	; 0x3c
 8006c24:	2101      	movs	r1, #1
 8006c26:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	223d      	movs	r2, #61	; 0x3d
 8006c2c:	2102      	movs	r1, #2
 8006c2e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a20      	ldr	r2, [pc, #128]	; (8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d108      	bne.n	8006c5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4a1f      	ldr	r2, [pc, #124]	; (8006ccc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c4e:	4013      	ands	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2270      	movs	r2, #112	; 0x70
 8006c60:	4393      	bics	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a13      	ldr	r2, [pc, #76]	; (8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d009      	beq.n	8006c94 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a12      	ldr	r2, [pc, #72]	; (8006cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d004      	beq.n	8006c94 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a11      	ldr	r2, [pc, #68]	; (8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d10c      	bne.n	8006cae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2280      	movs	r2, #128	; 0x80
 8006c98:	4393      	bics	r3, r2
 8006c9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	223d      	movs	r2, #61	; 0x3d
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	223c      	movs	r2, #60	; 0x3c
 8006cba:	2100      	movs	r1, #0
 8006cbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	b004      	add	sp, #16
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	40012c00 	.word	0x40012c00
 8006ccc:	ff0fffff 	.word	0xff0fffff
 8006cd0:	40000400 	.word	0x40000400
 8006cd4:	40014000 	.word	0x40014000

08006cd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	223c      	movs	r2, #60	; 0x3c
 8006cea:	5c9b      	ldrb	r3, [r3, r2]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d101      	bne.n	8006cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	e079      	b.n	8006de8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	223c      	movs	r2, #60	; 0x3c
 8006cf8:	2101      	movs	r1, #1
 8006cfa:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	22ff      	movs	r2, #255	; 0xff
 8006d00:	4393      	bics	r3, r2
 8006d02:	001a      	movs	r2, r3
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4a38      	ldr	r2, [pc, #224]	; (8006df0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8006d10:	401a      	ands	r2, r3
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	4a35      	ldr	r2, [pc, #212]	; (8006df4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006d1e:	401a      	ands	r2, r3
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4a33      	ldr	r2, [pc, #204]	; (8006df8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006d2c:	401a      	ands	r2, r3
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	4a30      	ldr	r2, [pc, #192]	; (8006dfc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006d3a:	401a      	ands	r2, r3
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4a2e      	ldr	r2, [pc, #184]	; (8006e00 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006d48:	401a      	ands	r2, r3
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	4a2b      	ldr	r2, [pc, #172]	; (8006e04 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006d56:	401a      	ands	r2, r3
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4a29      	ldr	r2, [pc, #164]	; (8006e08 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006d64:	401a      	ands	r2, r3
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	041b      	lsls	r3, r3, #16
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a25      	ldr	r2, [pc, #148]	; (8006e0c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d106      	bne.n	8006d88 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4a24      	ldr	r2, [pc, #144]	; (8006e10 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006d7e:	401a      	ands	r2, r3
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a1f      	ldr	r2, [pc, #124]	; (8006e0c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d121      	bne.n	8006dd6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	4a1f      	ldr	r2, [pc, #124]	; (8006e14 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006d96:	401a      	ands	r2, r3
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9c:	051b      	lsls	r3, r3, #20
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4a1c      	ldr	r2, [pc, #112]	; (8006e18 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8006da6:	401a      	ands	r2, r3
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4a1a      	ldr	r2, [pc, #104]	; (8006e1c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8006db4:	401a      	ands	r2, r3
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a12      	ldr	r2, [pc, #72]	; (8006e0c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d106      	bne.n	8006dd6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4a15      	ldr	r2, [pc, #84]	; (8006e20 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8006dcc:	401a      	ands	r2, r3
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	223c      	movs	r2, #60	; 0x3c
 8006de2:	2100      	movs	r1, #0
 8006de4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	0018      	movs	r0, r3
 8006dea:	46bd      	mov	sp, r7
 8006dec:	b004      	add	sp, #16
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	fffffcff 	.word	0xfffffcff
 8006df4:	fffffbff 	.word	0xfffffbff
 8006df8:	fffff7ff 	.word	0xfffff7ff
 8006dfc:	ffffefff 	.word	0xffffefff
 8006e00:	ffffdfff 	.word	0xffffdfff
 8006e04:	ffffbfff 	.word	0xffffbfff
 8006e08:	fff0ffff 	.word	0xfff0ffff
 8006e0c:	40012c00 	.word	0x40012c00
 8006e10:	efffffff 	.word	0xefffffff
 8006e14:	ff0fffff 	.word	0xff0fffff
 8006e18:	feffffff 	.word	0xfeffffff
 8006e1c:	fdffffff 	.word	0xfdffffff
 8006e20:	dfffffff 	.word	0xdfffffff

08006e24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e2c:	46c0      	nop			; (mov r8, r8)
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	b002      	add	sp, #8
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e3c:	46c0      	nop			; (mov r8, r8)
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	b002      	add	sp, #8
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e4c:	46c0      	nop			; (mov r8, r8)
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	b002      	add	sp, #8
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <_Z12setDutyCyclet>:
const uint16_t dmaPulse = 1;
const uint16_t dmaPulseReload = 1024;
volatile uint16_t dmaBuffer[dmaPulse] = {0};
volatile uint16_t resolution = dmaPulse * dmaPulseReload;
void setDutyCycle(uint16_t dc)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	0002      	movs	r2, r0
 8006e5c:	1dbb      	adds	r3, r7, #6
 8006e5e:	801a      	strh	r2, [r3, #0]
	if( dc > resolution) dc = resolution;
 8006e60:	4b0b      	ldr	r3, [pc, #44]	; (8006e90 <_Z12setDutyCyclet+0x3c>)
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	1dbb      	adds	r3, r7, #6
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	419b      	sbcs	r3, r3
 8006e6e:	425b      	negs	r3, r3
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <_Z12setDutyCyclet+0x2a>
 8006e76:	1dbb      	adds	r3, r7, #6
 8006e78:	4a05      	ldr	r2, [pc, #20]	; (8006e90 <_Z12setDutyCyclet+0x3c>)
 8006e7a:	8812      	ldrh	r2, [r2, #0]
 8006e7c:	801a      	strh	r2, [r3, #0]

	dmaBuffer[0] = dc;
 8006e7e:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <_Z12setDutyCyclet+0x40>)
 8006e80:	1dba      	adds	r2, r7, #6
 8006e82:	8812      	ldrh	r2, [r2, #0]
 8006e84:	801a      	strh	r2, [r3, #0]
}
 8006e86:	46c0      	nop			; (mov r8, r8)
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	b002      	add	sp, #8
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	46c0      	nop			; (mov r8, r8)
 8006e90:	2000000a 	.word	0x2000000a
 8006e94:	20000440 	.word	0x20000440

08006e98 <_Z9commutatev>:

volatile uint8_t reverse = 0;

#define zcPinOn ZC_A_Pin | ZC_B_Pin | ZC_C_Pin
inline void commutate()
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	af00      	add	r7, sp, #0

	// go to next power step.
	powerStepCurrent++;
 8006e9c:	4b64      	ldr	r3, [pc, #400]	; (8007030 <_Z9commutatev+0x198>)
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	4b62      	ldr	r3, [pc, #392]	; (8007030 <_Z9commutatev+0x198>)
 8006ea8:	701a      	strb	r2, [r3, #0]
	powerStepCurrent %= 6;
 8006eaa:	4b61      	ldr	r3, [pc, #388]	; (8007030 <_Z9commutatev+0x198>)
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2106      	movs	r1, #6
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f7f9 f9aa 	bl	800020c <__aeabi_uidivmod>
 8006eb8:	000b      	movs	r3, r1
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	4b5c      	ldr	r3, [pc, #368]	; (8007030 <_Z9commutatev+0x198>)
 8006ebe:	701a      	strb	r2, [r3, #0]

	if( reverse)
 8006ec0:	4b5c      	ldr	r3, [pc, #368]	; (8007034 <_Z9commutatev+0x19c>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	1e5a      	subs	r2, r3, #1
 8006ec8:	4193      	sbcs	r3, r2
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d008      	beq.n	8006ee2 <_Z9commutatev+0x4a>
		powerStep = 5 - powerStepCurrent;
 8006ed0:	4b57      	ldr	r3, [pc, #348]	; (8007030 <_Z9commutatev+0x198>)
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2205      	movs	r2, #5
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	4b56      	ldr	r3, [pc, #344]	; (8007038 <_Z9commutatev+0x1a0>)
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	e004      	b.n	8006eec <_Z9commutatev+0x54>
	else
		powerStep = powerStepCurrent; // forward.
 8006ee2:	4b53      	ldr	r3, [pc, #332]	; (8007030 <_Z9commutatev+0x198>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	4b53      	ldr	r3, [pc, #332]	; (8007038 <_Z9commutatev+0x1a0>)
 8006eea:	701a      	strb	r2, [r3, #0]

	if( rising[reverse][powerStep])
 8006eec:	4b51      	ldr	r3, [pc, #324]	; (8007034 <_Z9commutatev+0x19c>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	0019      	movs	r1, r3
 8006ef4:	4b50      	ldr	r3, [pc, #320]	; (8007038 <_Z9commutatev+0x1a0>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	0018      	movs	r0, r3
 8006efc:	4a4f      	ldr	r2, [pc, #316]	; (800703c <_Z9commutatev+0x1a4>)
 8006efe:	000b      	movs	r3, r1
 8006f00:	005b      	lsls	r3, r3, #1
 8006f02:	185b      	adds	r3, r3, r1
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	18d3      	adds	r3, r2, r3
 8006f08:	5c1b      	ldrb	r3, [r3, r0]
 8006f0a:	1e5a      	subs	r2, r3, #1
 8006f0c:	4193      	sbcs	r3, r2
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d038      	beq.n	8006f86 <_Z9commutatev+0xee>
	{
	// if zc rising
	//		enable zc rising interrupt
		EXTI->FTSR1 = 0;
 8006f14:	4b4a      	ldr	r3, [pc, #296]	; (8007040 <_Z9commutatev+0x1a8>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	605a      	str	r2, [r3, #4]
		EXTI->RTSR1 = zcOff[powerStep];
 8006f1a:	4b47      	ldr	r3, [pc, #284]	; (8007038 <_Z9commutatev+0x1a0>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	0019      	movs	r1, r3
 8006f22:	4b47      	ldr	r3, [pc, #284]	; (8007040 <_Z9commutatev+0x1a8>)
 8006f24:	4a47      	ldr	r2, [pc, #284]	; (8007044 <_Z9commutatev+0x1ac>)
 8006f26:	0089      	lsls	r1, r1, #2
 8006f28:	588a      	ldr	r2, [r1, r2]
 8006f2a:	601a      	str	r2, [r3, #0]
	//		enable odLow
		GPIOA->BSRR = odLow[powerStep];
 8006f2c:	4b42      	ldr	r3, [pc, #264]	; (8007038 <_Z9commutatev+0x1a0>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	0019      	movs	r1, r3
 8006f34:	23a0      	movs	r3, #160	; 0xa0
 8006f36:	05db      	lsls	r3, r3, #23
 8006f38:	4a43      	ldr	r2, [pc, #268]	; (8007048 <_Z9commutatev+0x1b0>)
 8006f3a:	0089      	lsls	r1, r1, #2
 8006f3c:	588a      	ldr	r2, [r1, r2]
 8006f3e:	619a      	str	r2, [r3, #24]
		GPIOA->BRR = odOff[powerStep]; // disable odOff
 8006f40:	4b3d      	ldr	r3, [pc, #244]	; (8007038 <_Z9commutatev+0x1a0>)
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	0019      	movs	r1, r3
 8006f48:	23a0      	movs	r3, #160	; 0xa0
 8006f4a:	05db      	lsls	r3, r3, #23
 8006f4c:	4a3f      	ldr	r2, [pc, #252]	; (800704c <_Z9commutatev+0x1b4>)
 8006f4e:	0089      	lsls	r1, r1, #2
 8006f50:	588a      	ldr	r2, [r1, r2]
 8006f52:	629a      	str	r2, [r3, #40]	; 0x28

		TIM3->CCER |= (ccOff[powerStep]);
 8006f54:	4b38      	ldr	r3, [pc, #224]	; (8007038 <_Z9commutatev+0x1a0>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	001a      	movs	r2, r3
 8006f5c:	4b3c      	ldr	r3, [pc, #240]	; (8007050 <_Z9commutatev+0x1b8>)
 8006f5e:	0092      	lsls	r2, r2, #2
 8006f60:	58d1      	ldr	r1, [r2, r3]
 8006f62:	4b3c      	ldr	r3, [pc, #240]	; (8007054 <_Z9commutatev+0x1bc>)
 8006f64:	6a1a      	ldr	r2, [r3, #32]
 8006f66:	4b3b      	ldr	r3, [pc, #236]	; (8007054 <_Z9commutatev+0x1bc>)
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	621a      	str	r2, [r3, #32]
	//		enable dma on timer 3.
		TIM3->DIER |= (diOff[powerStep]);
 8006f6c:	4b32      	ldr	r3, [pc, #200]	; (8007038 <_Z9commutatev+0x1a0>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	001a      	movs	r2, r3
 8006f74:	4b38      	ldr	r3, [pc, #224]	; (8007058 <_Z9commutatev+0x1c0>)
 8006f76:	0092      	lsls	r2, r2, #2
 8006f78:	58d1      	ldr	r1, [r2, r3]
 8006f7a:	4b36      	ldr	r3, [pc, #216]	; (8007054 <_Z9commutatev+0x1bc>)
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	4b35      	ldr	r3, [pc, #212]	; (8007054 <_Z9commutatev+0x1bc>)
 8006f80:	430a      	orrs	r2, r1
 8006f82:	60da      	str	r2, [r3, #12]
 8006f84:	e039      	b.n	8006ffa <_Z9commutatev+0x162>
	}else
	{
	// else
	//		enable zc falling int.
		EXTI->RTSR1 = 0;
 8006f86:	4b2e      	ldr	r3, [pc, #184]	; (8007040 <_Z9commutatev+0x1a8>)
 8006f88:	2200      	movs	r2, #0
 8006f8a:	601a      	str	r2, [r3, #0]
		EXTI->FTSR1 = zcOff[powerStep];
 8006f8c:	4b2a      	ldr	r3, [pc, #168]	; (8007038 <_Z9commutatev+0x1a0>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	0019      	movs	r1, r3
 8006f94:	4b2a      	ldr	r3, [pc, #168]	; (8007040 <_Z9commutatev+0x1a8>)
 8006f96:	4a2b      	ldr	r2, [pc, #172]	; (8007044 <_Z9commutatev+0x1ac>)
 8006f98:	0089      	lsls	r1, r1, #2
 8006f9a:	588a      	ldr	r2, [r1, r2]
 8006f9c:	605a      	str	r2, [r3, #4]
	//		enable odHigh.
		GPIOA->BRR = odOff[powerStep]; // disable odOff
 8006f9e:	4b26      	ldr	r3, [pc, #152]	; (8007038 <_Z9commutatev+0x1a0>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	0019      	movs	r1, r3
 8006fa6:	23a0      	movs	r3, #160	; 0xa0
 8006fa8:	05db      	lsls	r3, r3, #23
 8006faa:	4a28      	ldr	r2, [pc, #160]	; (800704c <_Z9commutatev+0x1b4>)
 8006fac:	0089      	lsls	r1, r1, #2
 8006fae:	588a      	ldr	r2, [r1, r2]
 8006fb0:	629a      	str	r2, [r3, #40]	; 0x28
		GPIOA->BSRR = odHigh[powerStep];
 8006fb2:	4b21      	ldr	r3, [pc, #132]	; (8007038 <_Z9commutatev+0x1a0>)
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	0019      	movs	r1, r3
 8006fba:	23a0      	movs	r3, #160	; 0xa0
 8006fbc:	05db      	lsls	r3, r3, #23
 8006fbe:	4a27      	ldr	r2, [pc, #156]	; (800705c <_Z9commutatev+0x1c4>)
 8006fc0:	0089      	lsls	r1, r1, #2
 8006fc2:	588a      	ldr	r2, [r1, r2]
 8006fc4:	619a      	str	r2, [r3, #24]

		TIM3->CCER &= ~(ccOff[powerStep]);
 8006fc6:	4b1c      	ldr	r3, [pc, #112]	; (8007038 <_Z9commutatev+0x1a0>)
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	001a      	movs	r2, r3
 8006fce:	4b20      	ldr	r3, [pc, #128]	; (8007050 <_Z9commutatev+0x1b8>)
 8006fd0:	0092      	lsls	r2, r2, #2
 8006fd2:	58d3      	ldr	r3, [r2, r3]
 8006fd4:	43da      	mvns	r2, r3
 8006fd6:	4b1f      	ldr	r3, [pc, #124]	; (8007054 <_Z9commutatev+0x1bc>)
 8006fd8:	6a19      	ldr	r1, [r3, #32]
 8006fda:	4b1e      	ldr	r3, [pc, #120]	; (8007054 <_Z9commutatev+0x1bc>)
 8006fdc:	400a      	ands	r2, r1
 8006fde:	621a      	str	r2, [r3, #32]
		//		disable dma on timer 3
		TIM3->DIER &= ~(diOff[powerStep]);
 8006fe0:	4b15      	ldr	r3, [pc, #84]	; (8007038 <_Z9commutatev+0x1a0>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	001a      	movs	r2, r3
 8006fe8:	4b1b      	ldr	r3, [pc, #108]	; (8007058 <_Z9commutatev+0x1c0>)
 8006fea:	0092      	lsls	r2, r2, #2
 8006fec:	58d3      	ldr	r3, [r2, r3]
 8006fee:	43da      	mvns	r2, r3
 8006ff0:	4b18      	ldr	r3, [pc, #96]	; (8007054 <_Z9commutatev+0x1bc>)
 8006ff2:	68d9      	ldr	r1, [r3, #12]
 8006ff4:	4b17      	ldr	r3, [pc, #92]	; (8007054 <_Z9commutatev+0x1bc>)
 8006ff6:	400a      	ands	r2, r1
 8006ff8:	60da      	str	r2, [r3, #12]
	// add delay of 2 us.
//	TIM7->CNT = 0;
	//while(TIM7->CNT < 128); // 2 us.

	// enable wakeup with interrupt.
	EXTI->IMR1 = resetImrFlags | zcOff[powerStep];
 8006ffa:	4b0f      	ldr	r3, [pc, #60]	; (8007038 <_Z9commutatev+0x1a0>)
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	001a      	movs	r2, r3
 8007002:	4b10      	ldr	r3, [pc, #64]	; (8007044 <_Z9commutatev+0x1ac>)
 8007004:	0092      	lsls	r2, r2, #2
 8007006:	58d2      	ldr	r2, [r2, r3]
 8007008:	4b15      	ldr	r3, [pc, #84]	; (8007060 <_Z9commutatev+0x1c8>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	490c      	ldr	r1, [pc, #48]	; (8007040 <_Z9commutatev+0x1a8>)
 800700e:	4313      	orrs	r3, r2
 8007010:	2280      	movs	r2, #128	; 0x80
 8007012:	508b      	str	r3, [r1, r2]
	// clear any zc pending interrupts.
	EXTI->FPR1 = zcPinOn; ;
 8007014:	4b0a      	ldr	r3, [pc, #40]	; (8007040 <_Z9commutatev+0x1a8>)
 8007016:	22c2      	movs	r2, #194	; 0xc2
 8007018:	0212      	lsls	r2, r2, #8
 800701a:	611a      	str	r2, [r3, #16]
	EXTI->RPR1 = zcPinOn;  ;
 800701c:	4b08      	ldr	r3, [pc, #32]	; (8007040 <_Z9commutatev+0x1a8>)
 800701e:	22c2      	movs	r2, #194	; 0xc2
 8007020:	0212      	lsls	r2, r2, #8
 8007022:	60da      	str	r2, [r3, #12]
	// reset timer17 for bump motor.
	TIM17->CNT = 0;
 8007024:	4b0f      	ldr	r3, [pc, #60]	; (8007064 <_Z9commutatev+0x1cc>)
 8007026:	2200      	movs	r2, #0
 8007028:	625a      	str	r2, [r3, #36]	; 0x24
}
 800702a:	46c0      	nop			; (mov r8, r8)
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	20000449 	.word	0x20000449
 8007034:	2000044a 	.word	0x2000044a
 8007038:	20000448 	.word	0x20000448
 800703c:	08007ec4 	.word	0x08007ec4
 8007040:	40021800 	.word	0x40021800
 8007044:	08007e34 	.word	0x08007e34
 8007048:	08007e4c 	.word	0x08007e4c
 800704c:	08007e7c 	.word	0x08007e7c
 8007050:	08007e94 	.word	0x08007e94
 8007054:	40000400 	.word	0x40000400
 8007058:	08007eac 	.word	0x08007eac
 800705c:	08007e64 	.word	0x08007e64
 8007060:	20000444 	.word	0x20000444
 8007064:	40014800 	.word	0x40014800

08007068 <HAL_GPIO_EXTI_Rising_Callback>:

volatile uint16_t checkRising = 0;
volatile uint16_t checkFalling = 0;
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	0002      	movs	r2, r0
 8007070:	1dbb      	adds	r3, r7, #6
 8007072:	801a      	strh	r2, [r3, #0]
	TIM7->CNT = 0;
 8007074:	4b15      	ldr	r3, [pc, #84]	; (80070cc <HAL_GPIO_EXTI_Rising_Callback+0x64>)
 8007076:	2200      	movs	r2, #0
 8007078:	625a      	str	r2, [r3, #36]	; 0x24

	while( TIM7->CNT < checkRising)
 800707a:	4b14      	ldr	r3, [pc, #80]	; (80070cc <HAL_GPIO_EXTI_Rising_Callback+0x64>)
 800707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707e:	4a14      	ldr	r2, [pc, #80]	; (80070d0 <HAL_GPIO_EXTI_Rising_Callback+0x68>)
 8007080:	8812      	ldrh	r2, [r2, #0]
 8007082:	b292      	uxth	r2, r2
 8007084:	4293      	cmp	r3, r2
 8007086:	419b      	sbcs	r3, r3
 8007088:	425b      	negs	r3, r3
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d015      	beq.n	80070bc <HAL_GPIO_EXTI_Rising_Callback+0x54>
		if( (zcPortOff[powerStep]->IDR & zcOff[powerStep]) == 0)
 8007090:	4b10      	ldr	r3, [pc, #64]	; (80070d4 <HAL_GPIO_EXTI_Rising_Callback+0x6c>)
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	b2db      	uxtb	r3, r3
 8007096:	001a      	movs	r2, r3
 8007098:	4b0f      	ldr	r3, [pc, #60]	; (80070d8 <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 800709a:	0092      	lsls	r2, r2, #2
 800709c:	58d3      	ldr	r3, [r2, r3]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	4a0c      	ldr	r2, [pc, #48]	; (80070d4 <HAL_GPIO_EXTI_Rising_Callback+0x6c>)
 80070a2:	7812      	ldrb	r2, [r2, #0]
 80070a4:	b2d2      	uxtb	r2, r2
 80070a6:	0011      	movs	r1, r2
 80070a8:	4a0c      	ldr	r2, [pc, #48]	; (80070dc <HAL_GPIO_EXTI_Rising_Callback+0x74>)
 80070aa:	0089      	lsls	r1, r1, #2
 80070ac:	588a      	ldr	r2, [r1, r2]
 80070ae:	4013      	ands	r3, r2
 80070b0:	425a      	negs	r2, r3
 80070b2:	4153      	adcs	r3, r2
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d103      	bne.n	80070c2 <HAL_GPIO_EXTI_Rising_Callback+0x5a>
	while( TIM7->CNT < checkRising)
 80070ba:	e7de      	b.n	800707a <HAL_GPIO_EXTI_Rising_Callback+0x12>
			return;

//	if( powerStep == 0 || powerStep == 3)
//		LED_GPIO_Port->BSRR = LED_Pin;

	commutate();
 80070bc:	f7ff feec 	bl	8006e98 <_Z9commutatev>
 80070c0:	e000      	b.n	80070c4 <HAL_GPIO_EXTI_Rising_Callback+0x5c>
			return;
 80070c2:	46c0      	nop			; (mov r8, r8)
}
 80070c4:	46bd      	mov	sp, r7
 80070c6:	b002      	add	sp, #8
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	46c0      	nop			; (mov r8, r8)
 80070cc:	40001400 	.word	0x40001400
 80070d0:	2000044c 	.word	0x2000044c
 80070d4:	20000448 	.word	0x20000448
 80070d8:	2000000c 	.word	0x2000000c
 80070dc:	08007e34 	.word	0x08007e34

080070e0 <HAL_GPIO_EXTI_Falling_Callback>:
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	0002      	movs	r2, r0
 80070e8:	1dbb      	adds	r3, r7, #6
 80070ea:	801a      	strh	r2, [r3, #0]

	TIM7->CNT = 0;
 80070ec:	4b15      	ldr	r3, [pc, #84]	; (8007144 <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	625a      	str	r2, [r3, #36]	; 0x24

	while( TIM7->CNT < checkFalling)
 80070f2:	4b14      	ldr	r3, [pc, #80]	; (8007144 <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 80070f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f6:	4a14      	ldr	r2, [pc, #80]	; (8007148 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 80070f8:	8812      	ldrh	r2, [r2, #0]
 80070fa:	b292      	uxth	r2, r2
 80070fc:	4293      	cmp	r3, r2
 80070fe:	419b      	sbcs	r3, r3
 8007100:	425b      	negs	r3, r3
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b00      	cmp	r3, #0
 8007106:	d015      	beq.n	8007134 <HAL_GPIO_EXTI_Falling_Callback+0x54>
		if( (zcPortOff[powerStep]->IDR & zcOff[powerStep]) )
 8007108:	4b10      	ldr	r3, [pc, #64]	; (800714c <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	b2db      	uxtb	r3, r3
 800710e:	001a      	movs	r2, r3
 8007110:	4b0f      	ldr	r3, [pc, #60]	; (8007150 <HAL_GPIO_EXTI_Falling_Callback+0x70>)
 8007112:	0092      	lsls	r2, r2, #2
 8007114:	58d3      	ldr	r3, [r2, r3]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	4a0c      	ldr	r2, [pc, #48]	; (800714c <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 800711a:	7812      	ldrb	r2, [r2, #0]
 800711c:	b2d2      	uxtb	r2, r2
 800711e:	0011      	movs	r1, r2
 8007120:	4a0c      	ldr	r2, [pc, #48]	; (8007154 <HAL_GPIO_EXTI_Falling_Callback+0x74>)
 8007122:	0089      	lsls	r1, r1, #2
 8007124:	588a      	ldr	r2, [r1, r2]
 8007126:	4013      	ands	r3, r2
 8007128:	1e5a      	subs	r2, r3, #1
 800712a:	4193      	sbcs	r3, r2
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d103      	bne.n	800713a <HAL_GPIO_EXTI_Falling_Callback+0x5a>
	while( TIM7->CNT < checkFalling)
 8007132:	e7de      	b.n	80070f2 <HAL_GPIO_EXTI_Falling_Callback+0x12>
			return;

//	if( powerStep == 0 || powerStep == 3)
//		LED_GPIO_Port->BRR = LED_Pin;

	commutate();
 8007134:	f7ff feb0 	bl	8006e98 <_Z9commutatev>
 8007138:	e000      	b.n	800713c <HAL_GPIO_EXTI_Falling_Callback+0x5c>
			return;
 800713a:	46c0      	nop			; (mov r8, r8)
}
 800713c:	46bd      	mov	sp, r7
 800713e:	b002      	add	sp, #8
 8007140:	bd80      	pop	{r7, pc}
 8007142:	46c0      	nop			; (mov r8, r8)
 8007144:	40001400 	.word	0x40001400
 8007148:	2000044e 	.word	0x2000044e
 800714c:	20000448 	.word	0x20000448
 8007150:	2000000c 	.word	0x2000000c
 8007154:	08007e34 	.word	0x08007e34

08007158 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
	if( htim == &htim17 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	4b0f      	ldr	r3, [pc, #60]	; (80071a0 <HAL_TIM_OC_DelayElapsedCallback+0x48>)
 8007164:	429a      	cmp	r2, r3
 8007166:	d110      	bne.n	800718a <HAL_TIM_OC_DelayElapsedCallback+0x32>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	7f1b      	ldrb	r3, [r3, #28]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d10c      	bne.n	800718a <HAL_TIM_OC_DelayElapsedCallback+0x32>
		if( reverse == 0)
 8007170:	4b0c      	ldr	r3, [pc, #48]	; (80071a4 <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	b2db      	uxtb	r3, r3
 8007176:	425a      	negs	r2, r3
 8007178:	4153      	adcs	r3, r2
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	d004      	beq.n	800718a <HAL_TIM_OC_DelayElapsedCallback+0x32>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8007180:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 8007182:	2110      	movs	r1, #16
 8007184:	0018      	movs	r0, r3
 8007186:	f7fc fd2c 	bl	8003be2 <HAL_GPIO_TogglePin>
		if( motorSpeedCurrent > 0)
 800718a:	4b08      	ldr	r3, [pc, #32]	; (80071ac <HAL_TIM_OC_DelayElapsedCallback+0x54>)
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <HAL_TIM_OC_DelayElapsedCallback+0x3e>
		{// Bump
			commutate();
 8007192:	f7ff fe81 	bl	8006e98 <_Z9commutatev>
		}
}
 8007196:	46c0      	nop			; (mov r8, r8)
 8007198:	46bd      	mov	sp, r7
 800719a:	b002      	add	sp, #8
 800719c:	bd80      	pop	{r7, pc}
 800719e:	46c0      	nop			; (mov r8, r8)
 80071a0:	2000021c 	.word	0x2000021c
 80071a4:	2000044a 	.word	0x2000044a
 80071a8:	50000400 	.word	0x50000400
 80071ac:	2000043e 	.word	0x2000043e

080071b0 <_Z10divClosesttt>:

//////////////////////////////////////////////////////////////////////


uint16_t divClosest( uint16_t a, uint16_t b)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	0002      	movs	r2, r0
 80071b8:	1dbb      	adds	r3, r7, #6
 80071ba:	801a      	strh	r2, [r3, #0]
 80071bc:	1d3b      	adds	r3, r7, #4
 80071be:	1c0a      	adds	r2, r1, #0
 80071c0:	801a      	strh	r2, [r3, #0]
	return (a + b/ 2) / b;
 80071c2:	1dbb      	adds	r3, r7, #6
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	1d3a      	adds	r2, r7, #4
 80071c8:	8812      	ldrh	r2, [r2, #0]
 80071ca:	0852      	lsrs	r2, r2, #1
 80071cc:	b292      	uxth	r2, r2
 80071ce:	189a      	adds	r2, r3, r2
 80071d0:	1d3b      	adds	r3, r7, #4
 80071d2:	881b      	ldrh	r3, [r3, #0]
 80071d4:	0019      	movs	r1, r3
 80071d6:	0010      	movs	r0, r2
 80071d8:	f7f9 f81c 	bl	8000214 <__divsi3>
 80071dc:	0003      	movs	r3, r0
 80071de:	b29b      	uxth	r3, r3
}
 80071e0:	0018      	movs	r0, r3
 80071e2:	46bd      	mov	sp, r7
 80071e4:	b002      	add	sp, #8
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <_Z19processDmaSignalPWMv>:
uint8_t transmitterDirection = 0;
uint8_t masterDirection = 0;
volatile uint16_t pwm1  = 0;
volatile uint16_t pwm2  = 0;
void processDmaSignalPWM()
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
	newDmaSignal = 0;
 80071ee:	4b4e      	ldr	r3, [pc, #312]	; (8007328 <_Z19processDmaSignalPWMv+0x140>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	701a      	strb	r2, [r3, #0]

	uint8_t found = 0;
 80071f4:	1dfb      	adds	r3, r7, #7
 80071f6:	2200      	movs	r2, #0
 80071f8:	701a      	strb	r2, [r3, #0]

	pwm1 = divClosest( dmaSignal[2] - dmaSignal[1] , 8);
 80071fa:	4b4c      	ldr	r3, [pc, #304]	; (800732c <_Z19processDmaSignalPWMv+0x144>)
 80071fc:	889a      	ldrh	r2, [r3, #4]
 80071fe:	4b4b      	ldr	r3, [pc, #300]	; (800732c <_Z19processDmaSignalPWMv+0x144>)
 8007200:	885b      	ldrh	r3, [r3, #2]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	b29b      	uxth	r3, r3
 8007206:	2108      	movs	r1, #8
 8007208:	0018      	movs	r0, r3
 800720a:	f7ff ffd1 	bl	80071b0 <_Z10divClosesttt>
 800720e:	0003      	movs	r3, r0
 8007210:	001a      	movs	r2, r3
 8007212:	4b47      	ldr	r3, [pc, #284]	; (8007330 <_Z19processDmaSignalPWMv+0x148>)
 8007214:	801a      	strh	r2, [r3, #0]
	pwm2 = divClosest(dmaSignal[1] - dmaSignal[0] , 8);
 8007216:	4b45      	ldr	r3, [pc, #276]	; (800732c <_Z19processDmaSignalPWMv+0x144>)
 8007218:	885a      	ldrh	r2, [r3, #2]
 800721a:	4b44      	ldr	r3, [pc, #272]	; (800732c <_Z19processDmaSignalPWMv+0x144>)
 800721c:	881b      	ldrh	r3, [r3, #0]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	b29b      	uxth	r3, r3
 8007222:	2108      	movs	r1, #8
 8007224:	0018      	movs	r0, r3
 8007226:	f7ff ffc3 	bl	80071b0 <_Z10divClosesttt>
 800722a:	0003      	movs	r3, r0
 800722c:	001a      	movs	r2, r3
 800722e:	4b41      	ldr	r3, [pc, #260]	; (8007334 <_Z19processDmaSignalPWMv+0x14c>)
 8007230:	801a      	strh	r2, [r3, #0]

	pwm[0] = pwm1;
 8007232:	4b3f      	ldr	r3, [pc, #252]	; (8007330 <_Z19processDmaSignalPWMv+0x148>)
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	b29a      	uxth	r2, r3
 8007238:	4b3f      	ldr	r3, [pc, #252]	; (8007338 <_Z19processDmaSignalPWMv+0x150>)
 800723a:	801a      	strh	r2, [r3, #0]
	pwm[1] = pwm2;
 800723c:	4b3d      	ldr	r3, [pc, #244]	; (8007334 <_Z19processDmaSignalPWMv+0x14c>)
 800723e:	881b      	ldrh	r3, [r3, #0]
 8007240:	b29a      	uxth	r2, r3
 8007242:	4b3d      	ldr	r3, [pc, #244]	; (8007338 <_Z19processDmaSignalPWMv+0x150>)
 8007244:	805a      	strh	r2, [r3, #2]
	pwm[2] = divClosest(pwm1 + pwm2, 1000);
 8007246:	4b3a      	ldr	r3, [pc, #232]	; (8007330 <_Z19processDmaSignalPWMv+0x148>)
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	b29a      	uxth	r2, r3
 800724c:	4b39      	ldr	r3, [pc, #228]	; (8007334 <_Z19processDmaSignalPWMv+0x14c>)
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	b29b      	uxth	r3, r3
 8007252:	18d3      	adds	r3, r2, r3
 8007254:	b29b      	uxth	r3, r3
 8007256:	22fa      	movs	r2, #250	; 0xfa
 8007258:	0092      	lsls	r2, r2, #2
 800725a:	0011      	movs	r1, r2
 800725c:	0018      	movs	r0, r3
 800725e:	f7ff ffa7 	bl	80071b0 <_Z10divClosesttt>
 8007262:	0003      	movs	r3, r0
 8007264:	001a      	movs	r2, r3
 8007266:	4b34      	ldr	r3, [pc, #208]	; (8007338 <_Z19processDmaSignalPWMv+0x150>)
 8007268:	809a      	strh	r2, [r3, #4]

	if( pwm[2] == 5)
 800726a:	4b33      	ldr	r3, [pc, #204]	; (8007338 <_Z19processDmaSignalPWMv+0x150>)
 800726c:	889b      	ldrh	r3, [r3, #4]
 800726e:	2b05      	cmp	r3, #5
 8007270:	d104      	bne.n	800727c <_Z19processDmaSignalPWMv+0x94>
		transmitterDirection = masterDirection;
 8007272:	4b32      	ldr	r3, [pc, #200]	; (800733c <_Z19processDmaSignalPWMv+0x154>)
 8007274:	781a      	ldrb	r2, [r3, #0]
 8007276:	4b32      	ldr	r3, [pc, #200]	; (8007340 <_Z19processDmaSignalPWMv+0x158>)
 8007278:	701a      	strb	r2, [r3, #0]
 800727a:	e00e      	b.n	800729a <_Z19processDmaSignalPWMv+0xb2>
	else if( pwm[2] == 6)
 800727c:	4b2e      	ldr	r3, [pc, #184]	; (8007338 <_Z19processDmaSignalPWMv+0x150>)
 800727e:	889b      	ldrh	r3, [r3, #4]
 8007280:	2b06      	cmp	r3, #6
 8007282:	d10a      	bne.n	800729a <_Z19processDmaSignalPWMv+0xb2>
	{
		if( masterDirection == 0)
 8007284:	4b2d      	ldr	r3, [pc, #180]	; (800733c <_Z19processDmaSignalPWMv+0x154>)
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d103      	bne.n	8007294 <_Z19processDmaSignalPWMv+0xac>
		transmitterDirection = 1;
 800728c:	4b2c      	ldr	r3, [pc, #176]	; (8007340 <_Z19processDmaSignalPWMv+0x158>)
 800728e:	2201      	movs	r2, #1
 8007290:	701a      	strb	r2, [r3, #0]
 8007292:	e002      	b.n	800729a <_Z19processDmaSignalPWMv+0xb2>
		else
			transmitterDirection = 0;
 8007294:	4b2a      	ldr	r3, [pc, #168]	; (8007340 <_Z19processDmaSignalPWMv+0x158>)
 8007296:	2200      	movs	r2, #0
 8007298:	701a      	strb	r2, [r3, #0]
	}

	pwm1 = pwm1 < pwm2 ? pwm1 : pwm2;
 800729a:	4b25      	ldr	r3, [pc, #148]	; (8007330 <_Z19processDmaSignalPWMv+0x148>)
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	b29a      	uxth	r2, r3
 80072a0:	4b24      	ldr	r3, [pc, #144]	; (8007334 <_Z19processDmaSignalPWMv+0x14c>)
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d203      	bcs.n	80072b2 <_Z19processDmaSignalPWMv+0xca>
 80072aa:	4b21      	ldr	r3, [pc, #132]	; (8007330 <_Z19processDmaSignalPWMv+0x148>)
 80072ac:	881b      	ldrh	r3, [r3, #0]
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	e002      	b.n	80072b8 <_Z19processDmaSignalPWMv+0xd0>
 80072b2:	4b20      	ldr	r3, [pc, #128]	; (8007334 <_Z19processDmaSignalPWMv+0x14c>)
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	4a1d      	ldr	r2, [pc, #116]	; (8007330 <_Z19processDmaSignalPWMv+0x148>)
 80072ba:	8013      	strh	r3, [r2, #0]

	if( pwm1 < 700 || pwm1 > 2010)
 80072bc:	4b1c      	ldr	r3, [pc, #112]	; (8007330 <_Z19processDmaSignalPWMv+0x148>)
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	23af      	movs	r3, #175	; 0xaf
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d305      	bcc.n	80072d6 <_Z19processDmaSignalPWMv+0xee>
 80072ca:	4b19      	ldr	r3, [pc, #100]	; (8007330 <_Z19processDmaSignalPWMv+0x148>)
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	4a1c      	ldr	r2, [pc, #112]	; (8007344 <_Z19processDmaSignalPWMv+0x15c>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d901      	bls.n	80072da <_Z19processDmaSignalPWMv+0xf2>
 80072d6:	2301      	movs	r3, #1
 80072d8:	e000      	b.n	80072dc <_Z19processDmaSignalPWMv+0xf4>
 80072da:	2300      	movs	r3, #0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d003      	beq.n	80072e8 <_Z19processDmaSignalPWMv+0x100>
	{// Signal not PWM try Proshot1000.
		frequencyType = 0;
 80072e0:	4b19      	ldr	r3, [pc, #100]	; (8007348 <_Z19processDmaSignalPWMv+0x160>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	701a      	strb	r2, [r3, #0]

		return;
 80072e6:	e01c      	b.n	8007322 <_Z19processDmaSignalPWMv+0x13a>
	}

	motorSpeed = pwm1 > 1000 && pwm1 < 2010 ? (pwm1 + 24) - 1000 : 0;
 80072e8:	4b11      	ldr	r3, [pc, #68]	; (8007330 <_Z19processDmaSignalPWMv+0x148>)
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	23fa      	movs	r3, #250	; 0xfa
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d90d      	bls.n	8007312 <_Z19processDmaSignalPWMv+0x12a>
 80072f6:	4b0e      	ldr	r3, [pc, #56]	; (8007330 <_Z19processDmaSignalPWMv+0x148>)
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	4a13      	ldr	r2, [pc, #76]	; (800734c <_Z19processDmaSignalPWMv+0x164>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d807      	bhi.n	8007312 <_Z19processDmaSignalPWMv+0x12a>
 8007302:	4b0b      	ldr	r3, [pc, #44]	; (8007330 <_Z19processDmaSignalPWMv+0x148>)
 8007304:	881b      	ldrh	r3, [r3, #0]
 8007306:	b29b      	uxth	r3, r3
 8007308:	4a11      	ldr	r2, [pc, #68]	; (8007350 <_Z19processDmaSignalPWMv+0x168>)
 800730a:	4694      	mov	ip, r2
 800730c:	4463      	add	r3, ip
 800730e:	b29a      	uxth	r2, r3
 8007310:	e000      	b.n	8007314 <_Z19processDmaSignalPWMv+0x12c>
 8007312:	2200      	movs	r2, #0
 8007314:	4b0f      	ldr	r3, [pc, #60]	; (8007354 <_Z19processDmaSignalPWMv+0x16c>)
 8007316:	801a      	strh	r2, [r3, #0]
	dmaSignal[0] = motorSpeed;
 8007318:	4b0e      	ldr	r3, [pc, #56]	; (8007354 <_Z19processDmaSignalPWMv+0x16c>)
 800731a:	881a      	ldrh	r2, [r3, #0]
 800731c:	4b03      	ldr	r3, [pc, #12]	; (800732c <_Z19processDmaSignalPWMv+0x144>)
 800731e:	801a      	strh	r2, [r3, #0]


	return;
 8007320:	46c0      	nop			; (mov r8, r8)


}
 8007322:	46bd      	mov	sp, r7
 8007324:	b002      	add	sp, #8
 8007326:	bd80      	pop	{r7, pc}
 8007328:	200003f8 	.word	0x200003f8
 800732c:	200003fc 	.word	0x200003fc
 8007330:	2000045c 	.word	0x2000045c
 8007334:	2000045e 	.word	0x2000045e
 8007338:	20000454 	.word	0x20000454
 800733c:	2000045b 	.word	0x2000045b
 8007340:	2000045a 	.word	0x2000045a
 8007344:	000007da 	.word	0x000007da
 8007348:	20000450 	.word	0x20000450
 800734c:	000007d9 	.word	0x000007d9
 8007350:	fffffc30 	.word	0xfffffc30
 8007354:	2000043c 	.word	0x2000043c

08007358 <_Z16processDmaSignalv>:

void processDmaSignal()
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
	newDmaSignal = 0;
 800735e:	4b34      	ldr	r3, [pc, #208]	; (8007430 <_Z16processDmaSignalv+0xd8>)
 8007360:	2200      	movs	r2, #0
 8007362:	701a      	strb	r2, [r3, #0]

	for( int index = 0; index < 15; index++)
 8007364:	2300      	movs	r3, #0
 8007366:	607b      	str	r3, [r7, #4]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b0e      	cmp	r3, #14
 800736c:	dc19      	bgt.n	80073a2 <_Z16processDmaSignalv+0x4a>
		dmaSignalNormalized[index] = divClosest( dmaSignal[index + 1] - dmaSignal[index], 8) - 8;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	1c5a      	adds	r2, r3, #1
 8007372:	4b30      	ldr	r3, [pc, #192]	; (8007434 <_Z16processDmaSignalv+0xdc>)
 8007374:	0052      	lsls	r2, r2, #1
 8007376:	5ad2      	ldrh	r2, [r2, r3]
 8007378:	4b2e      	ldr	r3, [pc, #184]	; (8007434 <_Z16processDmaSignalv+0xdc>)
 800737a:	6879      	ldr	r1, [r7, #4]
 800737c:	0049      	lsls	r1, r1, #1
 800737e:	5acb      	ldrh	r3, [r1, r3]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	b29b      	uxth	r3, r3
 8007384:	2108      	movs	r1, #8
 8007386:	0018      	movs	r0, r3
 8007388:	f7ff ff12 	bl	80071b0 <_Z10divClosesttt>
 800738c:	0003      	movs	r3, r0
 800738e:	3b08      	subs	r3, #8
 8007390:	b299      	uxth	r1, r3
 8007392:	4b29      	ldr	r3, [pc, #164]	; (8007438 <_Z16processDmaSignalv+0xe0>)
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	0052      	lsls	r2, r2, #1
 8007398:	52d1      	strh	r1, [r2, r3]
	for( int index = 0; index < 15; index++)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	3301      	adds	r3, #1
 800739e:	607b      	str	r3, [r7, #4]
 80073a0:	e7e2      	b.n	8007368 <_Z16processDmaSignalv+0x10>


	if(dmaSignalNormalized[0] > 1000 &&
 80073a2:	4b25      	ldr	r3, [pc, #148]	; (8007438 <_Z16processDmaSignalv+0xe0>)
 80073a4:	881a      	ldrh	r2, [r3, #0]
 80073a6:	23fa      	movs	r3, #250	; 0xfa
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d90f      	bls.n	80073ce <_Z16processDmaSignalv+0x76>
			dmaSignalNormalized[1] > 1000 &&
 80073ae:	4b22      	ldr	r3, [pc, #136]	; (8007438 <_Z16processDmaSignalv+0xe0>)
 80073b0:	885a      	ldrh	r2, [r3, #2]
	if(dmaSignalNormalized[0] > 1000 &&
 80073b2:	23fa      	movs	r3, #250	; 0xfa
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d909      	bls.n	80073ce <_Z16processDmaSignalv+0x76>
			dmaSignalNormalized[2] > 1000)
 80073ba:	4b1f      	ldr	r3, [pc, #124]	; (8007438 <_Z16processDmaSignalv+0xe0>)
 80073bc:	889a      	ldrh	r2, [r3, #4]
			dmaSignalNormalized[1] > 1000 &&
 80073be:	23fa      	movs	r3, #250	; 0xfa
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d903      	bls.n	80073ce <_Z16processDmaSignalv+0x76>
	{ // Signal not Proshot1000 try PWM.
		frequencyType = 1;
 80073c6:	4b1d      	ldr	r3, [pc, #116]	; (800743c <_Z16processDmaSignalv+0xe4>)
 80073c8:	2201      	movs	r2, #1
 80073ca:	701a      	strb	r2, [r3, #0]
		return;
 80073cc:	e02d      	b.n	800742a <_Z16processDmaSignalv+0xd2>
	}

	for( int index = 0; index <= 10; index++)
 80073ce:	2300      	movs	r3, #0
 80073d0:	603b      	str	r3, [r7, #0]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b0a      	cmp	r3, #10
 80073d6:	dc28      	bgt.n	800742a <_Z16processDmaSignalv+0xd2>
	{
		if( dmaSignalNormalized[index] < 100)
 80073d8:	4b17      	ldr	r3, [pc, #92]	; (8007438 <_Z16processDmaSignalv+0xe0>)
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	0052      	lsls	r2, r2, #1
 80073de:	5ad3      	ldrh	r3, [r2, r3]
 80073e0:	2b63      	cmp	r3, #99	; 0x63
 80073e2:	d91d      	bls.n	8007420 <_Z16processDmaSignalv+0xc8>
			continue;

		motorSpeed = dmaSignalNormalized[index + 1]<<6 |
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	1c5a      	adds	r2, r3, #1
 80073e8:	4b13      	ldr	r3, [pc, #76]	; (8007438 <_Z16processDmaSignalv+0xe0>)
 80073ea:	0052      	lsls	r2, r2, #1
 80073ec:	5ad3      	ldrh	r3, [r2, r3]
 80073ee:	019b      	lsls	r3, r3, #6
 80073f0:	b21a      	sxth	r2, r3
					 dmaSignalNormalized[index + 3]<<2 |
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	1cd9      	adds	r1, r3, #3
 80073f6:	4b10      	ldr	r3, [pc, #64]	; (8007438 <_Z16processDmaSignalv+0xe0>)
 80073f8:	0049      	lsls	r1, r1, #1
 80073fa:	5acb      	ldrh	r3, [r1, r3]
 80073fc:	009b      	lsls	r3, r3, #2
		motorSpeed = dmaSignalNormalized[index + 1]<<6 |
 80073fe:	b21b      	sxth	r3, r3
 8007400:	4313      	orrs	r3, r2
 8007402:	b21a      	sxth	r2, r3
					 dmaSignalNormalized[index + 5]>>2;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	1d59      	adds	r1, r3, #5
 8007408:	4b0b      	ldr	r3, [pc, #44]	; (8007438 <_Z16processDmaSignalv+0xe0>)
 800740a:	0049      	lsls	r1, r1, #1
 800740c:	5acb      	ldrh	r3, [r1, r3]
 800740e:	089b      	lsrs	r3, r3, #2
 8007410:	b29b      	uxth	r3, r3
 8007412:	b21b      	sxth	r3, r3
					 dmaSignalNormalized[index + 3]<<2 |
 8007414:	4313      	orrs	r3, r2
 8007416:	b21b      	sxth	r3, r3
 8007418:	b29a      	uxth	r2, r3
		motorSpeed = dmaSignalNormalized[index + 1]<<6 |
 800741a:	4b09      	ldr	r3, [pc, #36]	; (8007440 <_Z16processDmaSignalv+0xe8>)
 800741c:	801a      	strh	r2, [r3, #0]

		break;
 800741e:	e004      	b.n	800742a <_Z16processDmaSignalv+0xd2>
			continue;
 8007420:	46c0      	nop			; (mov r8, r8)
	for( int index = 0; index <= 10; index++)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	3301      	adds	r3, #1
 8007426:	603b      	str	r3, [r7, #0]
 8007428:	e7d3      	b.n	80073d2 <_Z16processDmaSignalv+0x7a>
	}

}
 800742a:	46bd      	mov	sp, r7
 800742c:	b002      	add	sp, #8
 800742e:	bd80      	pop	{r7, pc}
 8007430:	200003f8 	.word	0x200003f8
 8007434:	200003fc 	.word	0x200003fc
 8007438:	2000041c 	.word	0x2000041c
 800743c:	20000450 	.word	0x20000450
 8007440:	2000043c 	.word	0x2000043c

08007444 <HAL_TIM_IC_CaptureCallback>:
//	}
//
//}

void HAL_TIM_IC_CaptureCallback( TIM_HandleTypeDef *htim)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
	if(htim == &htim1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	4b07      	ldr	r3, [pc, #28]	; (800746c <HAL_TIM_IC_CaptureCallback+0x28>)
 8007450:	429a      	cmp	r2, r3
 8007452:	d106      	bne.n	8007462 <HAL_TIM_IC_CaptureCallback+0x1e>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	7f1b      	ldrb	r3, [r3, #28]
 8007458:	2b04      	cmp	r3, #4
 800745a:	d102      	bne.n	8007462 <HAL_TIM_IC_CaptureCallback+0x1e>
		newDmaSignal = 1;
 800745c:	4b04      	ldr	r3, [pc, #16]	; (8007470 <HAL_TIM_IC_CaptureCallback+0x2c>)
 800745e:	2201      	movs	r2, #1
 8007460:	701a      	strb	r2, [r3, #0]
}
 8007462:	46c0      	nop			; (mov r8, r8)
 8007464:	46bd      	mov	sp, r7
 8007466:	b002      	add	sp, #8
 8007468:	bd80      	pop	{r7, pc}
 800746a:	46c0      	nop			; (mov r8, r8)
 800746c:	20000138 	.word	0x20000138
 8007470:	200003f8 	.word	0x200003f8

08007474 <_Z5setupv>:

void setup()
{
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0
	EXTI->FTSR1 = 0;
 8007478:	4b38      	ldr	r3, [pc, #224]	; (800755c <_Z5setupv+0xe8>)
 800747a:	2200      	movs	r2, #0
 800747c:	605a      	str	r2, [r3, #4]
	EXTI->RTSR1 = 0;
 800747e:	4b37      	ldr	r3, [pc, #220]	; (800755c <_Z5setupv+0xe8>)
 8007480:	2200      	movs	r2, #0
 8007482:	601a      	str	r2, [r3, #0]
	HAL_Delay(1000);
 8007484:	23fa      	movs	r3, #250	; 0xfa
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	0018      	movs	r0, r3
 800748a:	f7fa fd77 	bl	8001f7c <HAL_Delay>
	resetImrFlags = EXTI->IMR1;
 800748e:	4a33      	ldr	r2, [pc, #204]	; (800755c <_Z5setupv+0xe8>)
 8007490:	2380      	movs	r3, #128	; 0x80
 8007492:	58d2      	ldr	r2, [r2, r3]
 8007494:	4b32      	ldr	r3, [pc, #200]	; (8007560 <_Z5setupv+0xec>)
 8007496:	601a      	str	r2, [r3, #0]
	resetImrFlags &= ~(ZC_A_Pin | ZC_B_Pin | ZC_C_Pin );
 8007498:	4b31      	ldr	r3, [pc, #196]	; (8007560 <_Z5setupv+0xec>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a31      	ldr	r2, [pc, #196]	; (8007564 <_Z5setupv+0xf0>)
 800749e:	401a      	ands	r2, r3
 80074a0:	4b2f      	ldr	r3, [pc, #188]	; (8007560 <_Z5setupv+0xec>)
 80074a2:	601a      	str	r2, [r3, #0]
	EXTI->IMR1 = resetImrFlags;
 80074a4:	492d      	ldr	r1, [pc, #180]	; (800755c <_Z5setupv+0xe8>)
 80074a6:	4b2e      	ldr	r3, [pc, #184]	; (8007560 <_Z5setupv+0xec>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2280      	movs	r2, #128	; 0x80
 80074ac:	508b      	str	r3, [r1, r2]

	HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)dmaSignal, 16);
 80074ae:	4a2e      	ldr	r2, [pc, #184]	; (8007568 <_Z5setupv+0xf4>)
 80074b0:	482e      	ldr	r0, [pc, #184]	; (800756c <_Z5setupv+0xf8>)
 80074b2:	2310      	movs	r3, #16
 80074b4:	2108      	movs	r1, #8
 80074b6:	f7fe f895 	bl	80055e4 <HAL_TIM_IC_Start_DMA>



	if( HAL_TIM_Base_Start(&htim3) != HAL_OK)
 80074ba:	4b2d      	ldr	r3, [pc, #180]	; (8007570 <_Z5setupv+0xfc>)
 80074bc:	0018      	movs	r0, r3
 80074be:	f7fd fa3b 	bl	8004938 <HAL_TIM_Base_Start>
 80074c2:	0003      	movs	r3, r0
 80074c4:	1e5a      	subs	r2, r3, #1
 80074c6:	4193      	sbcs	r3, r2
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <_Z5setupv+0x5e>
		Error_Handler();
 80074ce:	f7fa f9f7 	bl	80018c0 <Error_Handler>

	TIM3->CCR2 = 0;
 80074d2:	4b28      	ldr	r3, [pc, #160]	; (8007574 <_Z5setupv+0x100>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 0;
 80074d8:	4b26      	ldr	r3, [pc, #152]	; (8007574 <_Z5setupv+0x100>)
 80074da:	2200      	movs	r2, #0
 80074dc:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 0;
 80074de:	4b25      	ldr	r3, [pc, #148]	; (8007574 <_Z5setupv+0x100>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80074e4:	4b22      	ldr	r3, [pc, #136]	; (8007570 <_Z5setupv+0xfc>)
 80074e6:	2104      	movs	r1, #4
 80074e8:	0018      	movs	r0, r3
 80074ea:	f7fd fc55 	bl	8004d98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80074ee:	4b20      	ldr	r3, [pc, #128]	; (8007570 <_Z5setupv+0xfc>)
 80074f0:	2108      	movs	r1, #8
 80074f2:	0018      	movs	r0, r3
 80074f4:	f7fd fc50 	bl	8004d98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80074f8:	4b1d      	ldr	r3, [pc, #116]	; (8007570 <_Z5setupv+0xfc>)
 80074fa:	210c      	movs	r1, #12
 80074fc:	0018      	movs	r0, r3
 80074fe:	f7fd fc4b 	bl	8004d98 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
 8007502:	4b1b      	ldr	r3, [pc, #108]	; (8007570 <_Z5setupv+0xfc>)
 8007504:	2104      	movs	r1, #4
 8007506:	0018      	movs	r0, r3
 8007508:	f7fd ff24 	bl	8005354 <HAL_TIM_PWM_Stop_DMA>
	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_3);
 800750c:	4b18      	ldr	r3, [pc, #96]	; (8007570 <_Z5setupv+0xfc>)
 800750e:	2108      	movs	r1, #8
 8007510:	0018      	movs	r0, r3
 8007512:	f7fd ff1f 	bl	8005354 <HAL_TIM_PWM_Stop_DMA>
	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_4);
 8007516:	4b16      	ldr	r3, [pc, #88]	; (8007570 <_Z5setupv+0xfc>)
 8007518:	210c      	movs	r1, #12
 800751a:	0018      	movs	r0, r3
 800751c:	f7fd ff1a 	bl	8005354 <HAL_TIM_PWM_Stop_DMA>

	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, (uint32_t*)dmaBuffer, dmaPulse);
 8007520:	4a15      	ldr	r2, [pc, #84]	; (8007578 <_Z5setupv+0x104>)
 8007522:	4813      	ldr	r0, [pc, #76]	; (8007570 <_Z5setupv+0xfc>)
 8007524:	2301      	movs	r3, #1
 8007526:	2104      	movs	r1, #4
 8007528:	f7fd fd1a 	bl	8004f60 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_3, (uint32_t*)dmaBuffer, dmaPulse);
 800752c:	4a12      	ldr	r2, [pc, #72]	; (8007578 <_Z5setupv+0x104>)
 800752e:	4810      	ldr	r0, [pc, #64]	; (8007570 <_Z5setupv+0xfc>)
 8007530:	2301      	movs	r3, #1
 8007532:	2108      	movs	r1, #8
 8007534:	f7fd fd14 	bl	8004f60 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t*)dmaBuffer, dmaPulse);
 8007538:	4a0f      	ldr	r2, [pc, #60]	; (8007578 <_Z5setupv+0x104>)
 800753a:	480d      	ldr	r0, [pc, #52]	; (8007570 <_Z5setupv+0xfc>)
 800753c:	2301      	movs	r3, #1
 800753e:	210c      	movs	r1, #12
 8007540:	f7fd fd0e 	bl	8004f60 <HAL_TIM_PWM_Start_DMA>


	__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,250);
 8007544:	4b0d      	ldr	r3, [pc, #52]	; (800757c <_Z5setupv+0x108>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	22fa      	movs	r2, #250	; 0xfa
 800754a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_OC_Start_IT(&htim17, TIM_CHANNEL_1);
 800754c:	4b0b      	ldr	r3, [pc, #44]	; (800757c <_Z5setupv+0x108>)
 800754e:	2100      	movs	r1, #0
 8007550:	0018      	movs	r0, r3
 8007552:	f7fd fa9f 	bl	8004a94 <HAL_TIM_OC_Start_IT>

}
 8007556:	46c0      	nop			; (mov r8, r8)
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	40021800 	.word	0x40021800
 8007560:	20000444 	.word	0x20000444
 8007564:	ffff3dff 	.word	0xffff3dff
 8007568:	200003fc 	.word	0x200003fc
 800756c:	20000138 	.word	0x20000138
 8007570:	20000184 	.word	0x20000184
 8007574:	40000400 	.word	0x40000400
 8007578:	20000440 	.word	0x20000440
 800757c:	2000021c 	.word	0x2000021c

08007580 <_Z3mapiiiii>:

inline uint16_t map(int x, int in_min, int in_max, int out_min, int out_max)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
 800758c:	603b      	str	r3, [r7, #0]
	if (x < in_min)	x = in_min;
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	429a      	cmp	r2, r3
 8007594:	da01      	bge.n	800759a <_Z3mapiiiii+0x1a>
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	60fb      	str	r3, [r7, #12]

	if (x > in_max) x = in_max;
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	429a      	cmp	r2, r3
 80075a0:	dd01      	ble.n	80075a6 <_Z3mapiiiii+0x26>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	60fb      	str	r3, [r7, #12]

	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	69b9      	ldr	r1, [r7, #24]
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	1a8a      	subs	r2, r1, r2
 80075b2:	435a      	muls	r2, r3
 80075b4:	0010      	movs	r0, r2
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	0019      	movs	r1, r3
 80075be:	f7f8 fe29 	bl	8000214 <__divsi3>
 80075c2:	0003      	movs	r3, r0
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	18d3      	adds	r3, r2, r3
 80075cc:	b29b      	uxth	r3, r3
}
 80075ce:	0018      	movs	r0, r3
 80075d0:	46bd      	mov	sp, r7
 80075d2:	b004      	add	sp, #16
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <_Z10readMemoryPhii>:
volatile double adcValue = 0;
volatile uint16_t fallingPaddingValue = 0;

uint8_t memorySettings[32] = {0};
int sizeOfSettings = sizeof(memorySettings);
void readMemory(unsigned char* data, int size, int location){
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
	location *= 8;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	00db      	lsls	r3, r3, #3
 80075e8:	607b      	str	r3, [r7, #4]

	for( int index = 0; index < size; index++){
 80075ea:	2300      	movs	r3, #0
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	da11      	bge.n	800761a <_Z10readMemoryPhii+0x42>
		data[index] =  (unsigned int)(*(uint64_t*)(0x0801F800 + location));
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a0a      	ldr	r2, [pc, #40]	; (8007624 <_Z10readMemoryPhii+0x4c>)
 80075fa:	4694      	mov	ip, r2
 80075fc:	4463      	add	r3, ip
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	6979      	ldr	r1, [r7, #20]
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	1841      	adds	r1, r0, r1
 8007608:	b2d3      	uxtb	r3, r2
 800760a:	700b      	strb	r3, [r1, #0]
		location += 8;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	3308      	adds	r3, #8
 8007610:	607b      	str	r3, [r7, #4]
	for( int index = 0; index < size; index++){
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	3301      	adds	r3, #1
 8007616:	617b      	str	r3, [r7, #20]
 8007618:	e7e9      	b.n	80075ee <_Z10readMemoryPhii+0x16>
	}

}
 800761a:	46c0      	nop			; (mov r8, r8)
 800761c:	46bd      	mov	sp, r7
 800761e:	b006      	add	sp, #24
 8007620:	bd80      	pop	{r7, pc}
 8007622:	46c0      	nop			; (mov r8, r8)
 8007624:	0801f800 	.word	0x0801f800

08007628 <_Z11writeMemoryPhii>:


void writeMemory(unsigned char* data, int size, int location){
 8007628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800762a:	b08d      	sub	sp, #52	; 0x34
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]

	readMemory(memorySettings, sizeOfSettings, 0);
 8007634:	4b40      	ldr	r3, [pc, #256]	; (8007738 <_Z11writeMemoryPhii+0x110>)
 8007636:	6819      	ldr	r1, [r3, #0]
 8007638:	4b40      	ldr	r3, [pc, #256]	; (800773c <_Z11writeMemoryPhii+0x114>)
 800763a:	2200      	movs	r2, #0
 800763c:	0018      	movs	r0, r3
 800763e:	f7ff ffcb 	bl	80075d8 <_Z10readMemoryPhii>

	size = size > sizeOfSettings ? sizeOfSettings : size;
 8007642:	4b3d      	ldr	r3, [pc, #244]	; (8007738 <_Z11writeMemoryPhii+0x110>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	429a      	cmp	r2, r3
 800764a:	dd02      	ble.n	8007652 <_Z11writeMemoryPhii+0x2a>
 800764c:	4b3a      	ldr	r3, [pc, #232]	; (8007738 <_Z11writeMemoryPhii+0x110>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	e000      	b.n	8007654 <_Z11writeMemoryPhii+0x2c>
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	60bb      	str	r3, [r7, #8]
	location = location >= sizeOfSettings ? sizeOfSettings : location;
 8007656:	4b38      	ldr	r3, [pc, #224]	; (8007738 <_Z11writeMemoryPhii+0x110>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	429a      	cmp	r2, r3
 800765e:	db02      	blt.n	8007666 <_Z11writeMemoryPhii+0x3e>
 8007660:	4b35      	ldr	r3, [pc, #212]	; (8007738 <_Z11writeMemoryPhii+0x110>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	e000      	b.n	8007668 <_Z11writeMemoryPhii+0x40>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	607b      	str	r3, [r7, #4]

	for( int index = 0; index < size; index++){
 800766a:	2300      	movs	r3, #0
 800766c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800766e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	429a      	cmp	r2, r3
 8007674:	da16      	bge.n	80076a4 <_Z11writeMemoryPhii+0x7c>
		location = location >= sizeOfSettings ? sizeOfSettings : location;
 8007676:	4b30      	ldr	r3, [pc, #192]	; (8007738 <_Z11writeMemoryPhii+0x110>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	429a      	cmp	r2, r3
 800767e:	db02      	blt.n	8007686 <_Z11writeMemoryPhii+0x5e>
 8007680:	4b2d      	ldr	r3, [pc, #180]	; (8007738 <_Z11writeMemoryPhii+0x110>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	e000      	b.n	8007688 <_Z11writeMemoryPhii+0x60>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	607b      	str	r3, [r7, #4]
		memorySettings[location++] = data[index];
 800768a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	18d2      	adds	r2, r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	1c59      	adds	r1, r3, #1
 8007694:	6079      	str	r1, [r7, #4]
 8007696:	7811      	ldrb	r1, [r2, #0]
 8007698:	4a28      	ldr	r2, [pc, #160]	; (800773c <_Z11writeMemoryPhii+0x114>)
 800769a:	54d1      	strb	r1, [r2, r3]
	for( int index = 0; index < size; index++){
 800769c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769e:	3301      	adds	r3, #1
 80076a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076a2:	e7e4      	b.n	800766e <_Z11writeMemoryPhii+0x46>
	}

	FLASH_EraseInitTypeDef epage;
	epage.TypeErase = FLASH_TYPEERASE_PAGES; // FLASH_TYPEERASE_PAGES
 80076a4:	2114      	movs	r1, #20
 80076a6:	187b      	adds	r3, r7, r1
 80076a8:	2202      	movs	r2, #2
 80076aa:	601a      	str	r2, [r3, #0]
	epage.Page = 63;
 80076ac:	187b      	adds	r3, r7, r1
 80076ae:	223f      	movs	r2, #63	; 0x3f
 80076b0:	609a      	str	r2, [r3, #8]
	epage.NbPages = 1;
 80076b2:	187b      	adds	r3, r7, r1
 80076b4:	2201      	movs	r2, #1
 80076b6:	60da      	str	r2, [r3, #12]


	uint32_t error = 0;
 80076b8:	2300      	movs	r3, #0
 80076ba:	613b      	str	r3, [r7, #16]
	HAL_StatusTypeDef ret = HAL_FLASH_Unlock();
 80076bc:	2327      	movs	r3, #39	; 0x27
 80076be:	18fe      	adds	r6, r7, r3
 80076c0:	f7fb ffd8 	bl	8003674 <HAL_FLASH_Unlock>
 80076c4:	0003      	movs	r3, r0
 80076c6:	7033      	strb	r3, [r6, #0]

	ret = HAL_FLASHEx_Erase(&epage, &error);
 80076c8:	2327      	movs	r3, #39	; 0x27
 80076ca:	18fe      	adds	r6, r7, r3
 80076cc:	2310      	movs	r3, #16
 80076ce:	18fa      	adds	r2, r7, r3
 80076d0:	2114      	movs	r1, #20
 80076d2:	187b      	adds	r3, r7, r1
 80076d4:	0011      	movs	r1, r2
 80076d6:	0018      	movs	r0, r3
 80076d8:	f7fc f85e 	bl	8003798 <HAL_FLASHEx_Erase>
 80076dc:	0003      	movs	r3, r0
 80076de:	7033      	strb	r3, [r6, #0]
	for( int index = 0; index < sizeOfSettings; index++){
 80076e0:	2300      	movs	r3, #0
 80076e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80076e4:	4b14      	ldr	r3, [pc, #80]	; (8007738 <_Z11writeMemoryPhii+0x110>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076ea:	429a      	cmp	r2, r3
 80076ec:	da19      	bge.n	8007722 <_Z11writeMemoryPhii+0xfa>
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 0x0801F800 + (index * 8), memorySettings[index]);
 80076ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f0:	4a13      	ldr	r2, [pc, #76]	; (8007740 <_Z11writeMemoryPhii+0x118>)
 80076f2:	4694      	mov	ip, r2
 80076f4:	4463      	add	r3, ip
 80076f6:	00db      	lsls	r3, r3, #3
 80076f8:	0019      	movs	r1, r3
 80076fa:	4a10      	ldr	r2, [pc, #64]	; (800773c <_Z11writeMemoryPhii+0x114>)
 80076fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fe:	18d3      	adds	r3, r2, r3
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	001c      	movs	r4, r3
 8007704:	2300      	movs	r3, #0
 8007706:	001d      	movs	r5, r3
 8007708:	2327      	movs	r3, #39	; 0x27
 800770a:	18fe      	adds	r6, r7, r3
 800770c:	0022      	movs	r2, r4
 800770e:	002b      	movs	r3, r5
 8007710:	2001      	movs	r0, #1
 8007712:	f7fb ff61 	bl	80035d8 <HAL_FLASH_Program>
 8007716:	0003      	movs	r3, r0
 8007718:	7033      	strb	r3, [r6, #0]
	for( int index = 0; index < sizeOfSettings; index++){
 800771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771c:	3301      	adds	r3, #1
 800771e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007720:	e7e0      	b.n	80076e4 <_Z11writeMemoryPhii+0xbc>
	}

	ret = HAL_FLASH_Unlock();
 8007722:	2327      	movs	r3, #39	; 0x27
 8007724:	18fc      	adds	r4, r7, r3
 8007726:	f7fb ffa5 	bl	8003674 <HAL_FLASH_Unlock>
 800772a:	0003      	movs	r3, r0
 800772c:	7023      	strb	r3, [r4, #0]

}
 800772e:	46c0      	nop			; (mov r8, r8)
 8007730:	46bd      	mov	sp, r7
 8007732:	b00d      	add	sp, #52	; 0x34
 8007734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007736:	46c0      	nop			; (mov r8, r8)
 8007738:	20000024 	.word	0x20000024
 800773c:	20000474 	.word	0x20000474
 8007740:	01003f00 	.word	0x01003f00

08007744 <maincpp>:

volatile int motorSpeedDirection = 1;
volatile uint8_t direction = 0;
void maincpp()
{
 8007744:	b590      	push	{r4, r7, lr}
 8007746:	b085      	sub	sp, #20
 8007748:	af02      	add	r7, sp, #8
	HAL_ADCEx_Calibration_Start(&hadc1);
 800774a:	4bd8      	ldr	r3, [pc, #864]	; (8007aac <maincpp+0x368>)
 800774c:	0018      	movs	r0, r3
 800774e:	f7fb fad3 	bl	8002cf8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc1);
 8007752:	4bd6      	ldr	r3, [pc, #856]	; (8007aac <maincpp+0x368>)
 8007754:	0018      	movs	r0, r3
 8007756:	f7fa ff39 	bl	80025cc <HAL_ADC_Start>
	if( HAL_TIM_Base_Start(&htim7) != HAL_OK)
 800775a:	4bd5      	ldr	r3, [pc, #852]	; (8007ab0 <maincpp+0x36c>)
 800775c:	0018      	movs	r0, r3
 800775e:	f7fd f8eb 	bl	8004938 <HAL_TIM_Base_Start>
 8007762:	0003      	movs	r3, r0
 8007764:	1e5a      	subs	r2, r3, #1
 8007766:	4193      	sbcs	r3, r2
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <maincpp+0x2e>
		Error_Handler();
 800776e:	f7fa f8a7 	bl	80018c0 <Error_Handler>

	HAL_Delay(500);
 8007772:	23fa      	movs	r3, #250	; 0xfa
 8007774:	005b      	lsls	r3, r3, #1
 8007776:	0018      	movs	r0, r3
 8007778:	f7fa fc00 	bl	8001f7c <HAL_Delay>
	setup();
 800777c:	f7ff fe7a 	bl	8007474 <_Z5setupv>


	for( int i= 0; i < 10; i++)
 8007780:	2300      	movs	r3, #0
 8007782:	607b      	str	r3, [r7, #4]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b09      	cmp	r3, #9
 8007788:	dc0b      	bgt.n	80077a2 <maincpp+0x5e>
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800778a:	4bca      	ldr	r3, [pc, #808]	; (8007ab4 <maincpp+0x370>)
 800778c:	2110      	movs	r1, #16
 800778e:	0018      	movs	r0, r3
 8007790:	f7fc fa27 	bl	8003be2 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8007794:	2064      	movs	r0, #100	; 0x64
 8007796:	f7fa fbf1 	bl	8001f7c <HAL_Delay>
	for( int i= 0; i < 10; i++)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	3301      	adds	r3, #1
 800779e:	607b      	str	r3, [r7, #4]
 80077a0:	e7f0      	b.n	8007784 <maincpp+0x40>
	}


	uint8_t memorySetting[1] = {0};
 80077a2:	003b      	movs	r3, r7
 80077a4:	4ac4      	ldr	r2, [pc, #784]	; (8007ab8 <maincpp+0x374>)
 80077a6:	7812      	ldrb	r2, [r2, #0]
 80077a8:	701a      	strb	r2, [r3, #0]

	readMemory(memorySettings, sizeOfSettings, 0);
 80077aa:	4bc4      	ldr	r3, [pc, #784]	; (8007abc <maincpp+0x378>)
 80077ac:	6819      	ldr	r1, [r3, #0]
 80077ae:	4bc4      	ldr	r3, [pc, #784]	; (8007ac0 <maincpp+0x37c>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	0018      	movs	r0, r3
 80077b4:	f7ff ff10 	bl	80075d8 <_Z10readMemoryPhii>
	if( memorySettings[0] != 1)
 80077b8:	4bc1      	ldr	r3, [pc, #772]	; (8007ac0 <maincpp+0x37c>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d002      	beq.n	80077c6 <maincpp+0x82>
		memorySettings[0] = 0;
 80077c0:	4bbf      	ldr	r3, [pc, #764]	; (8007ac0 <maincpp+0x37c>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	701a      	strb	r2, [r3, #0]

	masterDirection = memorySetting[0];
 80077c6:	003b      	movs	r3, r7
 80077c8:	781a      	ldrb	r2, [r3, #0]
 80077ca:	4bbe      	ldr	r3, [pc, #760]	; (8007ac4 <maincpp+0x380>)
 80077cc:	701a      	strb	r2, [r3, #0]
	direction = masterDirection;
 80077ce:	4bbd      	ldr	r3, [pc, #756]	; (8007ac4 <maincpp+0x380>)
 80077d0:	781a      	ldrb	r2, [r3, #0]
 80077d2:	4bbd      	ldr	r3, [pc, #756]	; (8007ac8 <maincpp+0x384>)
 80077d4:	701a      	strb	r2, [r3, #0]
	reverse = masterDirection;
 80077d6:	4bbb      	ldr	r3, [pc, #748]	; (8007ac4 <maincpp+0x380>)
 80077d8:	781a      	ldrb	r2, [r3, #0]
 80077da:	4bbc      	ldr	r3, [pc, #752]	; (8007acc <maincpp+0x388>)
 80077dc:	701a      	strb	r2, [r3, #0]

	frequencyType = 0;
 80077de:	4bbc      	ldr	r3, [pc, #752]	; (8007ad0 <maincpp+0x38c>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	701a      	strb	r2, [r3, #0]

	uint8_t testMotor = 0;
 80077e4:	1cfb      	adds	r3, r7, #3
 80077e6:	2200      	movs	r2, #0
 80077e8:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		//motorSpeed = 25;

		uint8_t testCounter = 0;
 80077ea:	1cbb      	adds	r3, r7, #2
 80077ec:	2200      	movs	r2, #0
 80077ee:	701a      	strb	r2, [r3, #0]



		if((REV_GPIO_Port->IDR & REV_Pin) == 0)
 80077f0:	23a0      	movs	r3, #160	; 0xa0
 80077f2:	05db      	lsls	r3, r3, #23
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	2202      	movs	r2, #2
 80077f8:	4013      	ands	r3, r2
 80077fa:	425a      	negs	r2, r3
 80077fc:	4153      	adcs	r3, r2
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b00      	cmp	r3, #0
 8007802:	d06b      	beq.n	80078dc <maincpp+0x198>
		{// switch direction when button pressed.

			LED_GPIO_Port->BSRR = LED_Pin;
 8007804:	4bab      	ldr	r3, [pc, #684]	; (8007ab4 <maincpp+0x370>)
 8007806:	2210      	movs	r2, #16
 8007808:	619a      	str	r2, [r3, #24]
			HAL_Delay(500);
 800780a:	23fa      	movs	r3, #250	; 0xfa
 800780c:	005b      	lsls	r3, r3, #1
 800780e:	0018      	movs	r0, r3
 8007810:	f7fa fbb4 	bl	8001f7c <HAL_Delay>
			LED_GPIO_Port->BRR = LED_Pin;
 8007814:	4ba7      	ldr	r3, [pc, #668]	; (8007ab4 <maincpp+0x370>)
 8007816:	2210      	movs	r2, #16
 8007818:	629a      	str	r2, [r3, #40]	; 0x28

			if( masterDirection == 1)
 800781a:	4baa      	ldr	r3, [pc, #680]	; (8007ac4 <maincpp+0x380>)
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d103      	bne.n	800782a <maincpp+0xe6>
				direction = 0;
 8007822:	4ba9      	ldr	r3, [pc, #676]	; (8007ac8 <maincpp+0x384>)
 8007824:	2200      	movs	r2, #0
 8007826:	701a      	strb	r2, [r3, #0]
 8007828:	e002      	b.n	8007830 <maincpp+0xec>
			else
				direction = 1;
 800782a:	4ba7      	ldr	r3, [pc, #668]	; (8007ac8 <maincpp+0x384>)
 800782c:	2201      	movs	r2, #1
 800782e:	701a      	strb	r2, [r3, #0]

			memorySetting[0] = direction;
 8007830:	4ba5      	ldr	r3, [pc, #660]	; (8007ac8 <maincpp+0x384>)
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	b2da      	uxtb	r2, r3
 8007836:	003b      	movs	r3, r7
 8007838:	701a      	strb	r2, [r3, #0]
			masterDirection = direction;
 800783a:	4ba3      	ldr	r3, [pc, #652]	; (8007ac8 <maincpp+0x384>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	b2da      	uxtb	r2, r3
 8007840:	4ba0      	ldr	r3, [pc, #640]	; (8007ac4 <maincpp+0x380>)
 8007842:	701a      	strb	r2, [r3, #0]
			writeMemory(memorySetting, 1, 0);
 8007844:	003b      	movs	r3, r7
 8007846:	2200      	movs	r2, #0
 8007848:	2101      	movs	r1, #1
 800784a:	0018      	movs	r0, r3
 800784c:	f7ff feec 	bl	8007628 <_Z11writeMemoryPhii>

			if(testMotor )
 8007850:	1cfb      	adds	r3, r7, #3
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d008      	beq.n	800786a <maincpp+0x126>
			{
				motorSpeed = 0;
 8007858:	4b9e      	ldr	r3, [pc, #632]	; (8007ad4 <maincpp+0x390>)
 800785a:	2200      	movs	r2, #0
 800785c:	801a      	strh	r2, [r3, #0]
				motorSpeedCurrent = 0;
 800785e:	4b9e      	ldr	r3, [pc, #632]	; (8007ad8 <maincpp+0x394>)
 8007860:	2200      	movs	r2, #0
 8007862:	801a      	strh	r2, [r3, #0]
				setDutyCycle(0);
 8007864:	2000      	movs	r0, #0
 8007866:	f7ff faf5 	bl	8006e54 <_Z12setDutyCyclet>
			}
			testCounter = 0;
 800786a:	1cbb      	adds	r3, r7, #2
 800786c:	2200      	movs	r2, #0
 800786e:	701a      	strb	r2, [r3, #0]
			testMotor = 0;
 8007870:	1cfb      	adds	r3, r7, #3
 8007872:	2200      	movs	r2, #0
 8007874:	701a      	strb	r2, [r3, #0]

			while((REV_GPIO_Port->IDR & REV_Pin) == 0)
 8007876:	23a0      	movs	r3, #160	; 0xa0
 8007878:	05db      	lsls	r3, r3, #23
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	2202      	movs	r2, #2
 800787e:	4013      	ands	r3, r2
 8007880:	425a      	negs	r2, r3
 8007882:	4153      	adcs	r3, r2
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d025      	beq.n	80078d6 <maincpp+0x192>
			{

				if( testCounter++ > 30)
 800788a:	1cbb      	adds	r3, r7, #2
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	1cba      	adds	r2, r7, #2
 8007890:	1c59      	adds	r1, r3, #1
 8007892:	7011      	strb	r1, [r2, #0]
 8007894:	221e      	movs	r2, #30
 8007896:	429a      	cmp	r2, r3
 8007898:	419b      	sbcs	r3, r3
 800789a:	425b      	negs	r3, r3
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d015      	beq.n	80078ce <maincpp+0x18a>
				{

					testMotor = 1;
 80078a2:	1cfb      	adds	r3, r7, #3
 80078a4:	2201      	movs	r2, #1
 80078a6:	701a      	strb	r2, [r3, #0]
					while((REV_GPIO_Port->IDR & REV_Pin) == 0)
 80078a8:	23a0      	movs	r3, #160	; 0xa0
 80078aa:	05db      	lsls	r3, r3, #23
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	2202      	movs	r2, #2
 80078b0:	4013      	ands	r3, r2
 80078b2:	425a      	negs	r2, r3
 80078b4:	4153      	adcs	r3, r2
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d008      	beq.n	80078ce <maincpp+0x18a>
					{
						HAL_Delay(50);
 80078bc:	2032      	movs	r0, #50	; 0x32
 80078be:	f7fa fb5d 	bl	8001f7c <HAL_Delay>
						HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80078c2:	4b7c      	ldr	r3, [pc, #496]	; (8007ab4 <maincpp+0x370>)
 80078c4:	2110      	movs	r1, #16
 80078c6:	0018      	movs	r0, r3
 80078c8:	f7fc f98b 	bl	8003be2 <HAL_GPIO_TogglePin>
					while((REV_GPIO_Port->IDR & REV_Pin) == 0)
 80078cc:	e7ec      	b.n	80078a8 <maincpp+0x164>
					}
				}

				HAL_Delay(50);
 80078ce:	2032      	movs	r0, #50	; 0x32
 80078d0:	f7fa fb54 	bl	8001f7c <HAL_Delay>
			while((REV_GPIO_Port->IDR & REV_Pin) == 0)
 80078d4:	e7cf      	b.n	8007876 <maincpp+0x132>
			}
			LED_GPIO_Port->BRR = LED_Pin;
 80078d6:	4b77      	ldr	r3, [pc, #476]	; (8007ab4 <maincpp+0x370>)
 80078d8:	2210      	movs	r2, #16
 80078da:	629a      	str	r2, [r3, #40]	; 0x28
		}

		if( reverse == 1)
 80078dc:	4b7b      	ldr	r3, [pc, #492]	; (8007acc <maincpp+0x388>)
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	3b01      	subs	r3, #1
 80078e4:	425a      	negs	r2, r3
 80078e6:	4153      	adcs	r3, r2
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <maincpp+0x1b2>
			LED_GPIO_Port->BSRR = LED_Pin;
 80078ee:	4b71      	ldr	r3, [pc, #452]	; (8007ab4 <maincpp+0x370>)
 80078f0:	2210      	movs	r2, #16
 80078f2:	619a      	str	r2, [r3, #24]
 80078f4:	e002      	b.n	80078fc <maincpp+0x1b8>
		else
			LED_GPIO_Port->BRR = LED_Pin;
 80078f6:	4b6f      	ldr	r3, [pc, #444]	; (8007ab4 <maincpp+0x370>)
 80078f8:	2210      	movs	r2, #16
 80078fa:	629a      	str	r2, [r3, #40]	; 0x28



		if( newDmaSignal || testMotor)
 80078fc:	4b77      	ldr	r3, [pc, #476]	; (8007adc <maincpp+0x398>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d104      	bne.n	800790e <maincpp+0x1ca>
 8007904:	1cfb      	adds	r3, r7, #3
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d100      	bne.n	800790e <maincpp+0x1ca>
 800790c:	e76d      	b.n	80077ea <maincpp+0xa6>
		{
			if( !testMotor)
 800790e:	1cfb      	adds	r3, r7, #3
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d11c      	bne.n	8007950 <maincpp+0x20c>
			{
				if(frequencyType == 0)
 8007916:	4b6e      	ldr	r3, [pc, #440]	; (8007ad0 <maincpp+0x38c>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	b2db      	uxtb	r3, r3
 800791c:	425a      	negs	r2, r3
 800791e:	4153      	adcs	r3, r2
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d002      	beq.n	800792c <maincpp+0x1e8>
				{
					processDmaSignal();
 8007926:	f7ff fd17 	bl	8007358 <_Z16processDmaSignalv>
 800792a:	e044      	b.n	80079b6 <maincpp+0x272>
				}
				else
				{
					processDmaSignalPWM();
 800792c:	f7ff fc5c 	bl	80071e8 <_Z19processDmaSignalPWMv>
					if( transmitterDirection != direction)
 8007930:	4b6b      	ldr	r3, [pc, #428]	; (8007ae0 <maincpp+0x39c>)
 8007932:	781a      	ldrb	r2, [r3, #0]
 8007934:	4b64      	ldr	r3, [pc, #400]	; (8007ac8 <maincpp+0x384>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	b2db      	uxtb	r3, r3
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	1e5a      	subs	r2, r3, #1
 800793e:	4193      	sbcs	r3, r2
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	d037      	beq.n	80079b6 <maincpp+0x272>
						direction = transmitterDirection;
 8007946:	4b66      	ldr	r3, [pc, #408]	; (8007ae0 <maincpp+0x39c>)
 8007948:	781a      	ldrb	r2, [r3, #0]
 800794a:	4b5f      	ldr	r3, [pc, #380]	; (8007ac8 <maincpp+0x384>)
 800794c:	701a      	strb	r2, [r3, #0]
 800794e:	e032      	b.n	80079b6 <maincpp+0x272>
				}
			}
			else
			{
				motorSpeed += motorSpeedDirection;
 8007950:	4b64      	ldr	r3, [pc, #400]	; (8007ae4 <maincpp+0x3a0>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	b29a      	uxth	r2, r3
 8007956:	4b5f      	ldr	r3, [pc, #380]	; (8007ad4 <maincpp+0x390>)
 8007958:	881b      	ldrh	r3, [r3, #0]
 800795a:	18d3      	adds	r3, r2, r3
 800795c:	b29a      	uxth	r2, r3
 800795e:	4b5d      	ldr	r3, [pc, #372]	; (8007ad4 <maincpp+0x390>)
 8007960:	801a      	strh	r2, [r3, #0]
				HAL_Delay(30);
 8007962:	201e      	movs	r0, #30
 8007964:	f7fa fb0a 	bl	8001f7c <HAL_Delay>

				if( motorSpeed > 300 || motorSpeed <= 0)
 8007968:	4b5a      	ldr	r3, [pc, #360]	; (8007ad4 <maincpp+0x390>)
 800796a:	881a      	ldrh	r2, [r3, #0]
 800796c:	2396      	movs	r3, #150	; 0x96
 800796e:	005b      	lsls	r3, r3, #1
 8007970:	429a      	cmp	r2, r3
 8007972:	d803      	bhi.n	800797c <maincpp+0x238>
 8007974:	4b57      	ldr	r3, [pc, #348]	; (8007ad4 <maincpp+0x390>)
 8007976:	881b      	ldrh	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d11c      	bne.n	80079b6 <maincpp+0x272>
				{

					motorSpeedDirection *= -1;
 800797c:	4b59      	ldr	r3, [pc, #356]	; (8007ae4 <maincpp+0x3a0>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	425a      	negs	r2, r3
 8007982:	4b58      	ldr	r3, [pc, #352]	; (8007ae4 <maincpp+0x3a0>)
 8007984:	601a      	str	r2, [r3, #0]
					if( motorSpeedDirection == 1)
 8007986:	4b57      	ldr	r3, [pc, #348]	; (8007ae4 <maincpp+0x3a0>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3b01      	subs	r3, #1
 800798c:	425a      	negs	r2, r3
 800798e:	4153      	adcs	r3, r2
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00f      	beq.n	80079b6 <maincpp+0x272>
					{
						if( direction == 1)
 8007996:	4b4c      	ldr	r3, [pc, #304]	; (8007ac8 <maincpp+0x384>)
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	b2db      	uxtb	r3, r3
 800799c:	3b01      	subs	r3, #1
 800799e:	425a      	negs	r2, r3
 80079a0:	4153      	adcs	r3, r2
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d003      	beq.n	80079b0 <maincpp+0x26c>
							direction = 0;
 80079a8:	4b47      	ldr	r3, [pc, #284]	; (8007ac8 <maincpp+0x384>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	e002      	b.n	80079b6 <maincpp+0x272>
						else
							direction = 1;
 80079b0:	4b45      	ldr	r3, [pc, #276]	; (8007ac8 <maincpp+0x384>)
 80079b2:	2201      	movs	r2, #1
 80079b4:	701a      	strb	r2, [r3, #0]
			}
//			if( GPIOA->IDR & REV_Pin )
//				direction = 1;
//			else
//				direction = 0;
			if( direction != reverse )
 80079b6:	4b44      	ldr	r3, [pc, #272]	; (8007ac8 <maincpp+0x384>)
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	4b43      	ldr	r3, [pc, #268]	; (8007acc <maincpp+0x388>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	1e5a      	subs	r2, r3, #1
 80079c6:	4193      	sbcs	r3, r2
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00f      	beq.n	80079ee <maincpp+0x2aa>
			{
				motorSpeedCurrent = 0;
 80079ce:	4b42      	ldr	r3, [pc, #264]	; (8007ad8 <maincpp+0x394>)
 80079d0:	2200      	movs	r2, #0
 80079d2:	801a      	strh	r2, [r3, #0]
				setDutyCycle(motorSpeedCurrent);
 80079d4:	4b40      	ldr	r3, [pc, #256]	; (8007ad8 <maincpp+0x394>)
 80079d6:	881b      	ldrh	r3, [r3, #0]
 80079d8:	0018      	movs	r0, r3
 80079da:	f7ff fa3b 	bl	8006e54 <_Z12setDutyCyclet>
				reverse = direction;
 80079de:	4b3a      	ldr	r3, [pc, #232]	; (8007ac8 <maincpp+0x384>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	4b39      	ldr	r3, [pc, #228]	; (8007acc <maincpp+0x388>)
 80079e6:	701a      	strb	r2, [r3, #0]
				HAL_Delay(100);
 80079e8:	2064      	movs	r0, #100	; 0x64
 80079ea:	f7fa fac7 	bl	8001f7c <HAL_Delay>
			}

			adcValue = HAL_ADC_GetValue(&hadc1);
 80079ee:	4b2f      	ldr	r3, [pc, #188]	; (8007aac <maincpp+0x368>)
 80079f0:	0018      	movs	r0, r3
 80079f2:	f7fa fe39 	bl	8002668 <HAL_ADC_GetValue>
 80079f6:	0003      	movs	r3, r0
 80079f8:	0018      	movs	r0, r3
 80079fa:	f7f9 fbd9 	bl	80011b0 <__aeabi_ui2d>
 80079fe:	0002      	movs	r2, r0
 8007a00:	000b      	movs	r3, r1
 8007a02:	4939      	ldr	r1, [pc, #228]	; (8007ae8 <maincpp+0x3a4>)
 8007a04:	600a      	str	r2, [r1, #0]
 8007a06:	604b      	str	r3, [r1, #4]

			if( adcValue > 0)
 8007a08:	4b37      	ldr	r3, [pc, #220]	; (8007ae8 <maincpp+0x3a4>)
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	6859      	ldr	r1, [r3, #4]
 8007a0e:	2301      	movs	r3, #1
 8007a10:	1c1c      	adds	r4, r3, #0
 8007a12:	2200      	movs	r2, #0
 8007a14:	2300      	movs	r3, #0
 8007a16:	f7f8 fd13 	bl	8000440 <__aeabi_dcmpgt>
 8007a1a:	1e03      	subs	r3, r0, #0
 8007a1c:	d101      	bne.n	8007a22 <maincpp+0x2de>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	1c1c      	adds	r4, r3, #0
 8007a22:	b2e3      	uxtb	r3, r4
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d026      	beq.n	8007a76 <maincpp+0x332>
			{
				//											rb/rt
				batteryVoltages = adcValue*(3.3 / 4095.0)/(10000.0/110000.0);
 8007a28:	4b2f      	ldr	r3, [pc, #188]	; (8007ae8 <maincpp+0x3a4>)
 8007a2a:	6818      	ldr	r0, [r3, #0]
 8007a2c:	6859      	ldr	r1, [r3, #4]
 8007a2e:	4a2f      	ldr	r2, [pc, #188]	; (8007aec <maincpp+0x3a8>)
 8007a30:	4b2f      	ldr	r3, [pc, #188]	; (8007af0 <maincpp+0x3ac>)
 8007a32:	f7f9 f91b 	bl	8000c6c <__aeabi_dmul>
 8007a36:	0002      	movs	r2, r0
 8007a38:	000b      	movs	r3, r1
 8007a3a:	0010      	movs	r0, r2
 8007a3c:	0019      	movs	r1, r3
 8007a3e:	4a2d      	ldr	r2, [pc, #180]	; (8007af4 <maincpp+0x3b0>)
 8007a40:	4b2d      	ldr	r3, [pc, #180]	; (8007af8 <maincpp+0x3b4>)
 8007a42:	f7f8 fd11 	bl	8000468 <__aeabi_ddiv>
 8007a46:	0002      	movs	r2, r0
 8007a48:	000b      	movs	r3, r1
 8007a4a:	492c      	ldr	r1, [pc, #176]	; (8007afc <maincpp+0x3b8>)
 8007a4c:	600a      	str	r2, [r1, #0]
 8007a4e:	604b      	str	r3, [r1, #4]

				fallingPaddingValue = map(batteryVoltages,8,25,1,400);
 8007a50:	4b2a      	ldr	r3, [pc, #168]	; (8007afc <maincpp+0x3b8>)
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	0010      	movs	r0, r2
 8007a58:	0019      	movs	r1, r3
 8007a5a:	f7f9 fb73 	bl	8001144 <__aeabi_d2iz>
 8007a5e:	23c8      	movs	r3, #200	; 0xc8
 8007a60:	005b      	lsls	r3, r3, #1
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	2301      	movs	r3, #1
 8007a66:	2219      	movs	r2, #25
 8007a68:	2108      	movs	r1, #8
 8007a6a:	f7ff fd89 	bl	8007580 <_Z3mapiiiii>
 8007a6e:	0003      	movs	r3, r0
 8007a70:	001a      	movs	r2, r3
 8007a72:	4b23      	ldr	r3, [pc, #140]	; (8007b00 <maincpp+0x3bc>)
 8007a74:	801a      	strh	r2, [r3, #0]
			}

			if( motorSpeed != motorSpeedCurrent)
 8007a76:	4b17      	ldr	r3, [pc, #92]	; (8007ad4 <maincpp+0x390>)
 8007a78:	881a      	ldrh	r2, [r3, #0]
 8007a7a:	4b17      	ldr	r3, [pc, #92]	; (8007ad8 <maincpp+0x394>)
 8007a7c:	881b      	ldrh	r3, [r3, #0]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d100      	bne.n	8007a84 <maincpp+0x340>
 8007a82:	e0a9      	b.n	8007bd8 <maincpp+0x494>
			{
				if( motorSpeedCurrent < 120)
 8007a84:	4b14      	ldr	r3, [pc, #80]	; (8007ad8 <maincpp+0x394>)
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	2b77      	cmp	r3, #119	; 0x77
 8007a8a:	d840      	bhi.n	8007b0e <maincpp+0x3ca>
				{
					if ((motorSpeed - motorSpeedCurrent) > 2)
 8007a8c:	4b11      	ldr	r3, [pc, #68]	; (8007ad4 <maincpp+0x390>)
 8007a8e:	881b      	ldrh	r3, [r3, #0]
 8007a90:	001a      	movs	r2, r3
 8007a92:	4b11      	ldr	r3, [pc, #68]	; (8007ad8 <maincpp+0x394>)
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	dd33      	ble.n	8007b04 <maincpp+0x3c0>
						motorSpeedCurrent += 5;
 8007a9c:	4b0e      	ldr	r3, [pc, #56]	; (8007ad8 <maincpp+0x394>)
 8007a9e:	881b      	ldrh	r3, [r3, #0]
 8007aa0:	3305      	adds	r3, #5
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	4b0c      	ldr	r3, [pc, #48]	; (8007ad8 <maincpp+0x394>)
 8007aa6:	801a      	strh	r2, [r3, #0]
 8007aa8:	e044      	b.n	8007b34 <maincpp+0x3f0>
 8007aaa:	46c0      	nop			; (mov r8, r8)
 8007aac:	200000d4 	.word	0x200000d4
 8007ab0:	200001d0 	.word	0x200001d0
 8007ab4:	50000400 	.word	0x50000400
 8007ab8:	08007cc8 	.word	0x08007cc8
 8007abc:	20000024 	.word	0x20000024
 8007ac0:	20000474 	.word	0x20000474
 8007ac4:	2000045b 	.word	0x2000045b
 8007ac8:	20000494 	.word	0x20000494
 8007acc:	2000044a 	.word	0x2000044a
 8007ad0:	20000450 	.word	0x20000450
 8007ad4:	2000043c 	.word	0x2000043c
 8007ad8:	2000043e 	.word	0x2000043e
 8007adc:	200003f8 	.word	0x200003f8
 8007ae0:	2000045a 	.word	0x2000045a
 8007ae4:	20000028 	.word	0x20000028
 8007ae8:	20000468 	.word	0x20000468
 8007aec:	e734d9b4 	.word	0xe734d9b4
 8007af0:	3f4a680c 	.word	0x3f4a680c
 8007af4:	745d1746 	.word	0x745d1746
 8007af8:	3fb745d1 	.word	0x3fb745d1
 8007afc:	20000460 	.word	0x20000460
 8007b00:	20000470 	.word	0x20000470
					else
						motorSpeedCurrent = motorSpeed;
 8007b04:	4b46      	ldr	r3, [pc, #280]	; (8007c20 <maincpp+0x4dc>)
 8007b06:	881a      	ldrh	r2, [r3, #0]
 8007b08:	4b46      	ldr	r3, [pc, #280]	; (8007c24 <maincpp+0x4e0>)
 8007b0a:	801a      	strh	r2, [r3, #0]
 8007b0c:	e012      	b.n	8007b34 <maincpp+0x3f0>

				}
				else
				{
					if ((motorSpeed - motorSpeedCurrent) > 20)
 8007b0e:	4b44      	ldr	r3, [pc, #272]	; (8007c20 <maincpp+0x4dc>)
 8007b10:	881b      	ldrh	r3, [r3, #0]
 8007b12:	001a      	movs	r2, r3
 8007b14:	4b43      	ldr	r3, [pc, #268]	; (8007c24 <maincpp+0x4e0>)
 8007b16:	881b      	ldrh	r3, [r3, #0]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	2b14      	cmp	r3, #20
 8007b1c:	dd06      	ble.n	8007b2c <maincpp+0x3e8>
						motorSpeedCurrent += 20;
 8007b1e:	4b41      	ldr	r3, [pc, #260]	; (8007c24 <maincpp+0x4e0>)
 8007b20:	881b      	ldrh	r3, [r3, #0]
 8007b22:	3314      	adds	r3, #20
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	4b3f      	ldr	r3, [pc, #252]	; (8007c24 <maincpp+0x4e0>)
 8007b28:	801a      	strh	r2, [r3, #0]
 8007b2a:	e003      	b.n	8007b34 <maincpp+0x3f0>
					else
						motorSpeedCurrent = motorSpeed;
 8007b2c:	4b3c      	ldr	r3, [pc, #240]	; (8007c20 <maincpp+0x4dc>)
 8007b2e:	881a      	ldrh	r2, [r3, #0]
 8007b30:	4b3c      	ldr	r3, [pc, #240]	; (8007c24 <maincpp+0x4e0>)
 8007b32:	801a      	strh	r2, [r3, #0]
				}

				if( motorSpeedCurrent < 150 )
 8007b34:	4b3b      	ldr	r3, [pc, #236]	; (8007c24 <maincpp+0x4e0>)
 8007b36:	881b      	ldrh	r3, [r3, #0]
 8007b38:	2b95      	cmp	r3, #149	; 0x95
 8007b3a:	d822      	bhi.n	8007b82 <maincpp+0x43e>
				{
					//checkRising = 500;// 1288;
//					checkRising = 1300 - map(batteryVoltages,8,21,1,1000);
					checkRising = 1400 - map(batteryVoltages,8,21,1,
 8007b3c:	4b3a      	ldr	r3, [pc, #232]	; (8007c28 <maincpp+0x4e4>)
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	0010      	movs	r0, r2
 8007b44:	0019      	movs	r1, r3
 8007b46:	f7f9 fafd 	bl	8001144 <__aeabi_d2iz>
 8007b4a:	0004      	movs	r4, r0
							map(motorSpeedCurrent, 1,200,2,1250)
 8007b4c:	4b35      	ldr	r3, [pc, #212]	; (8007c24 <maincpp+0x4e0>)
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	0018      	movs	r0, r3
 8007b52:	4b36      	ldr	r3, [pc, #216]	; (8007c2c <maincpp+0x4e8>)
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	2302      	movs	r3, #2
 8007b58:	22c8      	movs	r2, #200	; 0xc8
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	f7ff fd10 	bl	8007580 <_Z3mapiiiii>
 8007b60:	0003      	movs	r3, r0
					checkRising = 1400 - map(batteryVoltages,8,21,1,
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	2301      	movs	r3, #1
 8007b66:	2215      	movs	r2, #21
 8007b68:	2108      	movs	r1, #8
 8007b6a:	0020      	movs	r0, r4
 8007b6c:	f7ff fd08 	bl	8007580 <_Z3mapiiiii>
 8007b70:	0003      	movs	r3, r0
 8007b72:	001a      	movs	r2, r3
 8007b74:	23af      	movs	r3, #175	; 0xaf
 8007b76:	00db      	lsls	r3, r3, #3
 8007b78:	1a9b      	subs	r3, r3, r2
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	4b2c      	ldr	r3, [pc, #176]	; (8007c30 <maincpp+0x4ec>)
 8007b7e:	801a      	strh	r2, [r3, #0]
 8007b80:	e012      	b.n	8007ba8 <maincpp+0x464>

							);
				}
				else
				{
					checkRising =  map(1024 - motorSpeedCurrent,0,1024,1,320);
 8007b82:	4b28      	ldr	r3, [pc, #160]	; (8007c24 <maincpp+0x4e0>)
 8007b84:	881b      	ldrh	r3, [r3, #0]
 8007b86:	001a      	movs	r2, r3
 8007b88:	2380      	movs	r3, #128	; 0x80
 8007b8a:	00db      	lsls	r3, r3, #3
 8007b8c:	1a98      	subs	r0, r3, r2
 8007b8e:	2380      	movs	r3, #128	; 0x80
 8007b90:	00da      	lsls	r2, r3, #3
 8007b92:	23a0      	movs	r3, #160	; 0xa0
 8007b94:	005b      	lsls	r3, r3, #1
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	2301      	movs	r3, #1
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	f7ff fcf0 	bl	8007580 <_Z3mapiiiii>
 8007ba0:	0003      	movs	r3, r0
 8007ba2:	001a      	movs	r2, r3
 8007ba4:	4b22      	ldr	r3, [pc, #136]	; (8007c30 <maincpp+0x4ec>)
 8007ba6:	801a      	strh	r2, [r3, #0]
				}
				checkFalling =  map(1024 - motorSpeedCurrent,0,1024,1,1256);
 8007ba8:	4b1e      	ldr	r3, [pc, #120]	; (8007c24 <maincpp+0x4e0>)
 8007baa:	881b      	ldrh	r3, [r3, #0]
 8007bac:	001a      	movs	r2, r3
 8007bae:	2380      	movs	r3, #128	; 0x80
 8007bb0:	00db      	lsls	r3, r3, #3
 8007bb2:	1a98      	subs	r0, r3, r2
 8007bb4:	2380      	movs	r3, #128	; 0x80
 8007bb6:	00da      	lsls	r2, r3, #3
 8007bb8:	239d      	movs	r3, #157	; 0x9d
 8007bba:	00db      	lsls	r3, r3, #3
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	f7ff fcdd 	bl	8007580 <_Z3mapiiiii>
 8007bc6:	0003      	movs	r3, r0
 8007bc8:	001a      	movs	r2, r3
 8007bca:	4b1a      	ldr	r3, [pc, #104]	; (8007c34 <maincpp+0x4f0>)
 8007bcc:	801a      	strh	r2, [r3, #0]
				setDutyCycle(motorSpeedCurrent);
 8007bce:	4b15      	ldr	r3, [pc, #84]	; (8007c24 <maincpp+0x4e0>)
 8007bd0:	881b      	ldrh	r3, [r3, #0]
 8007bd2:	0018      	movs	r0, r3
 8007bd4:	f7ff f93e 	bl	8006e54 <_Z12setDutyCyclet>
			}

			if( frequencyType == 1) // PWM
 8007bd8:	4b17      	ldr	r3, [pc, #92]	; (8007c38 <maincpp+0x4f4>)
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	3b01      	subs	r3, #1
 8007be0:	425a      	negs	r2, r3
 8007be2:	4153      	adcs	r3, r2
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00c      	beq.n	8007c04 <maincpp+0x4c0>
			{
				TIM1->PSC = 8-1;
 8007bea:	4b14      	ldr	r3, [pc, #80]	; (8007c3c <maincpp+0x4f8>)
 8007bec:	2207      	movs	r2, #7
 8007bee:	629a      	str	r2, [r3, #40]	; 0x28
				TIM1->CNT = 0;
 8007bf0:	4b12      	ldr	r3, [pc, #72]	; (8007c3c <maincpp+0x4f8>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)dmaSignal, 3);
 8007bf6:	4a12      	ldr	r2, [pc, #72]	; (8007c40 <maincpp+0x4fc>)
 8007bf8:	4812      	ldr	r0, [pc, #72]	; (8007c44 <maincpp+0x500>)
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	2108      	movs	r1, #8
 8007bfe:	f7fd fcf1 	bl	80055e4 <HAL_TIM_IC_Start_DMA>
 8007c02:	e5f2      	b.n	80077ea <maincpp+0xa6>
			}
			else
			{
				TIM1->PSC = 0;
 8007c04:	4b0d      	ldr	r3, [pc, #52]	; (8007c3c <maincpp+0x4f8>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	629a      	str	r2, [r3, #40]	; 0x28
				TIM1->CNT = 0;
 8007c0a:	4b0c      	ldr	r3, [pc, #48]	; (8007c3c <maincpp+0x4f8>)
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)dmaSignal, 16);
 8007c10:	4a0b      	ldr	r2, [pc, #44]	; (8007c40 <maincpp+0x4fc>)
 8007c12:	480c      	ldr	r0, [pc, #48]	; (8007c44 <maincpp+0x500>)
 8007c14:	2310      	movs	r3, #16
 8007c16:	2108      	movs	r1, #8
 8007c18:	f7fd fce4 	bl	80055e4 <HAL_TIM_IC_Start_DMA>
			}

		}

	}
 8007c1c:	e5e5      	b.n	80077ea <maincpp+0xa6>
 8007c1e:	46c0      	nop			; (mov r8, r8)
 8007c20:	2000043c 	.word	0x2000043c
 8007c24:	2000043e 	.word	0x2000043e
 8007c28:	20000460 	.word	0x20000460
 8007c2c:	000004e2 	.word	0x000004e2
 8007c30:	2000044c 	.word	0x2000044c
 8007c34:	2000044e 	.word	0x2000044e
 8007c38:	20000450 	.word	0x20000450
 8007c3c:	40012c00 	.word	0x40012c00
 8007c40:	200003fc 	.word	0x200003fc
 8007c44:	20000138 	.word	0x20000138

08007c48 <__libc_init_array>:
 8007c48:	b570      	push	{r4, r5, r6, lr}
 8007c4a:	2600      	movs	r6, #0
 8007c4c:	4d0c      	ldr	r5, [pc, #48]	; (8007c80 <__libc_init_array+0x38>)
 8007c4e:	4c0d      	ldr	r4, [pc, #52]	; (8007c84 <__libc_init_array+0x3c>)
 8007c50:	1b64      	subs	r4, r4, r5
 8007c52:	10a4      	asrs	r4, r4, #2
 8007c54:	42a6      	cmp	r6, r4
 8007c56:	d109      	bne.n	8007c6c <__libc_init_array+0x24>
 8007c58:	2600      	movs	r6, #0
 8007c5a:	f000 f821 	bl	8007ca0 <_init>
 8007c5e:	4d0a      	ldr	r5, [pc, #40]	; (8007c88 <__libc_init_array+0x40>)
 8007c60:	4c0a      	ldr	r4, [pc, #40]	; (8007c8c <__libc_init_array+0x44>)
 8007c62:	1b64      	subs	r4, r4, r5
 8007c64:	10a4      	asrs	r4, r4, #2
 8007c66:	42a6      	cmp	r6, r4
 8007c68:	d105      	bne.n	8007c76 <__libc_init_array+0x2e>
 8007c6a:	bd70      	pop	{r4, r5, r6, pc}
 8007c6c:	00b3      	lsls	r3, r6, #2
 8007c6e:	58eb      	ldr	r3, [r5, r3]
 8007c70:	4798      	blx	r3
 8007c72:	3601      	adds	r6, #1
 8007c74:	e7ee      	b.n	8007c54 <__libc_init_array+0xc>
 8007c76:	00b3      	lsls	r3, r6, #2
 8007c78:	58eb      	ldr	r3, [r5, r3]
 8007c7a:	4798      	blx	r3
 8007c7c:	3601      	adds	r6, #1
 8007c7e:	e7f2      	b.n	8007c66 <__libc_init_array+0x1e>
 8007c80:	08007ed0 	.word	0x08007ed0
 8007c84:	08007ed0 	.word	0x08007ed0
 8007c88:	08007ed0 	.word	0x08007ed0
 8007c8c:	08007ed4 	.word	0x08007ed4

08007c90 <memset>:
 8007c90:	0003      	movs	r3, r0
 8007c92:	1882      	adds	r2, r0, r2
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d100      	bne.n	8007c9a <memset+0xa>
 8007c98:	4770      	bx	lr
 8007c9a:	7019      	strb	r1, [r3, #0]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	e7f9      	b.n	8007c94 <memset+0x4>

08007ca0 <_init>:
 8007ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca2:	46c0      	nop			; (mov r8, r8)
 8007ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ca6:	bc08      	pop	{r3}
 8007ca8:	469e      	mov	lr, r3
 8007caa:	4770      	bx	lr

08007cac <_fini>:
 8007cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cae:	46c0      	nop			; (mov r8, r8)
 8007cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cb2:	bc08      	pop	{r3}
 8007cb4:	469e      	mov	lr, r3
 8007cb6:	4770      	bx	lr

08007cb8 <__FLASH_Program_Fast_veneer>:
 8007cb8:	b401      	push	{r0}
 8007cba:	4802      	ldr	r0, [pc, #8]	; (8007cc4 <__FLASH_Program_Fast_veneer+0xc>)
 8007cbc:	4684      	mov	ip, r0
 8007cbe:	bc01      	pop	{r0}
 8007cc0:	4760      	bx	ip
 8007cc2:	bf00      	nop
 8007cc4:	2000002d 	.word	0x2000002d

Disassembly of section .data:

20000000 <SystemCoreClock>:
20000000:	00f42400                                .$..

20000004 <uwTickPrio>:
20000004:	00000004                                ....

20000008 <uwTickFreq>:
20000008:	                                         ..

2000000a <resolution>:
2000000a:	                                         ..

2000000c <zcPortOff>:
2000000c:	50000800 50000400 50000800 50000800     ...P...P...P...P
2000001c:	50000400 50000800                       ...P...P

20000024 <sizeOfSettings>:
20000024:	00000020                                 ...

20000028 <motorSpeedDirection>:
20000028:	00000001                                ....

2000002c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
2000002c:	b580      	push	{r7, lr}
2000002e:	b088      	sub	sp, #32
20000030:	af00      	add	r7, sp, #0
20000032:	6078      	str	r0, [r7, #4]
20000034:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20000036:	231f      	movs	r3, #31
20000038:	18fb      	adds	r3, r7, r3
2000003a:	2200      	movs	r2, #0
2000003c:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000003e:	687b      	ldr	r3, [r7, #4]
20000040:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000042:	683b      	ldr	r3, [r7, #0]
20000044:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000046:	4b1a      	ldr	r3, [pc, #104]	; (200000b0 <FLASH_Program_Fast+0x84>)
20000048:	695a      	ldr	r2, [r3, #20]
2000004a:	4b19      	ldr	r3, [pc, #100]	; (200000b0 <FLASH_Program_Fast+0x84>)
2000004c:	2180      	movs	r1, #128	; 0x80
2000004e:	02c9      	lsls	r1, r1, #11
20000050:	430a      	orrs	r2, r1
20000052:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000054:	f3ef 8310 	mrs	r3, PRIMASK
20000058:	60fb      	str	r3, [r7, #12]
  return(result);
2000005a:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000005c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000005e:	b672      	cpsid	i
}
20000060:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
20000062:	e00f      	b.n	20000084 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000064:	697a      	ldr	r2, [r7, #20]
20000066:	69bb      	ldr	r3, [r7, #24]
20000068:	6812      	ldr	r2, [r2, #0]
2000006a:	601a      	str	r2, [r3, #0]
    src += 4U;
2000006c:	697b      	ldr	r3, [r7, #20]
2000006e:	3304      	adds	r3, #4
20000070:	617b      	str	r3, [r7, #20]
    dest += 4U;
20000072:	69bb      	ldr	r3, [r7, #24]
20000074:	3304      	adds	r3, #4
20000076:	61bb      	str	r3, [r7, #24]
    index++;
20000078:	211f      	movs	r1, #31
2000007a:	187b      	adds	r3, r7, r1
2000007c:	781a      	ldrb	r2, [r3, #0]
2000007e:	187b      	adds	r3, r7, r1
20000080:	3201      	adds	r2, #1
20000082:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000084:	231f      	movs	r3, #31
20000086:	18fb      	adds	r3, r7, r3
20000088:	781b      	ldrb	r3, [r3, #0]
2000008a:	2b3f      	cmp	r3, #63	; 0x3f
2000008c:	d9ea      	bls.n	20000064 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
2000008e:	46c0      	nop			; (mov r8, r8)
20000090:	4b07      	ldr	r3, [pc, #28]	; (200000b0 <FLASH_Program_Fast+0x84>)
20000092:	691a      	ldr	r2, [r3, #16]
20000094:	2380      	movs	r3, #128	; 0x80
20000096:	025b      	lsls	r3, r3, #9
20000098:	4013      	ands	r3, r2
2000009a:	d1f9      	bne.n	20000090 <FLASH_Program_Fast+0x64>
2000009c:	693b      	ldr	r3, [r7, #16]
2000009e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000a0:	68bb      	ldr	r3, [r7, #8]
200000a2:	f383 8810 	msr	PRIMASK, r3
}
200000a6:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000a8:	46c0      	nop			; (mov r8, r8)
200000aa:	46bd      	mov	sp, r7
200000ac:	b008      	add	sp, #32
200000ae:	bd80      	pop	{r7, pc}
200000b0:	40022000 	.word	0x40022000
